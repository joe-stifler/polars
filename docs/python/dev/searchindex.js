Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 94, 123, 139, 189, 257, 271, 467, 644, 679, 776, 826, 986, 1124], "refer": [0, 31, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 117, 148, 271, 365, 368, 465, 466, 502, 546, 571, 572, 573, 576, 679, 703, 741, 788, 885, 888, 1006, 1080, 1081, 1082, 1085, 1124], "input": [0, 69, 75, 96, 104, 105, 143, 167, 170, 189, 199, 214, 215, 222, 236, 246, 247, 250, 271, 278, 380, 400, 459, 466, 467, 476, 493, 535, 599, 601, 603, 604, 606, 609, 612, 613, 614, 621, 630, 631, 638, 639, 640, 642, 643, 644, 646, 650, 658, 661, 663, 669, 675, 679, 690, 695, 715, 718, 745, 746, 747, 753, 758, 764, 765, 769, 788, 917, 982, 983, 985, 986, 1124], "output": [0, 26, 28, 31, 32, 33, 34, 35, 48, 109, 140, 168, 169, 171, 172, 183, 189, 194, 199, 201, 210, 214, 242, 246, 271, 281, 283, 285, 327, 463, 464, 465, 467, 475, 499, 514, 516, 518, 520, 596, 600, 602, 604, 615, 623, 624, 642, 643, 644, 666, 679, 690, 716, 717, 719, 720, 729, 730, 734, 735, 745, 747, 764, 768, 771, 776, 788, 795, 796, 798, 842, 986, 1004, 1112, 1124], "seri": [0, 1, 2, 23, 61, 70, 71, 72, 73, 77, 93, 95, 98, 100, 127, 131, 151, 159, 162, 164, 165, 169, 173, 176, 177, 179, 181, 190, 191, 195, 206, 207, 224, 228, 231, 234, 235, 251, 271, 284, 285, 296, 303, 311, 312, 314, 361, 383, 389, 398, 402, 405, 406, 409, 411, 412, 413, 425, 432, 435, 448, 449, 453, 454, 455, 461, 463, 465, 467, 496, 502, 503, 504, 505, 506, 508, 510, 511, 517, 524, 527, 538, 560, 571, 572, 573, 576, 580, 586, 587, 595, 604, 605, 606, 610, 611, 616, 618, 619, 623, 624, 626, 627, 631, 632, 634, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 651, 652, 654, 655, 658, 660, 661, 664, 666, 667, 668, 670, 679, 690, 712, 717, 770, 788, 1116, 1118, 1120, 1123, 1125, 1128, 1129, 1130, 1132], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 127, 128, 129, 137, 269, 270, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 675, 679, 690, 700, 701, 704, 708, 709, 713, 716, 724, 725, 726, 727, 729, 730, 734, 735, 739, 743, 752, 753, 759, 760, 761, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 797, 812, 813, 824, 842, 843, 881, 913, 944, 945, 954, 986, 1004, 1059, 1071, 1072, 1093, 1101, 1102, 1112, 1124, 1131, 1132], "lazyfram": [0, 1, 54, 55, 57, 59, 69, 70, 71, 72, 73, 75, 76, 77, 118, 119, 120, 121, 122, 123, 126, 131, 187, 200, 215, 247, 271, 309, 386, 455, 679, 690, 787, 791, 1131, 1132], "express": [0, 48, 49, 50, 75, 76, 128, 131, 133, 143, 155, 157, 159, 167, 170, 189, 197, 201, 209, 214, 215, 222, 236, 246, 247, 250, 257, 271, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 295, 296, 303, 305, 306, 307, 309, 315, 316, 317, 318, 319, 320, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 380, 382, 383, 385, 386, 390, 392, 393, 394, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 415, 418, 419, 423, 424, 426, 427, 428, 431, 432, 437, 455, 461, 462, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 478, 480, 482, 484, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 501, 505, 506, 508, 522, 523, 524, 526, 528, 530, 531, 533, 535, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 555, 556, 557, 560, 561, 562, 563, 582, 583, 586, 588, 589, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 646, 650, 652, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 669, 670, 675, 678, 690, 695, 700, 701, 707, 708, 709, 712, 715, 718, 739, 745, 746, 750, 751, 753, 758, 764, 765, 766, 769, 776, 788, 791, 831, 832, 833, 841, 851, 903, 917, 950, 951, 954, 986, 1027, 1034, 1048, 1049, 1050, 1055, 1056, 1057, 1058, 1059, 1065, 1066, 1124], "selector": [0, 31, 144, 150, 152, 155, 199, 201, 230, 238, 240, 271, 380, 679, 690, 697, 704, 705, 708, 734, 759, 788], "extend": [0, 96, 244, 271, 383, 679, 690, 797, 903, 1124], "function": [0, 31, 69, 70, 71, 72, 73, 76, 94, 100, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 129, 139, 140, 148, 154, 162, 189, 193, 200, 201, 233, 237, 240, 241, 252, 257, 271, 281, 285, 326, 362, 377, 378, 379, 455, 463, 464, 465, 467, 493, 495, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 532, 590, 600, 604, 618, 619, 631, 632, 634, 640, 642, 643, 644, 654, 675, 679, 690, 701, 703, 709, 729, 730, 734, 738, 741, 761, 771, 776, 788, 798, 841, 882, 896, 897, 898, 899, 913, 978, 986, 1004, 1014, 1015, 1029, 1030, 1036, 1041, 1106, 1124, 1132], "data": [0, 1, 6, 16, 17, 19, 28, 29, 30, 31, 32, 33, 37, 48, 49, 50, 54, 60, 69, 70, 72, 77, 78, 83, 84, 88, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 129, 130, 131, 133, 139, 146, 156, 166, 167, 168, 169, 170, 171, 172, 183, 184, 185, 187, 189, 199, 200, 204, 209, 210, 211, 220, 227, 232, 233, 237, 246, 249, 269, 271, 281, 282, 283, 287, 288, 289, 290, 291, 292, 295, 298, 299, 300, 301, 303, 305, 306, 307, 310, 311, 318, 319, 327, 328, 333, 334, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 375, 376, 382, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 418, 423, 424, 426, 432, 437, 457, 462, 467, 488, 489, 492, 493, 499, 501, 502, 505, 506, 508, 521, 522, 530, 531, 532, 538, 540, 541, 543, 545, 546, 547, 548, 550, 555, 560, 561, 562, 563, 571, 572, 573, 576, 586, 588, 589, 590, 592, 593, 596, 599, 604, 606, 622, 623, 624, 625, 626, 627, 628, 638, 639, 641, 642, 643, 644, 652, 655, 665, 666, 667, 670, 675, 679, 690, 698, 699, 709, 715, 716, 717, 718, 719, 720, 738, 764, 788, 795, 796, 797, 808, 812, 813, 814, 816, 820, 822, 830, 834, 842, 849, 850, 853, 854, 855, 856, 857, 859, 860, 861, 862, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 889, 890, 891, 892, 893, 901, 902, 913, 919, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 937, 946, 947, 949, 955, 960, 980, 986, 998, 1004, 1006, 1010, 1012, 1025, 1026, 1036, 1041, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1063, 1064, 1069, 1070, 1071, 1072, 1080, 1081, 1082, 1085, 1104, 1105, 1106, 1107, 1109, 1114, 1123, 1124, 1131], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 83, 93, 95, 96, 97, 98, 99, 104, 105, 106, 108, 109, 113, 114, 115, 118, 119, 125, 126, 127, 130, 131, 140, 162, 166, 168, 169, 171, 172, 173, 184, 185, 189, 227, 233, 235, 238, 271, 281, 283, 287, 288, 289, 290, 291, 292, 295, 303, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 327, 328, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 373, 380, 382, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 423, 424, 426, 432, 437, 455, 466, 467, 499, 501, 505, 506, 508, 530, 531, 538, 540, 541, 543, 545, 546, 547, 548, 550, 555, 560, 561, 562, 563, 571, 586, 588, 589, 590, 596, 604, 606, 622, 623, 624, 625, 626, 627, 628, 630, 631, 638, 639, 640, 641, 642, 643, 644, 652, 655, 665, 666, 667, 670, 675, 679, 690, 700, 701, 707, 709, 716, 717, 719, 720, 724, 739, 751, 759, 788, 795, 796, 808, 814, 816, 820, 822, 824, 831, 832, 833, 842, 849, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 889, 890, 891, 893, 901, 911, 919, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 937, 946, 947, 949, 955, 960, 978, 998, 1004, 1010, 1012, 1036, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1063, 1064, 1069, 1070, 1071, 1072, 1080, 1104, 1105, 1107, 1115, 1124, 1131], "config": [0, 69, 214, 246, 271, 628, 690, 745, 764, 788], "except": [0, 174, 186, 188, 225, 271, 630, 690, 725, 788, 791, 912, 942, 1095, 1105, 1114, 1124], "test": [0, 6, 107, 109, 115, 690, 721, 728, 788], "util": [0, 100, 634, 690, 709, 788], "sql": [0, 29, 54, 58, 106, 107, 185, 271, 659, 690], "These": [1, 31, 137, 237, 271, 369, 678, 882, 889], "allow": [1, 30, 31, 48, 49, 50, 60, 83, 94, 118, 120, 121, 122, 123, 131, 133, 139, 183, 186, 187, 209, 210, 212, 232, 233, 238, 249, 271, 358, 365, 368, 465, 467, 504, 522, 571, 572, 573, 679, 724, 725, 729, 730, 734, 759, 766, 788, 791, 878, 885, 888, 986, 1008, 1026, 1028, 1080, 1081, 1082, 1106, 1124, 1132], "you": [1, 13, 31, 36, 50, 59, 69, 76, 77, 93, 95, 96, 97, 99, 104, 105, 106, 107, 109, 110, 113, 114, 116, 118, 122, 126, 137, 156, 168, 169, 171, 172, 183, 189, 197, 209, 210, 211, 229, 232, 237, 257, 271, 315, 316, 317, 354, 355, 358, 361, 365, 368, 369, 380, 386, 400, 431, 455, 465, 466, 467, 504, 509, 512, 513, 514, 515, 516, 518, 519, 520, 551, 554, 618, 623, 628, 632, 644, 652, 655, 670, 679, 700, 701, 705, 716, 717, 719, 720, 721, 728, 751, 776, 788, 791, 797, 831, 832, 833, 874, 875, 881, 885, 888, 889, 902, 917, 954, 986, 1008, 1013, 1060, 1063, 1082, 1105, 1114, 1124, 1132], "regist": [1, 54, 56, 57, 58, 59, 70, 71, 72, 73, 132, 134, 1131], "custom": [1, 30, 31, 70, 71, 72, 73, 132, 133, 134, 140, 189, 252, 257, 271, 285, 365, 368, 455, 463, 465, 467, 510, 511, 604, 642, 643, 644, 679, 729, 730, 771, 776, 788, 798, 885, 888, 978, 986, 1014, 1015, 1124, 1132], "dedic": [1, 94, 183, 210, 271], "namespac": [1, 270, 678, 690, 787, 1132], "underli": [1, 79, 86, 93, 95, 96, 97, 99, 106, 113, 114, 116, 128, 131, 133, 155, 156, 183, 184, 210, 227, 271, 304, 334, 335, 339, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 361, 363, 370, 371, 372, 373, 504, 521, 539, 542, 679, 708, 788, 791, 797, 815, 825, 850, 851, 855, 859, 861, 862, 866, 868, 871, 873, 876, 879, 880, 881, 883, 890, 891, 892, 893, 902, 1008, 1025, 1036, 1048, 1051, 1100, 1105, 1124], "polar": [1, 271, 678, 679, 684, 690, 788, 791, 1124, 1131], "class": [1, 2, 3, 4, 5, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 128, 129, 211, 233, 271, 666, 675, 679, 684, 690, 741, 788, 1104, 1105, 1124, 1131], "without": [1, 76, 100, 106, 108, 111, 117, 119, 123, 240, 241, 271, 285, 326, 362, 512, 513, 514, 515, 516, 518, 519, 520, 658, 679, 701, 761, 788, 823, 826, 841, 882, 913, 1004, 1105, 1124], "requir": [1, 30, 31, 36, 50, 69, 94, 98, 126, 127, 143, 148, 209, 233, 236, 271, 301, 377, 378, 379, 457, 467, 527, 571, 572, 573, 593, 655, 679, 695, 753, 758, 788, 813, 897, 898, 899, 980, 1035, 1080, 1081, 1082, 1105, 1106, 1109, 1124], "subclass": [1, 271], "mixin": 1, "expr": [1, 69, 70, 71, 72, 73, 155, 157, 159, 185, 186, 197, 201, 209, 214, 215, 246, 247, 271, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 679, 680, 681, 684, 685, 686, 687, 708, 710, 724, 725, 740, 745, 746, 747, 750, 764, 765, 788, 841, 851, 878, 904, 944, 945, 950, 951, 954, 958, 972, 976, 1034, 1048, 1053, 1073, 1096, 1124], "ar": [1, 9, 11, 15, 18, 26, 28, 30, 31, 48, 49, 50, 59, 60, 69, 76, 77, 78, 85, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 120, 121, 123, 126, 127, 129, 131, 137, 139, 143, 148, 152, 154, 157, 161, 162, 166, 167, 168, 169, 170, 171, 172, 183, 185, 186, 187, 189, 193, 194, 199, 201, 209, 210, 211, 214, 215, 216, 222, 228, 233, 236, 241, 242, 246, 247, 250, 271, 281, 283, 309, 322, 324, 325, 362, 369, 374, 376, 377, 378, 379, 400, 402, 405, 406, 409, 411, 412, 413, 416, 421, 455, 465, 466, 489, 493, 499, 502, 505, 506, 512, 513, 514, 515, 516, 517, 518, 519, 520, 529, 532, 534, 535, 548, 549, 550, 551, 554, 555, 584, 600, 601, 603, 609, 612, 613, 614, 615, 621, 623, 624, 626, 627, 646, 650, 658, 661, 663, 666, 667, 669, 671, 672, 674, 678, 679, 680, 681, 684, 685, 686, 687, 690, 695, 701, 705, 709, 710, 715, 716, 717, 718, 719, 720, 721, 724, 725, 728, 730, 734, 735, 739, 742, 745, 746, 748, 753, 758, 761, 764, 765, 766, 769, 788, 791, 795, 796, 797, 823, 839, 840, 882, 889, 895, 896, 897, 898, 899, 910, 917, 921, 925, 926, 930, 931, 932, 933, 940, 944, 978, 1004, 1006, 1010, 1021, 1038, 1041, 1057, 1058, 1060, 1063, 1064, 1082, 1094, 1105, 1106, 1114, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1130, 1132], "all": [1, 8, 15, 18, 23, 26, 28, 31, 37, 48, 56, 69, 75, 93, 96, 98, 99, 104, 105, 108, 109, 110, 112, 115, 116, 118, 120, 121, 128, 129, 133, 137, 144, 149, 152, 158, 174, 179, 181, 183, 184, 187, 188, 193, 196, 197, 204, 209, 210, 211, 215, 221, 225, 230, 232, 238, 240, 242, 247, 271, 282, 284, 302, 320, 326, 331, 332, 333, 380, 385, 391, 395, 397, 399, 402, 406, 412, 413, 415, 419, 431, 437, 451, 455, 464, 465, 483, 491, 497, 502, 507, 511, 527, 533, 535, 540, 541, 547, 548, 549, 550, 553, 556, 557, 559, 565, 566, 567, 568, 583, 601, 620, 621, 623, 630, 632, 637, 654, 661, 662, 663, 669, 675, 679, 684, 690, 697, 700, 701, 705, 707, 709, 711, 729, 730, 734, 739, 746, 751, 752, 759, 765, 766, 788, 791, 841, 843, 846, 847, 849, 912, 919, 937, 942, 954, 960, 974, 978, 1006, 1015, 1042, 1049, 1050, 1056, 1057, 1058, 1059, 1062, 1065, 1066, 1068, 1074, 1075, 1076, 1077, 1095, 1124, 1131, 1132], "support": [1, 30, 31, 36, 77, 93, 94, 95, 96, 97, 98, 99, 100, 106, 107, 108, 109, 113, 114, 115, 119, 128, 133, 137, 183, 184, 185, 186, 210, 211, 221, 222, 229, 233, 271, 449, 493, 533, 535, 560, 675, 679, 684, 724, 725, 752, 753, 788, 791, 972, 1042, 1069, 1106, 1124, 1131], "target": [1, 29, 30, 31, 74, 271, 546, 571, 572, 573, 791, 1055, 1080, 1081, 1082], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 34, 36, 40, 48, 49, 50, 54, 55, 59, 60, 69, 75, 76, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 135, 137, 139, 140, 141, 142, 143, 148, 152, 153, 154, 156, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 177, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 209, 210, 211, 212, 214, 215, 219, 221, 223, 224, 227, 229, 232, 233, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 257, 270, 271, 281, 284, 285, 286, 295, 301, 308, 309, 311, 312, 320, 326, 327, 333, 334, 346, 354, 355, 358, 361, 362, 365, 368, 372, 376, 382, 398, 399, 400, 403, 405, 407, 410, 415, 419, 427, 430, 431, 432, 436, 437, 444, 445, 446, 447, 450, 452, 455, 456, 457, 460, 461, 463, 465, 467, 471, 472, 473, 474, 475, 476, 486, 487, 489, 493, 497, 499, 502, 503, 504, 505, 506, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 526, 527, 528, 533, 534, 535, 540, 546, 552, 553, 558, 559, 565, 566, 567, 568, 574, 579, 583, 591, 593, 594, 595, 596, 600, 604, 605, 613, 616, 618, 623, 631, 632, 634, 640, 642, 644, 655, 658, 666, 669, 675, 679, 690, 691, 693, 694, 695, 696, 700, 701, 705, 707, 709, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 729, 730, 734, 735, 739, 741, 742, 745, 746, 747, 750, 751, 752, 753, 758, 759, 761, 764, 765, 766, 767, 768, 771, 772, 776, 787, 788, 791, 797, 798, 807, 813, 819, 822, 824, 825, 826, 841, 842, 849, 850, 851, 862, 874, 875, 878, 881, 882, 885, 888, 892, 896, 901, 902, 909, 910, 913, 918, 922, 924, 925, 927, 928, 934, 936, 938, 939, 941, 950, 953, 954, 955, 959, 960, 967, 968, 969, 970, 973, 975, 979, 980, 984, 986, 987, 988, 989, 990, 992, 993, 995, 996, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1019, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1042, 1043, 1045, 1049, 1055, 1061, 1062, 1067, 1068, 1074, 1075, 1076, 1077, 1082, 1083, 1088, 1089, 1093, 1094, 1100, 1102, 1104, 1105, 1106, 1108, 1109, 1111, 1112, 1113, 1114, 1124, 1131, 1132], "featur": [1, 36, 40, 60, 74, 271], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 35, 40, 48, 49, 50, 54, 59, 60, 69, 74, 75, 76, 77, 80, 82, 83, 85, 89, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 133, 135, 137, 141, 143, 152, 154, 156, 159, 163, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 197, 199, 200, 201, 209, 210, 211, 212, 215, 221, 222, 223, 224, 225, 227, 232, 233, 236, 237, 238, 240, 241, 242, 243, 247, 249, 253, 257, 270, 271, 278, 281, 283, 284, 285, 286, 296, 309, 320, 326, 327, 331, 332, 333, 335, 345, 358, 362, 365, 369, 377, 378, 379, 382, 386, 395, 398, 400, 416, 422, 431, 434, 449, 454, 455, 460, 465, 466, 467, 471, 474, 476, 493, 499, 502, 504, 505, 506, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 528, 529, 532, 533, 534, 535, 537, 539, 540, 541, 546, 547, 548, 550, 552, 553, 555, 556, 558, 559, 560, 563, 565, 566, 567, 568, 571, 572, 573, 576, 579, 596, 597, 600, 602, 605, 610, 613, 615, 616, 618, 619, 623, 624, 626, 627, 632, 641, 644, 655, 656, 657, 658, 660, 666, 667, 668, 669, 675, 679, 693, 695, 700, 701, 705, 707, 709, 712, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 727, 729, 730, 734, 735, 739, 746, 747, 751, 752, 753, 754, 758, 759, 761, 762, 765, 768, 771, 772, 776, 788, 791, 795, 796, 797, 798, 823, 826, 841, 842, 846, 847, 849, 851, 861, 878, 882, 885, 889, 896, 897, 898, 899, 901, 902, 906, 910, 911, 912, 913, 918, 920, 927, 934, 935, 936, 938, 939, 940, 942, 945, 954, 957, 972, 977, 978, 986, 1004, 1006, 1008, 1010, 1013, 1015, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1037, 1038, 1041, 1042, 1045, 1048, 1049, 1050, 1055, 1056, 1057, 1059, 1061, 1062, 1064, 1065, 1067, 1068, 1069, 1072, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1088, 1095, 1100, 1105, 1106, 1112, 1113, 1114, 1124, 1131, 1132], "primarili": 1, "intend": 1, "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 36, 39, 48, 50, 54, 55, 56, 57, 59, 60, 69, 76, 77, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 135, 140, 141, 144, 150, 152, 157, 158, 162, 167, 168, 169, 170, 171, 172, 179, 181, 183, 184, 186, 189, 191, 193, 196, 197, 199, 200, 201, 209, 210, 211, 212, 214, 215, 222, 223, 224, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 246, 247, 250, 257, 271, 279, 281, 283, 285, 286, 296, 304, 305, 312, 326, 331, 332, 361, 365, 368, 369, 372, 374, 377, 378, 379, 380, 385, 386, 399, 400, 416, 431, 455, 465, 466, 467, 470, 493, 499, 502, 504, 506, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 527, 532, 534, 535, 537, 539, 542, 543, 544, 546, 547, 549, 551, 552, 556, 558, 560, 562, 564, 571, 572, 573, 576, 597, 600, 601, 602, 603, 605, 611, 614, 615, 618, 620, 621, 623, 624, 625, 626, 627, 628, 632, 634, 641, 644, 645, 646, 649, 650, 652, 655, 656, 657, 658, 660, 661, 662, 663, 666, 667, 668, 670, 675, 678, 679, 689, 690, 693, 697, 700, 701, 704, 705, 709, 710, 711, 714, 715, 716, 717, 719, 720, 721, 725, 727, 728, 734, 745, 746, 753, 754, 759, 761, 762, 764, 765, 769, 776, 788, 791, 795, 796, 797, 798, 815, 816, 824, 826, 841, 842, 846, 847, 881, 885, 888, 889, 892, 895, 897, 898, 899, 904, 905, 910, 913, 916, 917, 940, 954, 978, 985, 986, 1004, 1006, 1008, 1010, 1013, 1015, 1026, 1029, 1030, 1031, 1035, 1041, 1045, 1048, 1051, 1052, 1055, 1056, 1058, 1060, 1061, 1065, 1067, 1069, 1071, 1080, 1081, 1082, 1085, 1096, 1101, 1103, 1104, 1105, 1106, 1113, 1114, 1124, 1131, 1132], "librari": [1, 79, 86, 106, 109, 465, 679, 1132], "author": 1, "domain": [1, 547, 1056], "specif": [1, 26, 30, 31, 93, 95, 97, 99, 104, 107, 108, 109, 113, 114, 115, 119, 130, 131, 144, 183, 271, 365, 368, 571, 572, 573, 576, 697, 788, 791, 885, 888, 1080, 1081, 1082, 1085, 1124, 1132], "capabl": [1, 31, 271], "which": [1, 9, 18, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 69, 70, 71, 72, 73, 96, 104, 105, 107, 108, 109, 118, 119, 126, 132, 134, 143, 144, 152, 156, 157, 167, 168, 169, 170, 171, 172, 186, 232, 236, 238, 242, 271, 281, 309, 358, 362, 365, 369, 383, 400, 402, 406, 409, 411, 412, 413, 455, 467, 476, 509, 512, 513, 514, 515, 516, 518, 519, 520, 555, 623, 624, 626, 627, 628, 666, 667, 669, 679, 695, 697, 705, 707, 716, 717, 719, 720, 725, 747, 758, 759, 768, 788, 797, 878, 882, 885, 889, 902, 903, 917, 921, 926, 930, 931, 932, 933, 978, 1013, 1029, 1064, 1105, 1124, 1132], "mai": [1, 30, 40, 50, 76, 77, 93, 95, 96, 97, 99, 104, 108, 110, 113, 114, 119, 120, 123, 154, 156, 168, 169, 186, 189, 218, 219, 233, 240, 241, 242, 271, 285, 326, 333, 334, 346, 358, 362, 369, 380, 448, 454, 455, 465, 467, 475, 512, 513, 514, 515, 516, 518, 519, 520, 525, 526, 618, 619, 623, 624, 626, 627, 632, 654, 666, 667, 679, 701, 709, 716, 717, 725, 729, 730, 749, 750, 761, 767, 771, 776, 788, 797, 825, 826, 841, 849, 850, 862, 878, 882, 889, 896, 902, 913, 971, 977, 986, 1004, 1033, 1034, 1082, 1105, 1124, 1132], "exist": [1, 29, 30, 31, 69, 108, 119, 131, 237, 246, 247, 271, 280, 303, 306, 307, 335, 679, 764, 765, 788, 791, 851], "belong": [1, 168, 271, 716, 788], "core": [1, 233, 271, 1132], "cannot": [1, 104, 105, 109, 110, 115, 126, 135, 189, 211, 212, 257, 271, 304, 380, 466, 467, 522, 542, 562, 581, 644, 679, 751, 776, 788, 815, 986, 1026, 1051, 1071, 1124], "overrid": [1, 31, 93, 95, 96, 97, 98, 99, 104, 106, 107, 109, 113, 114, 115, 128, 129, 133, 135, 271, 466, 679, 788, 985, 1124], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 69, 70, 71, 72, 73, 74, 78, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 128, 129, 131, 132, 133, 134, 137, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 172, 174, 176, 179, 181, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 212, 216, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 278, 279, 280, 303, 305, 306, 307, 311, 327, 330, 336, 358, 361, 362, 365, 368, 369, 380, 382, 386, 388, 392, 398, 400, 425, 426, 434, 435, 437, 449, 453, 455, 464, 466, 467, 475, 477, 478, 480, 490, 493, 495, 497, 499, 505, 507, 509, 512, 513, 514, 515, 516, 518, 519, 520, 526, 527, 534, 535, 580, 581, 583, 586, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 679, 685, 695, 697, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 714, 715, 716, 717, 719, 720, 722, 724, 725, 734, 735, 739, 741, 742, 743, 747, 748, 750, 751, 752, 753, 758, 759, 760, 761, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 820, 822, 842, 843, 852, 878, 881, 882, 885, 888, 889, 901, 905, 949, 950, 951, 960, 978, 985, 995, 996, 1004, 1009, 1029, 1030, 1089, 1091, 1101, 1102, 1103, 1112, 1124, 1128, 1131, 1132], "dt": [1, 69, 109, 115, 169, 271, 623, 628, 687, 717, 788, 791, 1130], "attempt": [1, 232, 271], "do": [1, 31, 48, 49, 50, 69, 75, 76, 77, 104, 118, 126, 127, 156, 168, 169, 171, 172, 186, 201, 227, 237, 240, 271, 326, 431, 493, 566, 567, 568, 652, 655, 670, 679, 700, 701, 707, 716, 717, 719, 720, 725, 729, 730, 739, 751, 788, 791, 797, 841, 902, 954, 1075, 1076, 1077, 1105, 1114, 1124], "so": [1, 60, 107, 118, 135, 166, 168, 169, 171, 172, 201, 271, 296, 309, 400, 434, 455, 467, 566, 567, 568, 679, 716, 717, 719, 720, 788, 957, 1075, 1076, 1077], "rais": [1, 14, 18, 30, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 109, 115, 118, 126, 127, 139, 201, 209, 271, 304, 361, 369, 454, 475, 499, 539, 542, 555, 571, 572, 573, 576, 625, 641, 679, 815, 881, 889, 977, 1004, 1048, 1051, 1064, 1080, 1081, 1082, 1085, 1105, 1114, 1124], "an": [1, 26, 28, 29, 30, 31, 40, 48, 70, 72, 73, 75, 76, 79, 83, 84, 86, 93, 104, 105, 106, 107, 108, 109, 111, 115, 116, 118, 120, 129, 131, 133, 144, 145, 146, 154, 157, 159, 162, 168, 169, 171, 172, 183, 184, 186, 189, 197, 201, 207, 209, 227, 232, 237, 240, 246, 257, 271, 280, 304, 310, 315, 316, 317, 321, 322, 323, 324, 325, 326, 327, 335, 336, 358, 361, 365, 372, 383, 385, 386, 392, 415, 427, 428, 431, 434, 454, 455, 464, 465, 467, 476, 498, 499, 506, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 539, 542, 547, 571, 572, 573, 576, 586, 592, 600, 606, 610, 623, 624, 626, 627, 629, 634, 638, 639, 641, 652, 654, 655, 658, 661, 666, 667, 669, 670, 675, 679, 690, 697, 698, 699, 700, 701, 707, 709, 712, 716, 717, 719, 720, 725, 730, 739, 751, 764, 766, 776, 788, 791, 815, 820, 830, 831, 832, 833, 834, 837, 838, 839, 840, 841, 851, 885, 892, 896, 903, 927, 939, 950, 951, 954, 957, 977, 986, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1029, 1030, 1048, 1051, 1056, 1080, 1081, 1082, 1085, 1105, 1114, 1124, 1131], "attributeerror": 1, "howev": [1, 96, 106, 154, 189, 232, 271, 896, 1124], "can": [1, 13, 30, 31, 36, 39, 59, 69, 84, 94, 96, 104, 105, 106, 109, 110, 115, 116, 118, 120, 122, 123, 129, 130, 131, 133, 135, 137, 143, 145, 152, 153, 162, 167, 168, 169, 170, 171, 172, 179, 181, 189, 197, 201, 211, 214, 222, 232, 236, 237, 240, 246, 257, 271, 281, 285, 322, 325, 326, 354, 355, 358, 361, 369, 383, 400, 415, 431, 455, 467, 475, 483, 493, 497, 499, 504, 512, 513, 514, 515, 516, 518, 519, 520, 524, 527, 529, 532, 535, 550, 566, 567, 568, 571, 583, 609, 632, 634, 644, 669, 675, 678, 679, 689, 695, 700, 705, 707, 709, 716, 717, 719, 720, 745, 747, 753, 758, 764, 767, 788, 791, 798, 826, 841, 842, 874, 875, 878, 881, 882, 889, 903, 917, 954, 978, 986, 991, 1004, 1008, 1029, 1030, 1031, 1035, 1038, 1041, 1049, 1050, 1057, 1059, 1075, 1076, 1077, 1080, 1082, 1105, 1124, 1131], "other": [1, 18, 30, 31, 36, 59, 76, 104, 105, 106, 118, 126, 127, 152, 156, 163, 185, 186, 193, 194, 209, 211, 214, 215, 241, 244, 246, 247, 269, 271, 278, 282, 284, 296, 315, 316, 317, 330, 375, 376, 390, 393, 394, 400, 405, 418, 425, 430, 436, 444, 445, 446, 447, 452, 456, 462, 466, 471, 474, 482, 484, 488, 489, 492, 535, 582, 590, 592, 599, 601, 603, 612, 613, 614, 621, 623, 646, 650, 658, 661, 663, 679, 690, 701, 705, 724, 725, 734, 735, 745, 746, 761, 764, 765, 766, 788, 791, 797, 831, 832, 833, 845, 902, 925, 948, 953, 959, 967, 968, 969, 970, 975, 979, 1028, 1107, 1115, 1123, 1124], "onli": [1, 18, 26, 28, 31, 48, 54, 56, 60, 69, 74, 77, 104, 105, 108, 109, 110, 112, 116, 118, 119, 120, 121, 122, 131, 133, 137, 140, 152, 156, 168, 169, 171, 183, 185, 186, 189, 191, 210, 211, 224, 229, 231, 232, 242, 257, 271, 279, 281, 283, 285, 296, 309, 314, 315, 316, 317, 358, 366, 380, 389, 415, 467, 493, 497, 504, 512, 513, 514, 515, 516, 518, 519, 520, 583, 594, 623, 624, 644, 679, 700, 705, 716, 717, 719, 720, 721, 724, 725, 728, 776, 788, 795, 796, 797, 828, 831, 832, 833, 842, 878, 902, 908, 927, 986, 1004, 1008, 1100, 1103, 1124, 1131, 1132], "gener": [1, 106, 107, 124, 128, 129, 130, 131, 133, 139, 148, 201, 212, 230, 232, 237, 271, 522, 528, 606, 623, 626, 638, 639, 655, 666, 667, 679, 788, 1026, 1037, 1101, 1124, 1132], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 115, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 675, 679, 691, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 944, 945, 952, 954, 955, 958, 960, 962, 967, 968, 970, 971, 972, 973, 976, 978, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124, 1131, 1132], "register_expr_namespac": [1, 70, 72, 73], "greet": 1, "def": [1, 70, 71, 72, 73, 129, 130, 131, 133, 137, 200, 237, 271, 278, 495, 547, 599, 643, 679, 701, 738, 788, 791, 1056, 1132], "__init__": [1, 2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 128, 1131], "self": [1, 55, 56, 57, 59, 70, 71, 72, 73, 75, 76, 145, 146, 149, 156, 174, 176, 177, 188, 190, 191, 192, 193, 195, 198, 199, 201, 203, 204, 206, 207, 212, 218, 220, 221, 223, 224, 225, 230, 237, 239, 242, 243, 244, 248, 249, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 679, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 788, 797, 798, 820, 834, 902, 906, 914, 984, 985, 986, 997, 1001, 1002, 1007, 1029, 1030, 1031, 1043, 1111, 1115, 1124], "_expr": [1, 71], "hello": [1, 18, 55, 58, 566, 567, 568, 960, 1075, 1076, 1077], "return": [1, 9, 26, 28, 31, 32, 33, 34, 35, 48, 49, 50, 54, 58, 69, 70, 71, 72, 73, 74, 75, 76, 85, 87, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 130, 136, 140, 143, 145, 148, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 171, 174, 176, 182, 183, 184, 185, 187, 188, 189, 196, 197, 199, 200, 201, 209, 210, 211, 212, 225, 226, 232, 233, 236, 237, 238, 242, 246, 247, 255, 257, 260, 265, 271, 281, 283, 287, 288, 289, 290, 291, 292, 295, 296, 303, 305, 306, 307, 308, 318, 319, 327, 328, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 373, 382, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 420, 423, 424, 426, 432, 434, 435, 437, 453, 454, 461, 466, 476, 478, 483, 495, 499, 501, 505, 506, 508, 522, 523, 529, 530, 531, 538, 540, 541, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 560, 561, 562, 563, 579, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 599, 600, 604, 606, 607, 608, 609, 610, 622, 623, 624, 625, 626, 627, 628, 634, 636, 638, 639, 641, 642, 643, 644, 652, 655, 658, 661, 664, 665, 666, 667, 669, 670, 679, 695, 698, 700, 701, 706, 707, 709, 716, 717, 719, 720, 721, 727, 728, 730, 738, 739, 747, 751, 756, 757, 758, 759, 764, 765, 768, 774, 779, 784, 788, 795, 796, 797, 805, 806, 808, 809, 814, 816, 819, 823, 826, 830, 842, 843, 849, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 887, 889, 890, 891, 893, 896, 901, 902, 910, 912, 913, 919, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 937, 939, 942, 946, 947, 949, 955, 957, 958, 960, 976, 977, 984, 985, 986, 991, 998, 1004, 1010, 1011, 1012, 1013, 1026, 1027, 1028, 1030, 1038, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1071, 1072, 1088, 1095, 1097, 1108, 1110, 1111, 1112, 1115, 1124, 1131, 1132], "lit": [1, 280, 303, 400, 415, 618, 632, 652, 655, 669, 670, 679, 905, 1124], "alia": [1, 12, 69, 71, 73, 168, 169, 188, 239, 246, 271, 278, 282, 303, 305, 306, 307, 308, 315, 316, 317, 321, 322, 323, 324, 325, 327, 329, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 376, 386, 388, 390, 393, 394, 398, 400, 404, 405, 408, 415, 418, 419, 420, 428, 431, 444, 445, 446, 447, 462, 464, 466, 467, 471, 472, 473, 474, 476, 479, 482, 484, 488, 489, 492, 494, 496, 499, 502, 504, 523, 539, 541, 544, 546, 547, 551, 554, 560, 561, 562, 563, 564, 569, 570, 580, 581, 582, 590, 591, 592, 598, 599, 606, 607, 608, 611, 612, 613, 614, 618, 619, 623, 628, 629, 632, 633, 643, 644, 654, 655, 661, 666, 669, 679, 716, 717, 722, 728, 760, 764, 788, 842, 850, 852, 858, 878, 881, 885, 887, 942, 954, 985, 1004, 1009, 1055, 1056, 1071, 1072, 1124], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 55, 58, 566, 567, 568, 577, 960, 1075, 1076, 1077, 1086], "select": [1, 29, 54, 55, 56, 69, 70, 71, 72, 103, 104, 105, 106, 107, 108, 110, 112, 116, 118, 123, 130, 182, 186, 189, 197, 200, 209, 215, 221, 234, 239, 242, 271, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 311, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 340, 344, 345, 346, 347, 348, 350, 352, 354, 355, 357, 358, 361, 364, 369, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 387, 389, 391, 395, 397, 398, 399, 401, 402, 405, 406, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 450, 451, 455, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 481, 483, 485, 486, 487, 490, 491, 492, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 545, 546, 547, 548, 549, 550, 552, 555, 558, 562, 563, 566, 567, 568, 571, 574, 575, 577, 578, 580, 581, 584, 587, 588, 589, 591, 593, 594, 595, 596, 597, 600, 602, 605, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 628, 630, 631, 632, 633, 634, 636, 640, 645, 647, 648, 649, 651, 654, 655, 659, 660, 661, 662, 664, 668, 675, 679, 702, 722, 725, 738, 746, 747, 752, 760, 766, 788, 791, 812, 813, 881, 944, 945, 954, 1029, 1030, 1042, 1059, 1080, 1096, 1124, 1131], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 51, 54, 55, 56, 58, 60, 61, 69, 70, 71, 72, 73, 77, 78, 90, 93, 94, 95, 96, 97, 98, 99, 100, 118, 123, 131, 133, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 162, 164, 165, 167, 168, 169, 173, 174, 176, 177, 178, 179, 181, 182, 185, 186, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 214, 218, 219, 221, 222, 223, 224, 225, 226, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 675, 679, 693, 695, 697, 698, 700, 701, 703, 704, 705, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 797, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 819, 820, 822, 824, 825, 827, 828, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 919, 921, 923, 925, 926, 929, 930, 931, 932, 933, 937, 939, 944, 945, 952, 954, 955, 958, 960, 962, 967, 968, 970, 971, 972, 973, 976, 978, 984, 985, 986, 991, 998, 1000, 1001, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1124, 1131], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 107, 109, 115, 118, 123, 125, 126, 127, 130, 131, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 278, 279, 280, 281, 283, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 340, 342, 343, 345, 346, 351, 353, 358, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 415, 416, 418, 419, 420, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 458, 459, 460, 461, 462, 464, 466, 467, 482, 483, 484, 488, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 534, 535, 536, 539, 540, 543, 544, 546, 547, 548, 549, 551, 553, 554, 556, 559, 560, 561, 562, 563, 564, 565, 572, 576, 580, 581, 582, 583, 585, 586, 587, 591, 594, 595, 596, 598, 599, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 675, 679, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 797, 799, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 822, 824, 825, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 855, 856, 858, 859, 861, 863, 864, 865, 867, 869, 870, 871, 873, 877, 879, 881, 882, 883, 885, 887, 888, 889, 891, 892, 896, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 940, 941, 950, 952, 954, 955, 958, 962, 967, 968, 970, 971, 972, 973, 976, 978, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1065, 1068, 1069, 1073, 1074, 1081, 1085, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1124, 1131, 1132], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 108, 109, 110, 115, 118, 119, 123, 125, 126, 127, 128, 131, 133, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 557, 558, 562, 563, 564, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 675, 679, 693, 695, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 728, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 824, 825, 827, 828, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 919, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 939, 941, 944, 945, 952, 954, 955, 957, 958, 962, 967, 968, 970, 971, 972, 973, 976, 978, 984, 986, 987, 988, 989, 990, 991, 992, 993, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1055, 1057, 1058, 1059, 1065, 1071, 1072, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124, 1131, 1132], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 107, 118, 123, 124, 125, 126, 127, 130, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 282, 284, 286, 293, 295, 296, 297, 298, 299, 300, 301, 302, 308, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 333, 335, 336, 339, 340, 341, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 478, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 538, 541, 544, 546, 548, 549, 550, 551, 554, 555, 556, 557, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 654, 658, 659, 660, 661, 662, 664, 667, 668, 669, 675, 679, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 722, 724, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 797, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 824, 825, 827, 828, 829, 830, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 849, 851, 853, 854, 857, 859, 863, 864, 865, 870, 871, 873, 874, 875, 880, 881, 882, 886, 889, 891, 892, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 919, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 941, 952, 954, 955, 958, 960, 962, 967, 968, 970, 971, 972, 973, 976, 978, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1055, 1057, 1058, 1059, 1063, 1064, 1065, 1066, 1071, 1072, 1075, 1076, 1077, 1080, 1082, 1083, 1084, 1086, 1087, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1124, 1131, 1132], "column_0": [1, 189, 237, 271], "register_dataframe_namespac": [1, 71, 72, 73], "split": [1, 31, 70, 184, 271, 562, 563, 1071, 1072], "splitfram": [1, 70], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 55, 70, 71, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 118, 129, 131, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 675, 679, 716, 717, 747, 760, 761, 774, 776, 784, 788, 791, 812, 813, 824, 881, 944, 945, 954, 1059, 1066, 1071, 1072, 1102, 1124, 1132], "_df": [1, 70], "by_alternate_row": 1, "list": [1, 2, 30, 31, 39, 54, 58, 69, 70, 72, 75, 76, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 129, 130, 131, 133, 147, 150, 153, 154, 155, 159, 165, 167, 168, 176, 183, 196, 199, 209, 210, 211, 214, 222, 228, 229, 237, 238, 239, 240, 246, 250, 251, 271, 279, 301, 327, 382, 388, 397, 463, 465, 467, 476, 477, 493, 499, 505, 506, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 534, 535, 547, 561, 580, 581, 586, 590, 609, 613, 624, 627, 629, 637, 639, 641, 644, 659, 661, 667, 675, 679, 702, 706, 708, 715, 716, 745, 753, 759, 760, 764, 766, 769, 770, 788, 791, 813, 829, 842, 896, 901, 906, 909, 913, 914, 925, 1004, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1056, 1070, 1096, 1104, 1107, 1124, 1132], "with_row_count": [1, 271, 466, 512, 513, 515, 518, 519, 520, 679, 788, 1030, 1124], "name": [1, 16, 20, 22, 28, 29, 31, 34, 48, 55, 56, 57, 58, 59, 70, 71, 72, 73, 77, 82, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 127, 128, 129, 131, 132, 133, 134, 143, 144, 147, 150, 151, 152, 155, 160, 161, 164, 166, 167, 170, 182, 183, 185, 186, 189, 193, 194, 199, 201, 205, 209, 210, 211, 213, 214, 215, 222, 228, 230, 232, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 249, 250, 271, 280, 285, 303, 305, 306, 307, 327, 380, 400, 415, 455, 464, 467, 475, 477, 493, 497, 499, 535, 547, 548, 580, 581, 583, 600, 601, 602, 603, 605, 607, 608, 609, 612, 613, 614, 615, 617, 620, 621, 623, 630, 636, 637, 645, 646, 649, 650, 653, 655, 656, 657, 658, 661, 662, 663, 664, 666, 669, 675, 679, 695, 697, 702, 704, 705, 708, 715, 718, 724, 725, 734, 735, 742, 744, 745, 746, 747, 753, 758, 759, 760, 761, 764, 765, 767, 769, 788, 791, 794, 830, 842, 978, 1004, 1009, 1055, 1056, 1057, 1065, 1089, 1091, 1101, 1102, 1106, 1124, 1131, 1132], "n": [1, 12, 15, 23, 28, 35, 39, 41, 48, 56, 57, 70, 71, 72, 73, 102, 104, 105, 118, 140, 145, 156, 168, 174, 183, 184, 188, 189, 210, 211, 212, 223, 225, 226, 229, 231, 243, 255, 265, 271, 308, 326, 329, 334, 335, 342, 367, 372, 383, 396, 420, 429, 435, 444, 453, 455, 494, 495, 505, 518, 520, 522, 532, 537, 556, 562, 563, 566, 567, 573, 585, 587, 591, 592, 597, 599, 615, 623, 624, 625, 626, 627, 634, 636, 652, 655, 656, 657, 660, 664, 668, 670, 679, 698, 700, 716, 721, 728, 754, 756, 757, 762, 774, 784, 788, 791, 797, 819, 830, 841, 844, 850, 851, 858, 887, 892, 902, 903, 912, 942, 952, 958, 967, 976, 978, 1000, 1022, 1024, 1026, 1041, 1045, 1065, 1071, 1072, 1082, 1095, 1097, 1103, 1108, 1113, 1124, 1131, 1132], "filter": [1, 70, 108, 118, 119, 123, 152, 179, 180, 181, 257, 271, 475, 477, 544, 564, 598, 632, 669, 679, 705, 709, 722, 776, 788, 791, 1029, 1124], "col": [1, 12, 28, 31, 48, 69, 70, 71, 72, 97, 99, 118, 129, 131, 159, 167, 168, 169, 180, 182, 187, 189, 197, 200, 209, 214, 222, 239, 240, 246, 250, 271, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 398, 399, 400, 401, 404, 405, 408, 409, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 455, 457, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 574, 575, 577, 578, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 610, 612, 613, 614, 618, 619, 620, 628, 631, 632, 633, 634, 635, 640, 645, 649, 653, 654, 662, 669, 679, 699, 712, 715, 716, 717, 722, 727, 738, 745, 753, 760, 764, 766, 769, 788, 791, 812, 813, 824, 878, 881, 944, 945, 954, 1010, 1029, 1030, 1059, 1080, 1124, 1132], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 36, 50, 51, 54, 59, 69, 70, 71, 73, 77, 94, 104, 105, 107, 109, 110, 112, 115, 116, 118, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 139, 140, 142, 144, 145, 146, 148, 149, 150, 153, 157, 158, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 177, 182, 183, 184, 185, 187, 189, 190, 191, 192, 195, 196, 197, 198, 201, 202, 203, 207, 210, 211, 212, 213, 214, 219, 221, 222, 223, 224, 230, 231, 232, 233, 234, 237, 240, 242, 243, 246, 248, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 271, 277, 279, 280, 282, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 309, 310, 313, 314, 316, 317, 318, 319, 321, 326, 327, 328, 331, 332, 343, 347, 348, 350, 351, 357, 361, 363, 364, 369, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 389, 390, 393, 394, 395, 399, 402, 403, 406, 407, 409, 410, 411, 412, 413, 415, 416, 418, 423, 424, 427, 428, 430, 431, 434, 436, 441, 452, 455, 456, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 476, 481, 482, 484, 486, 487, 488, 489, 491, 492, 494, 495, 496, 499, 500, 501, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 529, 530, 531, 532, 536, 537, 540, 541, 546, 547, 553, 559, 565, 571, 573, 579, 582, 584, 588, 589, 590, 592, 597, 598, 600, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 623, 625, 629, 632, 638, 639, 642, 644, 647, 648, 652, 653, 654, 655, 659, 665, 666, 667, 668, 669, 670, 679, 694, 697, 698, 699, 704, 706, 710, 711, 714, 715, 716, 718, 719, 720, 724, 727, 729, 730, 733, 737, 739, 740, 741, 744, 745, 750, 751, 753, 754, 762, 764, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 820, 825, 827, 828, 830, 835, 836, 841, 842, 843, 845, 846, 847, 859, 864, 865, 866, 867, 868, 869, 871, 876, 877, 881, 883, 884, 889, 895, 897, 898, 899, 904, 908, 911, 913, 921, 922, 924, 926, 928, 930, 931, 932, 933, 939, 940, 950, 953, 954, 957, 959, 975, 978, 979, 984, 988, 989, 1000, 1004, 1005, 1006, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1038, 1039, 1040, 1044, 1045, 1047, 1049, 1050, 1055, 1056, 1059, 1062, 1068, 1074, 1080, 1082, 1088, 1098, 1099, 1101, 1106, 1107, 1111, 1113, 1114, 1124, 1132], "drop": [1, 96, 151, 152, 189, 238, 246, 271, 329, 331, 332, 429, 499, 679, 705, 759, 764, 788, 844, 846, 847, 952, 1004, 1124], "aaa": [1, 31, 271, 539, 580, 581, 1048], "bbb": [1, 31, 271, 580, 581, 791], "ccc": [1, 31, 271, 580, 581], "ddd": [1, 31, 271, 580, 581], "eee": [1, 31, 271, 791], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 30, 31, 34, 39, 60, 69, 70, 77, 80, 82, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 131, 143, 144, 148, 150, 151, 152, 153, 155, 160, 161, 164, 166, 167, 168, 169, 170, 171, 172, 176, 177, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 222, 223, 224, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 271, 280, 281, 283, 295, 327, 335, 337, 338, 339, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 363, 365, 366, 368, 370, 371, 373, 380, 382, 386, 388, 400, 415, 425, 432, 450, 454, 455, 466, 467, 473, 475, 477, 493, 497, 499, 503, 505, 506, 512, 513, 514, 515, 516, 518, 519, 520, 527, 534, 535, 545, 562, 563, 571, 572, 573, 574, 576, 583, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 679, 695, 697, 704, 705, 706, 708, 715, 716, 717, 718, 719, 720, 724, 725, 730, 731, 732, 733, 734, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 753, 754, 755, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 776, 788, 791, 795, 796, 823, 825, 842, 853, 854, 855, 859, 861, 862, 866, 868, 871, 873, 876, 879, 880, 883, 885, 886, 888, 890, 891, 893, 901, 948, 955, 973, 977, 1004, 1010, 1035, 1054, 1071, 1072, 1080, 1081, 1082, 1083, 1085, 1093, 1101, 1102, 1124, 1132], "txt": [1, 12, 118], "utf8": [1, 18, 30, 60, 78, 96, 100, 104, 105, 118, 128, 130, 133, 144, 153, 154, 155, 162, 213, 232, 271, 305, 365, 368, 437, 466, 538, 543, 545, 546, 547, 548, 550, 551, 560, 561, 562, 563, 571, 572, 573, 574, 576, 614, 675, 679, 697, 706, 708, 744, 788, 791, 885, 888, 938, 960, 1047, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1069, 1070, 1071, 1072, 1080, 1081, 1082, 1083, 1085, 1124], "register_lazyframe_namespac": [1, 70, 71, 73], "dtypeoper": [1, 72], "ldf": [1, 72, 769, 770, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783], "_ldf": [1, 72], "upcast_integer_typ": [1, 72], "with_column": [1, 12, 72, 169, 200, 240, 247, 271, 278, 280, 296, 305, 310, 312, 315, 316, 317, 322, 325, 327, 329, 333, 339, 341, 342, 343, 351, 353, 358, 359, 360, 361, 362, 363, 365, 367, 368, 370, 371, 375, 376, 384, 385, 390, 393, 394, 395, 399, 400, 404, 408, 409, 411, 412, 413, 415, 418, 431, 444, 445, 446, 447, 462, 464, 466, 467, 482, 484, 488, 489, 493, 494, 495, 496, 497, 499, 502, 509, 512, 513, 514, 515, 516, 518, 519, 520, 539, 544, 547, 548, 551, 554, 556, 557, 560, 561, 562, 563, 564, 569, 570, 579, 582, 583, 590, 592, 599, 601, 603, 612, 614, 621, 624, 629, 639, 643, 646, 650, 659, 663, 667, 669, 679, 717, 738, 765, 788, 791, 824, 842, 881, 954, 1004, 1124], "tp": [1, 72], "cast": [1, 30, 71, 72, 78, 93, 126, 127, 162, 168, 169, 171, 172, 200, 233, 246, 271, 284, 312, 324, 325, 334, 365, 368, 466, 492, 495, 504, 549, 550, 579, 584, 590, 614, 659, 679, 716, 717, 719, 720, 738, 764, 788, 791, 824, 826, 839, 840, 850, 885, 888, 1008, 1058, 1059, 1094, 1102, 1107, 1124], "int64": [1, 2, 30, 31, 34, 71, 72, 100, 104, 153, 162, 168, 169, 171, 172, 187, 200, 213, 227, 233, 271, 298, 299, 300, 301, 324, 325, 340, 344, 348, 350, 352, 357, 364, 380, 495, 504, 549, 584, 590, 606, 630, 638, 639, 641, 655, 661, 675, 679, 699, 706, 716, 717, 719, 720, 722, 727, 738, 744, 747, 788, 810, 811, 812, 813, 839, 840, 856, 860, 867, 869, 872, 877, 884, 1008, 1028, 1094, 1105, 1106, 1107, 1124], "int8": [1, 72, 162, 271, 324, 325, 584, 652, 655, 670, 679, 839, 840, 844, 985, 1011, 1094, 1111, 1124], "int16": [1, 72, 324, 325, 584, 679, 791, 839, 840, 985, 1094, 1103, 1124], "int32": [1, 72, 93, 96, 100, 109, 130, 131, 168, 169, 171, 172, 184, 271, 310, 346, 373, 555, 590, 655, 679, 716, 717, 719, 720, 788, 791, 862, 893, 984, 1064, 1107, 1124], "b": [1, 27, 28, 30, 32, 33, 36, 56, 57, 59, 60, 61, 72, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 109, 125, 139, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 173, 174, 176, 177, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 271, 278, 280, 281, 283, 284, 297, 302, 303, 305, 306, 307, 310, 312, 320, 327, 330, 380, 382, 384, 385, 386, 388, 391, 395, 397, 399, 400, 402, 406, 409, 411, 412, 413, 415, 419, 425, 431, 437, 439, 444, 445, 446, 447, 464, 467, 472, 483, 490, 491, 493, 495, 497, 499, 502, 507, 509, 527, 533, 535, 545, 549, 556, 583, 594, 598, 600, 601, 602, 603, 605, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 629, 630, 631, 632, 633, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 656, 657, 660, 661, 662, 663, 664, 668, 675, 679, 693, 695, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 721, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 794, 797, 823, 824, 825, 826, 842, 843, 845, 895, 896, 902, 905, 917, 925, 938, 954, 967, 968, 970, 1004, 1009, 1028, 1054, 1058, 1065, 1093, 1106, 1110, 1124, 1131], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 33, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 118, 125, 126, 127, 133, 139, 141, 143, 144, 145, 146, 149, 152, 155, 156, 157, 158, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 206, 210, 211, 217, 222, 225, 226, 227, 228, 229, 230, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 282, 284, 297, 298, 299, 300, 302, 308, 310, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 330, 335, 339, 344, 352, 359, 360, 361, 362, 364, 365, 368, 369, 371, 375, 376, 381, 382, 384, 385, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 400, 412, 413, 415, 418, 419, 420, 428, 429, 431, 432, 435, 444, 445, 446, 447, 448, 449, 453, 459, 462, 464, 466, 467, 482, 484, 488, 489, 492, 493, 495, 496, 497, 500, 502, 506, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 529, 533, 534, 535, 536, 539, 541, 547, 551, 552, 554, 555, 556, 558, 560, 561, 562, 563, 569, 570, 571, 580, 581, 582, 583, 585, 586, 587, 590, 591, 592, 599, 601, 603, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 629, 631, 632, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 675, 679, 693, 695, 697, 698, 699, 700, 701, 705, 707, 708, 709, 710, 711, 713, 715, 716, 717, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 797, 800, 807, 810, 811, 812, 819, 828, 829, 831, 841, 843, 845, 859, 860, 866, 868, 871, 872, 873, 874, 875, 876, 880, 881, 882, 884, 885, 888, 889, 890, 891, 902, 904, 905, 912, 913, 916, 917, 919, 925, 930, 931, 932, 933, 937, 952, 954, 955, 958, 967, 968, 970, 971, 972, 976, 985, 992, 1000, 1001, 1002, 1006, 1010, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1038, 1042, 1043, 1048, 1050, 1056, 1060, 1061, 1063, 1064, 1067, 1069, 1071, 1072, 1078, 1079, 1080, 1093, 1095, 1096, 1097, 1103, 1106, 1107, 1108, 1115, 1124, 1132], "c": [1, 27, 28, 30, 32, 33, 36, 56, 57, 59, 60, 61, 70, 72, 77, 78, 94, 96, 98, 100, 109, 118, 129, 139, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 159, 160, 162, 163, 165, 166, 167, 168, 174, 176, 177, 184, 185, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 236, 237, 240, 241, 243, 244, 246, 250, 253, 254, 255, 256, 258, 259, 261, 264, 265, 271, 278, 280, 281, 283, 285, 302, 327, 400, 415, 425, 437, 439, 464, 467, 493, 495, 499, 527, 562, 571, 594, 601, 603, 605, 611, 612, 614, 615, 616, 617, 618, 619, 621, 631, 632, 633, 636, 640, 643, 645, 646, 647, 648, 649, 650, 651, 660, 662, 663, 664, 668, 675, 679, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 712, 715, 716, 724, 727, 734, 737, 739, 742, 743, 744, 745, 751, 752, 753, 758, 761, 764, 766, 769, 772, 773, 774, 775, 777, 778, 780, 783, 784, 788, 791, 825, 842, 843, 917, 938, 1004, 1071, 1080, 1110, 1124], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 33, 36, 57, 59, 61, 69, 70, 72, 73, 77, 93, 96, 97, 98, 99, 100, 102, 105, 125, 131, 144, 145, 146, 149, 155, 156, 157, 158, 162, 164, 165, 166, 167, 168, 169, 174, 175, 177, 178, 180, 182, 183, 186, 187, 188, 189, 191, 193, 196, 197, 199, 201, 202, 203, 206, 211, 217, 222, 225, 226, 227, 228, 229, 230, 232, 235, 240, 242, 245, 246, 248, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 271, 278, 279, 282, 308, 310, 312, 314, 315, 316, 317, 326, 327, 328, 329, 330, 335, 336, 340, 361, 363, 364, 365, 368, 376, 379, 380, 383, 385, 389, 390, 393, 394, 396, 397, 400, 404, 408, 409, 411, 412, 413, 415, 418, 420, 428, 431, 432, 435, 441, 444, 445, 446, 447, 451, 453, 482, 484, 489, 492, 493, 494, 495, 499, 500, 502, 506, 507, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 529, 535, 541, 550, 551, 554, 555, 579, 582, 585, 587, 591, 592, 605, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 628, 629, 630, 631, 632, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 660, 662, 663, 664, 668, 679, 697, 698, 699, 700, 701, 707, 708, 709, 710, 711, 713, 715, 716, 717, 721, 723, 725, 726, 727, 728, 732, 733, 734, 739, 749, 750, 751, 752, 753, 754, 755, 756, 757, 763, 764, 767, 769, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 797, 800, 804, 807, 819, 824, 829, 831, 837, 841, 842, 843, 844, 845, 851, 852, 853, 854, 855, 856, 881, 883, 884, 885, 886, 888, 890, 891, 899, 902, 903, 912, 913, 916, 917, 923, 929, 954, 955, 958, 962, 967, 968, 970, 976, 984, 985, 992, 1000, 1001, 1002, 1004, 1005, 1006, 1010, 1013, 1015, 1016, 1017, 1019, 1020, 1023, 1026, 1028, 1038, 1044, 1050, 1059, 1060, 1064, 1095, 1108, 1111, 1115, 1124, 1132], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 36, 57, 59, 61, 70, 72, 77, 93, 96, 97, 98, 99, 144, 147, 150, 151, 152, 153, 155, 156, 159, 160, 163, 164, 165, 166, 168, 169, 174, 176, 177, 178, 180, 182, 183, 185, 189, 190, 191, 192, 193, 195, 198, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 246, 248, 255, 264, 265, 271, 278, 282, 302, 310, 324, 325, 330, 335, 339, 353, 358, 359, 360, 370, 371, 374, 376, 384, 385, 391, 396, 397, 399, 420, 421, 422, 432, 444, 445, 446, 447, 467, 489, 492, 498, 501, 502, 503, 506, 508, 512, 513, 514, 515, 516, 518, 519, 520, 523, 535, 541, 545, 551, 554, 555, 582, 585, 587, 599, 618, 619, 620, 629, 632, 643, 644, 662, 675, 679, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 716, 717, 721, 723, 724, 726, 728, 730, 734, 737, 739, 742, 744, 745, 747, 749, 750, 751, 752, 753, 756, 757, 760, 761, 763, 764, 767, 774, 783, 784, 788, 791, 829, 835, 839, 840, 845, 878, 891, 913, 944, 945, 955, 967, 968, 970, 992, 1006, 1010, 1012, 1018, 1020, 1022, 1024, 1028, 1050, 1054, 1060, 1064, 1094, 1124, 1131, 1132], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 36, 59, 70, 72, 77, 125, 144, 147, 148, 149, 150, 151, 153, 155, 159, 160, 163, 168, 169, 174, 176, 178, 185, 190, 191, 192, 194, 195, 198, 201, 203, 205, 207, 209, 211, 212, 213, 214, 218, 219, 221, 223, 224, 225, 226, 231, 232, 233, 234, 240, 241, 242, 243, 244, 271, 278, 282, 300, 325, 335, 339, 359, 361, 362, 369, 371, 381, 396, 399, 420, 444, 445, 446, 447, 466, 492, 502, 506, 519, 535, 574, 585, 587, 618, 619, 626, 632, 643, 644, 662, 679, 697, 702, 704, 706, 708, 712, 716, 717, 721, 723, 724, 728, 735, 737, 740, 742, 744, 745, 756, 757, 761, 788, 791, 804, 812, 851, 855, 862, 881, 882, 889, 891, 939, 967, 968, 970, 985, 1010, 1023, 1083, 1124, 1132], "float32": [1, 28, 48, 72, 144, 162, 231, 232, 271, 641, 697, 788, 791, 920, 984, 1124], "lazi": [1, 54, 55, 56, 57, 59, 72, 77, 118, 131, 186, 200, 271, 467, 634, 652, 655, 670, 679, 724, 725, 766, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 1131, 1132], "i16": [1, 72, 527, 679, 791, 985, 1103, 1124, 1132], "i32": [1, 72, 93, 96, 100, 130, 131, 214, 271, 310, 346, 373, 508, 527, 555, 669, 679, 745, 788, 862, 893, 984, 1012, 1064, 1124, 1132], "f32": [1, 72, 144, 152, 231, 271, 527, 679, 697, 705, 788, 791, 984, 1124], "i64": [1, 2, 15, 19, 51, 54, 56, 70, 71, 72, 73, 77, 93, 94, 95, 96, 97, 98, 99, 100, 106, 118, 143, 145, 146, 147, 150, 152, 153, 155, 156, 158, 159, 164, 165, 166, 167, 168, 169, 174, 176, 177, 178, 179, 181, 185, 186, 189, 190, 193, 194, 195, 199, 200, 201, 202, 205, 206, 207, 208, 212, 214, 218, 219, 221, 222, 224, 225, 226, 228, 234, 236, 237, 238, 239, 240, 241, 242, 244, 246, 248, 249, 250, 251, 254, 255, 256, 257, 258, 261, 264, 265, 271, 278, 280, 284, 298, 299, 300, 301, 302, 308, 312, 315, 316, 317, 322, 323, 324, 325, 327, 329, 330, 340, 342, 344, 348, 350, 352, 357, 364, 367, 380, 382, 383, 385, 386, 387, 388, 390, 391, 396, 397, 398, 399, 400, 404, 408, 409, 411, 412, 413, 415, 417, 420, 429, 431, 432, 433, 434, 435, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 461, 464, 465, 467, 482, 483, 484, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 508, 509, 522, 524, 525, 527, 528, 529, 533, 534, 535, 556, 557, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 595, 598, 606, 612, 614, 618, 619, 620, 621, 628, 629, 630, 631, 632, 636, 638, 639, 640, 641, 643, 644, 645, 646, 649, 650, 654, 658, 659, 662, 663, 664, 669, 675, 679, 695, 698, 700, 701, 703, 704, 705, 708, 709, 711, 712, 713, 715, 716, 717, 721, 723, 724, 725, 726, 728, 730, 731, 734, 735, 736, 738, 739, 742, 743, 745, 747, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 764, 767, 769, 770, 773, 774, 775, 776, 777, 780, 783, 784, 788, 791, 794, 797, 810, 811, 812, 813, 819, 824, 831, 834, 837, 838, 839, 840, 842, 843, 856, 858, 860, 867, 869, 872, 877, 884, 887, 902, 903, 905, 906, 912, 916, 925, 952, 954, 955, 958, 967, 968, 970, 971, 972, 973, 976, 978, 986, 991, 1004, 1009, 1010, 1012, 1016, 1019, 1023, 1026, 1029, 1030, 1033, 1037, 1038, 1042, 1043, 1093, 1095, 1096, 1097, 1102, 1108, 1109, 1115, 1124, 1131, 1132], "register_series_namespac": [1, 70, 71, 72], "math": [1, 73, 328, 607, 608, 679, 835, 1039, 1098, 1124], "mathshortcut": [1, 73], "": [1, 2, 28, 31, 36, 48, 54, 57, 61, 73, 93, 94, 100, 104, 105, 106, 107, 109, 115, 119, 123, 133, 143, 144, 152, 154, 167, 168, 170, 171, 177, 185, 186, 199, 201, 206, 207, 211, 214, 215, 222, 226, 230, 236, 238, 239, 240, 246, 247, 271, 342, 365, 368, 380, 416, 435, 437, 448, 449, 453, 465, 467, 476, 483, 486, 487, 493, 494, 504, 508, 535, 539, 546, 547, 548, 551, 552, 554, 556, 558, 560, 561, 563, 571, 572, 573, 576, 577, 579, 580, 581, 600, 601, 602, 603, 609, 615, 620, 621, 630, 633, 634, 643, 644, 645, 646, 649, 650, 658, 659, 661, 662, 663, 675, 679, 695, 697, 704, 705, 715, 716, 718, 719, 725, 734, 745, 746, 753, 758, 759, 760, 764, 765, 771, 776, 788, 791, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 819, 820, 822, 823, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 855, 857, 858, 861, 863, 864, 868, 870, 874, 875, 879, 882, 883, 885, 888, 889, 891, 892, 893, 896, 898, 899, 903, 904, 905, 906, 908, 911, 912, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 952, 955, 958, 960, 962, 971, 972, 973, 976, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1063, 1064, 1065, 1067, 1069, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1124], "_": [1, 69, 73, 201, 230, 271, 547, 561, 562, 825, 1056, 1071, 1101, 1124], "squar": [1, 73, 257, 416, 536, 679, 776, 940, 1044, 1124], "cube": [1, 73, 313, 496, 679, 827, 1124], "s2": [1, 127, 162, 271, 829, 845, 925, 939, 978, 992, 1028, 1106, 1115, 1124], "renam": [1, 96, 104, 105, 140, 142, 170, 171, 172, 214, 215, 246, 247, 250, 252, 271, 280, 285, 403, 407, 410, 427, 430, 436, 452, 456, 463, 464, 479, 497, 510, 540, 553, 559, 565, 581, 583, 604, 642, 658, 661, 679, 694, 718, 719, 720, 729, 741, 745, 746, 764, 765, 768, 769, 771, 788, 794, 798, 842, 922, 928, 950, 953, 959, 975, 979, 1004, 1014, 1049, 1062, 1068, 1074, 1091, 1102, 1124], "n2": [1, 455], "in_plac": [1, 176, 220, 244, 271, 1007, 1036, 1043, 1124], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 34, 36, 48, 49, 50, 54, 56, 58, 75, 76, 77, 78, 93, 94, 98, 100, 102, 104, 105, 108, 109, 110, 112, 115, 116, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132, 133, 137, 139, 143, 144, 145, 146, 149, 158, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 177, 179, 180, 181, 183, 186, 187, 191, 196, 197, 199, 201, 202, 209, 210, 211, 212, 214, 222, 228, 230, 232, 233, 236, 237, 238, 239, 240, 242, 246, 251, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 279, 280, 281, 282, 283, 284, 285, 296, 303, 304, 306, 307, 310, 321, 322, 323, 324, 325, 327, 334, 336, 339, 340, 342, 344, 345, 347, 348, 350, 352, 354, 355, 357, 358, 359, 361, 362, 363, 364, 367, 369, 371, 372, 374, 375, 376, 377, 378, 379, 393, 394, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 418, 421, 422, 426, 450, 454, 455, 462, 467, 471, 472, 473, 474, 476, 478, 479, 488, 489, 490, 492, 499, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 527, 532, 534, 535, 539, 541, 542, 544, 549, 550, 555, 561, 562, 564, 571, 572, 573, 576, 580, 581, 586, 593, 596, 599, 600, 601, 602, 603, 604, 606, 609, 610, 615, 616, 623, 624, 625, 626, 627, 632, 638, 639, 644, 652, 655, 661, 666, 667, 669, 670, 679, 695, 697, 698, 699, 700, 701, 707, 709, 711, 715, 716, 717, 718, 719, 720, 724, 725, 727, 729, 730, 734, 739, 745, 747, 751, 753, 758, 759, 760, 764, 770, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 791, 795, 796, 797, 798, 808, 815, 820, 823, 826, 829, 830, 842, 849, 850, 852, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 890, 891, 895, 897, 898, 899, 906, 910, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 940, 944, 945, 973, 977, 986, 992, 998, 1001, 1002, 1004, 1008, 1021, 1028, 1041, 1043, 1048, 1050, 1051, 1053, 1058, 1059, 1064, 1070, 1071, 1073, 1080, 1081, 1082, 1085, 1105, 1106, 1114, 1115, 1124, 1131, 1132], "s3": [1, 30, 108, 119, 123, 271, 978, 1124], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 36, 47, 54, 59, 66, 68, 69, 70, 72, 73, 77, 125, 129, 144, 147, 148, 149, 150, 151, 152, 153, 155, 159, 160, 163, 166, 174, 176, 185, 189, 190, 191, 192, 195, 203, 205, 207, 209, 211, 212, 213, 214, 218, 219, 221, 223, 224, 225, 226, 231, 232, 233, 234, 240, 241, 243, 244, 246, 271, 282, 284, 297, 320, 322, 325, 326, 335, 399, 419, 429, 431, 444, 445, 446, 447, 484, 492, 496, 506, 507, 511, 527, 533, 535, 552, 558, 571, 587, 599, 605, 611, 615, 616, 617, 619, 621, 629, 631, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 660, 663, 664, 668, 679, 697, 702, 704, 705, 706, 708, 712, 721, 724, 728, 730, 739, 742, 744, 745, 756, 757, 761, 764, 788, 791, 797, 841, 862, 913, 939, 952, 954, 967, 968, 970, 1000, 1010, 1013, 1015, 1018, 1020, 1022, 1024, 1061, 1067, 1080, 1124, 1132], "9": [1, 27, 28, 30, 31, 32, 33, 36, 54, 59, 69, 77, 148, 149, 162, 169, 174, 178, 189, 210, 211, 214, 225, 240, 241, 244, 246, 264, 271, 278, 282, 284, 297, 309, 320, 322, 325, 328, 335, 399, 405, 415, 419, 429, 443, 450, 492, 501, 506, 511, 517, 519, 529, 533, 547, 574, 587, 613, 618, 619, 667, 679, 717, 721, 723, 728, 745, 756, 761, 764, 783, 788, 791, 843, 855, 866, 868, 876, 882, 889, 890, 925, 939, 952, 973, 1010, 1015, 1021, 1023, 1025, 1038, 1056, 1083, 1124], "27": [1, 73, 264, 325, 353, 360, 370, 679, 783, 1124, 1132], "16": [1, 31, 44, 63, 71, 168, 169, 246, 271, 322, 325, 399, 484, 496, 555, 618, 628, 629, 632, 679, 716, 717, 751, 764, 788, 791, 882, 889, 1000, 1039, 1064, 1098, 1124], "64": [1, 43, 46, 65, 71, 73, 124, 139, 484, 496, 679, 1000, 1124], "25": [1, 31, 73, 100, 131, 149, 168, 169, 186, 242, 246, 271, 329, 339, 341, 359, 362, 369, 371, 499, 512, 513, 514, 515, 516, 518, 519, 520, 592, 623, 624, 626, 627, 628, 634, 644, 666, 667, 679, 716, 717, 725, 732, 762, 764, 788, 791, 843, 844, 857, 882, 889, 895, 913, 1000, 1004, 1124], "125": [1, 31, 73, 271, 278, 679, 1000, 1124], "arg": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 200, 233, 271, 495, 609, 633, 679, 738, 788, 986, 1105, 1106, 1124], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 74, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 128, 130, 131, 133, 137, 140, 148, 152, 156, 158, 159, 162, 182, 183, 184, 189, 199, 200, 209, 210, 211, 228, 229, 232, 233, 238, 240, 271, 278, 281, 282, 285, 310, 363, 375, 376, 385, 390, 393, 394, 405, 418, 425, 431, 462, 463, 465, 466, 467, 479, 482, 484, 488, 489, 492, 493, 495, 497, 506, 510, 511, 523, 555, 571, 572, 573, 576, 582, 583, 586, 592, 599, 600, 603, 604, 615, 631, 640, 641, 644, 669, 679, 700, 705, 711, 738, 759, 788, 791, 795, 797, 798, 845, 883, 902, 905, 925, 939, 948, 954, 985, 986, 1010, 1014, 1015, 1027, 1030, 1064, 1080, 1081, 1082, 1085, 1096, 1104, 1105, 1106, 1124, 1131, 1132], "kwarg": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 106, 148, 200, 233, 271, 495, 679, 700, 738, 788, 1106, 1124, 1131], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 679, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124, 1131], "nest": [2, 51, 60, 100, 116, 122, 154, 271, 690, 896, 1124, 1131, 1132], "fix": [2, 109, 129, 131, 372, 512, 513, 514, 515, 516, 518, 519, 520, 628, 679, 892], "length": [2, 12, 51, 77, 118, 129, 166, 168, 169, 171, 172, 221, 271, 326, 362, 369, 449, 455, 476, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 533, 552, 554, 558, 560, 579, 652, 655, 656, 657, 670, 679, 716, 717, 719, 720, 739, 752, 788, 829, 841, 851, 882, 889, 941, 972, 978, 997, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1042, 1061, 1063, 1067, 1069, 1088, 1124], "inner": [2, 51, 60, 78, 130, 185, 241, 271, 298, 299, 300, 301, 330, 437, 505, 590, 679, 724, 747, 761, 788, 810, 811, 812, 813, 845, 960, 1107, 1124], "width": [2, 24, 31, 104, 105, 271, 298, 299, 300, 301, 552, 558, 579, 788, 810, 811, 812, 813, 1061, 1067, 1088], "int": [2, 12, 13, 15, 23, 24, 28, 31, 36, 40, 48, 50, 56, 59, 71, 96, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 129, 130, 131, 132, 133, 134, 135, 140, 143, 145, 154, 157, 158, 160, 166, 173, 174, 175, 177, 182, 183, 184, 186, 188, 189, 190, 191, 195, 196, 197, 207, 209, 212, 217, 218, 219, 221, 223, 224, 225, 226, 231, 234, 236, 240, 243, 245, 248, 255, 265, 271, 278, 302, 308, 315, 316, 317, 326, 329, 377, 378, 379, 383, 384, 385, 391, 395, 396, 420, 426, 429, 434, 435, 448, 449, 453, 454, 455, 492, 494, 495, 496, 499, 502, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 528, 533, 537, 546, 549, 552, 555, 556, 558, 560, 562, 563, 574, 579, 585, 586, 587, 591, 597, 599, 606, 615, 616, 622, 625, 628, 634, 636, 638, 639, 648, 651, 652, 655, 656, 657, 660, 661, 664, 665, 668, 670, 679, 695, 698, 709, 710, 711, 721, 725, 728, 739, 749, 750, 752, 754, 756, 757, 758, 762, 763, 767, 774, 784, 788, 805, 806, 819, 820, 829, 830, 831, 832, 833, 841, 844, 896, 897, 898, 899, 903, 904, 905, 911, 912, 913, 939, 941, 942, 949, 950, 951, 952, 957, 958, 971, 972, 976, 977, 978, 988, 992, 993, 995, 996, 997, 999, 1000, 1003, 1004, 1006, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1037, 1042, 1045, 1055, 1058, 1061, 1064, 1065, 1067, 1069, 1071, 1072, 1083, 1088, 1094, 1095, 1096, 1097, 1103, 1108, 1113, 1124, 1131, 1132], "polarsdatatyp": [2, 51, 104, 105, 111, 117, 118, 128, 129, 130, 131, 133, 140, 144, 153, 189, 271, 285, 310, 380, 463, 465, 466, 467, 549, 604, 630, 641, 642, 643, 644, 652, 655, 670, 675, 679, 697, 706, 788, 791, 798, 820, 985, 986, 1058, 1124], "pythondatatyp": [2, 51], "null": [2, 28, 30, 48, 56, 69, 77, 96, 104, 105, 114, 118, 123, 139, 143, 145, 149, 152, 158, 162, 163, 178, 185, 191, 192, 198, 201, 203, 218, 219, 222, 223, 224, 228, 233, 236, 239, 241, 243, 246, 253, 271, 281, 283, 284, 285, 295, 302, 304, 315, 316, 317, 320, 322, 325, 329, 331, 332, 340, 344, 348, 350, 352, 357, 358, 364, 376, 377, 378, 379, 380, 383, 384, 385, 391, 399, 409, 411, 412, 413, 419, 421, 422, 429, 433, 434, 438, 444, 445, 446, 447, 448, 454, 455, 466, 467, 489, 490, 491, 494, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 525, 526, 527, 529, 534, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 558, 560, 562, 563, 564, 579, 580, 581, 590, 600, 601, 602, 603, 612, 613, 614, 616, 621, 630, 641, 646, 650, 656, 657, 661, 663, 669, 679, 695, 698, 705, 711, 723, 724, 737, 747, 749, 750, 753, 758, 760, 761, 764, 766, 772, 788, 795, 796, 798, 807, 815, 830, 831, 844, 846, 847, 856, 860, 867, 869, 872, 877, 884, 897, 898, 899, 903, 905, 910, 916, 932, 933, 944, 945, 952, 968, 970, 971, 977, 978, 986, 999, 1000, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1033, 1034, 1038, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1071, 1072, 1073, 1103, 1105, 1106, 1107, 1114, 1124, 1131, 1132], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 48, 49, 50, 51, 54, 55, 56, 57, 59, 61, 69, 70, 71, 72, 73, 75, 76, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 182, 183, 184, 185, 186, 188, 189, 191, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 252, 255, 257, 263, 265, 271, 278, 280, 281, 282, 283, 284, 285, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 315, 316, 317, 321, 322, 323, 324, 325, 326, 327, 329, 330, 334, 335, 336, 342, 358, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 383, 385, 386, 390, 391, 392, 393, 394, 395, 396, 399, 400, 405, 416, 418, 420, 425, 426, 427, 428, 429, 431, 434, 435, 437, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 457, 458, 462, 463, 464, 465, 466, 467, 478, 482, 484, 488, 489, 492, 493, 494, 495, 496, 497, 499, 500, 502, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 579, 580, 581, 582, 583, 585, 586, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 679, 695, 697, 698, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 728, 729, 730, 734, 735, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 774, 776, 782, 784, 788, 791, 794, 795, 796, 797, 798, 807, 813, 814, 815, 816, 817, 818, 819, 820, 824, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 850, 851, 852, 858, 878, 881, 882, 883, 885, 887, 888, 889, 892, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 911, 912, 913, 916, 917, 927, 935, 936, 940, 942, 948, 949, 950, 951, 952, 954, 957, 958, 960, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 980, 985, 986, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1037, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1088, 1089, 1091, 1095, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1112, 1113, 1114, 1115, 1124, 1131], "The": [2, 18, 29, 30, 31, 36, 50, 51, 54, 58, 61, 69, 74, 75, 93, 95, 96, 97, 99, 102, 104, 106, 107, 109, 113, 114, 116, 118, 123, 135, 151, 152, 153, 155, 156, 159, 166, 167, 168, 169, 171, 173, 178, 183, 186, 189, 194, 199, 209, 210, 211, 214, 215, 232, 239, 242, 246, 247, 250, 257, 271, 280, 302, 303, 304, 305, 327, 331, 332, 339, 353, 358, 359, 362, 365, 369, 370, 380, 383, 386, 391, 395, 454, 465, 467, 493, 499, 502, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 529, 532, 538, 542, 543, 549, 551, 552, 553, 558, 559, 565, 566, 567, 568, 569, 570, 571, 579, 630, 634, 644, 656, 657, 658, 661, 669, 671, 672, 674, 675, 679, 680, 681, 685, 686, 687, 705, 708, 712, 716, 717, 719, 721, 723, 725, 728, 730, 735, 739, 745, 746, 747, 760, 764, 765, 769, 776, 788, 794, 797, 814, 815, 816, 830, 842, 846, 847, 855, 873, 878, 879, 882, 885, 889, 890, 902, 903, 906, 911, 977, 986, 1004, 1006, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1038, 1041, 1047, 1051, 1052, 1058, 1060, 1061, 1062, 1067, 1068, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1088, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1130, 1132], "size": [2, 13, 36, 50, 104, 105, 106, 129, 130, 131, 133, 135, 154, 168, 240, 271, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 606, 638, 639, 656, 657, 679, 716, 788, 896, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1124, 1132], "datatyp": [2, 28, 34, 48, 51, 67, 93, 95, 96, 97, 99, 101, 109, 111, 113, 114, 117, 133, 153, 155, 162, 213, 271, 310, 380, 527, 590, 630, 641, 675, 679, 690, 708, 744, 747, 788, 798, 820, 843, 927, 934, 936, 938, 986, 1035, 1107, 1124], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 34, 48, 51, 52, 54, 58, 60, 67, 69, 77, 78, 96, 98, 104, 105, 107, 109, 118, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 142, 143, 149, 152, 156, 157, 158, 163, 166, 168, 169, 171, 173, 174, 178, 182, 183, 186, 188, 189, 190, 191, 192, 193, 195, 197, 199, 201, 202, 203, 205, 209, 210, 211, 212, 218, 219, 222, 223, 224, 225, 228, 229, 233, 236, 237, 240, 241, 242, 243, 253, 254, 256, 258, 259, 261, 262, 271, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 329, 331, 332, 335, 339, 353, 359, 370, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 427, 428, 429, 433, 434, 435, 438, 440, 441, 442, 448, 451, 453, 457, 459, 461, 462, 465, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 494, 495, 496, 499, 500, 502, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 556, 557, 560, 562, 563, 564, 579, 582, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 600, 602, 605, 612, 614, 616, 618, 619, 620, 621, 631, 632, 637, 640, 641, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 662, 663, 669, 679, 693, 694, 695, 705, 710, 711, 716, 717, 719, 722, 723, 725, 731, 732, 733, 734, 736, 737, 740, 742, 747, 749, 750, 753, 754, 755, 758, 761, 762, 772, 773, 775, 777, 778, 780, 781, 788, 791, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 824, 828, 831, 832, 833, 835, 836, 841, 842, 843, 844, 846, 847, 851, 855, 873, 879, 890, 896, 897, 898, 899, 902, 903, 904, 905, 908, 910, 911, 912, 913, 914, 916, 917, 919, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 937, 942, 944, 945, 946, 947, 950, 951, 952, 956, 957, 958, 961, 963, 964, 965, 971, 976, 980, 985, 987, 988, 990, 991, 993, 995, 996, 997, 999, 1000, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1065, 1066, 1069, 1071, 1072, 1073, 1088, 1094, 1095, 1096, 1097, 1098, 1099, 1105, 1106, 1107, 1110, 1112, 1114, 1115, 1124, 1132], "within": [2, 51, 126, 127, 167, 168, 169, 170, 171, 172, 186, 242, 271, 502, 535, 679, 716, 717, 719, 720, 725, 788, 1131], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 77, 78, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 106, 107, 108, 109, 115, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 675, 679, 690, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 944, 945, 952, 954, 955, 958, 960, 962, 967, 968, 970, 971, 972, 973, 976, 978, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124, 1131], "dtype": [2, 31, 39, 72, 77, 78, 93, 95, 97, 99, 100, 104, 105, 106, 107, 113, 114, 115, 118, 128, 129, 130, 131, 133, 139, 144, 168, 169, 171, 172, 186, 231, 232, 233, 240, 271, 285, 310, 311, 315, 316, 317, 324, 325, 372, 380, 425, 454, 461, 463, 465, 466, 467, 504, 505, 512, 513, 514, 515, 516, 518, 519, 520, 527, 549, 571, 584, 586, 590, 595, 604, 606, 616, 630, 634, 638, 639, 641, 642, 643, 644, 652, 655, 661, 670, 679, 697, 716, 717, 719, 720, 725, 788, 791, 810, 811, 820, 822, 823, 825, 830, 831, 832, 833, 839, 840, 843, 844, 892, 896, 920, 927, 936, 948, 977, 984, 985, 1011, 1028, 1035, 1058, 1080, 1094, 1103, 1105, 1106, 1107, 1111, 1124, 1132], "method": [2, 3, 4, 5, 8, 27, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 94, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 128, 137, 140, 142, 152, 156, 167, 170, 171, 172, 178, 183, 189, 197, 203, 209, 210, 211, 238, 246, 252, 257, 263, 271, 278, 281, 282, 285, 309, 365, 368, 375, 376, 383, 390, 393, 394, 399, 403, 407, 410, 415, 418, 427, 430, 436, 452, 456, 462, 463, 467, 482, 484, 488, 489, 492, 496, 497, 500, 502, 510, 512, 513, 514, 515, 516, 518, 519, 520, 540, 553, 559, 565, 574, 582, 583, 592, 594, 599, 615, 623, 644, 653, 655, 666, 671, 672, 674, 675, 679, 680, 681, 684, 685, 686, 687, 690, 694, 701, 703, 705, 714, 718, 719, 720, 723, 729, 740, 741, 759, 764, 768, 771, 776, 782, 788, 797, 798, 885, 888, 902, 903, 916, 922, 928, 950, 953, 959, 975, 979, 986, 1005, 1006, 1014, 1020, 1049, 1062, 1068, 1074, 1083, 1107, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1130], "attribut": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 128, 271, 671, 672, 674, 675, 680, 681, 685, 686, 687, 788, 1116, 1118, 1120, 1125, 1128, 1129, 1130], "A": [5, 28, 31, 48, 54, 57, 75, 76, 100, 104, 105, 106, 107, 118, 124, 135, 162, 168, 185, 186, 201, 228, 240, 241, 242, 246, 247, 271, 277, 331, 332, 335, 375, 376, 383, 393, 394, 402, 406, 409, 411, 418, 455, 462, 465, 476, 488, 489, 507, 511, 512, 513, 514, 515, 516, 518, 519, 520, 539, 540, 541, 546, 547, 548, 550, 556, 557, 579, 613, 628, 629, 633, 679, 716, 724, 725, 742, 761, 764, 765, 788, 791, 846, 847, 851, 903, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1048, 1049, 1050, 1055, 1056, 1057, 1059, 1065, 1066, 1088, 1124, 1131], "encod": [5, 68, 104, 105, 118, 230, 271, 304, 392, 542, 679, 815, 1051], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 48, 49, 50, 69, 70, 94, 96, 99, 104, 105, 106, 109, 110, 112, 115, 116, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 139, 147, 152, 161, 167, 168, 169, 170, 171, 172, 173, 183, 186, 193, 212, 214, 221, 230, 232, 237, 238, 240, 246, 271, 281, 283, 285, 309, 327, 372, 395, 405, 430, 436, 444, 445, 446, 447, 449, 452, 454, 455, 456, 466, 467, 495, 499, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 528, 532, 533, 553, 559, 560, 565, 566, 567, 568, 571, 572, 573, 576, 596, 600, 602, 606, 610, 623, 624, 626, 627, 638, 639, 652, 655, 656, 657, 661, 666, 667, 669, 670, 679, 690, 705, 707, 715, 716, 717, 718, 719, 720, 724, 725, 729, 730, 734, 745, 747, 752, 759, 764, 768, 771, 776, 788, 795, 796, 797, 826, 842, 892, 911, 925, 953, 959, 967, 968, 969, 970, 972, 975, 977, 978, 979, 985, 986, 1004, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1030, 1037, 1041, 1042, 1062, 1068, 1069, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1105, 1112, 1124, 1132], "string": [5, 7, 9, 12, 13, 14, 18, 28, 29, 31, 34, 35, 39, 48, 54, 60, 68, 78, 100, 104, 105, 106, 107, 118, 126, 127, 128, 129, 130, 133, 136, 143, 162, 166, 167, 168, 169, 170, 186, 199, 201, 211, 214, 215, 222, 231, 236, 237, 240, 242, 246, 247, 250, 271, 278, 306, 312, 358, 362, 365, 368, 369, 380, 382, 388, 392, 400, 437, 466, 478, 493, 495, 512, 513, 514, 515, 516, 518, 519, 520, 535, 538, 539, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 579, 601, 603, 609, 612, 613, 614, 621, 623, 624, 626, 627, 633, 646, 650, 658, 661, 663, 666, 667, 669, 679, 695, 707, 714, 715, 716, 717, 718, 725, 745, 746, 747, 753, 758, 764, 765, 768, 769, 788, 791, 817, 823, 824, 878, 882, 885, 888, 889, 901, 917, 960, 1046, 1047, 1048, 1050, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1103, 1124, 1132], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 392, 679, 703, 714, 741, 788], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 431, 547, 954, 1056], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 34, 36, 48, 49, 50, 69, 75, 76, 77, 78, 93, 94, 98, 100, 104, 105, 109, 110, 112, 114, 115, 116, 118, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 136, 139, 143, 144, 145, 146, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 179, 180, 181, 186, 199, 201, 211, 212, 216, 220, 222, 228, 230, 232, 233, 236, 237, 238, 239, 242, 244, 246, 254, 256, 258, 261, 271, 280, 281, 282, 283, 284, 285, 295, 301, 303, 304, 306, 307, 310, 321, 322, 323, 324, 325, 326, 327, 345, 361, 363, 369, 374, 375, 376, 377, 378, 379, 393, 394, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 418, 421, 422, 426, 431, 450, 454, 457, 462, 463, 465, 467, 471, 472, 473, 474, 478, 488, 489, 490, 492, 499, 502, 504, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 527, 532, 534, 535, 539, 541, 542, 544, 555, 556, 557, 561, 562, 564, 571, 572, 573, 576, 581, 593, 596, 599, 600, 601, 602, 603, 604, 606, 609, 610, 615, 618, 623, 624, 625, 626, 627, 638, 639, 641, 644, 652, 655, 661, 666, 667, 670, 679, 695, 697, 698, 700, 701, 707, 709, 711, 715, 716, 717, 718, 719, 720, 724, 725, 729, 730, 734, 739, 748, 751, 753, 758, 759, 760, 764, 773, 775, 777, 780, 788, 791, 795, 796, 797, 798, 807, 813, 815, 820, 823, 826, 830, 837, 838, 839, 840, 841, 842, 861, 881, 883, 889, 895, 897, 898, 899, 906, 910, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 944, 945, 949, 950, 951, 954, 973, 977, 980, 986, 998, 1001, 1002, 1004, 1006, 1007, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1031, 1036, 1041, 1043, 1048, 1050, 1051, 1053, 1064, 1065, 1066, 1070, 1071, 1073, 1080, 1081, 1082, 1085, 1104, 1105, 1106, 1109, 1112, 1114, 1124, 1131], "none": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 48, 49, 50, 52, 54, 56, 57, 59, 69, 76, 78, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 140, 145, 149, 152, 157, 158, 166, 168, 169, 171, 172, 173, 178, 182, 185, 186, 187, 189, 191, 193, 197, 198, 201, 209, 212, 219, 221, 222, 228, 230, 233, 237, 238, 239, 240, 241, 242, 271, 281, 283, 284, 285, 297, 302, 315, 316, 317, 320, 322, 325, 327, 331, 332, 358, 361, 362, 369, 376, 377, 378, 379, 380, 383, 384, 385, 391, 395, 399, 400, 409, 411, 412, 413, 419, 421, 422, 434, 444, 445, 446, 447, 449, 455, 463, 465, 466, 467, 478, 480, 489, 490, 491, 494, 496, 499, 502, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 526, 527, 528, 529, 533, 534, 538, 539, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 576, 579, 580, 581, 590, 600, 601, 602, 603, 604, 612, 614, 616, 621, 623, 624, 625, 626, 627, 628, 630, 631, 640, 641, 642, 643, 644, 646, 650, 655, 656, 657, 660, 661, 663, 665, 666, 667, 668, 669, 679, 698, 699, 701, 705, 710, 711, 716, 717, 719, 720, 723, 724, 725, 727, 729, 730, 734, 737, 747, 750, 751, 752, 753, 759, 760, 761, 766, 768, 771, 776, 788, 791, 795, 796, 797, 798, 805, 806, 830, 831, 842, 843, 845, 846, 847, 863, 864, 865, 870, 881, 882, 889, 894, 895, 897, 898, 899, 903, 904, 905, 907, 910, 911, 913, 915, 916, 917, 927, 932, 933, 936, 939, 940, 944, 945, 957, 967, 968, 970, 972, 978, 985, 986, 987, 988, 989, 990, 994, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1030, 1032, 1034, 1037, 1038, 1041, 1042, 1045, 1047, 1048, 1050, 1052, 1053, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1102, 1103, 1106, 1107, 1113, 1114, 1124, 1131], "decim": [6, 28, 31, 48, 271, 521, 574, 679, 788, 1025, 1083, 1124], "temporari": 6, "remov": [6, 8, 139, 150, 230, 241, 271, 285, 380, 464, 467, 553, 559, 565, 566, 567, 568, 569, 570, 630, 679, 704, 761, 788, 797, 842, 1004, 1062, 1068, 1074, 1075, 1076, 1077, 1078, 1079, 1082, 1124], "onc": [6, 57, 104, 105, 109, 135, 189, 210, 212, 250, 271, 309, 467, 522, 569, 570, 679, 696, 769, 788, 986, 1026, 1078, 1079, 1124], "stabil": 6, "current": [6, 9, 26, 56, 94, 100, 106, 107, 136, 145, 146, 185, 186, 271, 341, 362, 455, 494, 679, 690, 698, 699, 724, 725, 788, 791, 830, 834, 849, 857, 882, 1000, 1124, 1131], "consid": [6, 76, 104, 105, 118, 123, 152, 163, 189, 193, 210, 238, 240, 241, 271, 285, 315, 316, 317, 326, 362, 465, 467, 512, 513, 514, 515, 516, 518, 519, 520, 618, 632, 675, 679, 701, 705, 721, 728, 734, 759, 761, 776, 788, 823, 826, 831, 832, 833, 841, 882, 913, 927, 986, 1004, 1028, 1029, 1030, 1124], "beta": 6, "cfg": [7, 8, 9, 15, 137], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 271, 480, 524, 550, 679, 703, 741, 747, 751, 768, 788, 1031, 1059, 1124, 1132], "previous": 7, "save": [7, 168, 169, 186, 242, 271, 333, 341, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 675, 679, 690, 716, 717, 725, 788, 857, 878, 882, 889], "share": [7, 60, 126, 127, 154, 271, 896, 1124], "option": [7, 8, 9, 26, 30, 31, 40, 69, 104, 108, 109, 110, 112, 116, 119, 120, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 182, 186, 193, 228, 232, 237, 271, 416, 510, 512, 513, 514, 515, 516, 518, 519, 520, 532, 560, 596, 641, 661, 669, 679, 690, 724, 725, 734, 747, 788, 791, 936, 940, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1041, 1069, 1102, 1112, 1124], "from": [7, 8, 28, 31, 48, 54, 55, 56, 69, 77, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 149, 150, 154, 156, 161, 166, 168, 169, 171, 183, 184, 186, 187, 193, 201, 205, 209, 211, 212, 214, 215, 230, 237, 238, 240, 242, 271, 321, 327, 328, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376, 380, 392, 399, 416, 455, 467, 486, 487, 489, 494, 495, 499, 501, 511, 512, 513, 515, 518, 519, 520, 522, 535, 546, 547, 549, 555, 569, 570, 571, 572, 573, 576, 594, 607, 608, 612, 622, 623, 624, 625, 626, 628, 655, 660, 665, 666, 667, 675, 678, 679, 697, 703, 704, 709, 714, 716, 717, 719, 725, 734, 741, 742, 745, 746, 759, 766, 788, 791, 797, 842, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 902, 936, 940, 978, 995, 996, 997, 1000, 1004, 1015, 1026, 1055, 1056, 1058, 1064, 1078, 1079, 1080, 1081, 1082, 1085, 1115, 1124, 1131, 1132], "json": [7, 9, 34, 35, 113, 114, 121, 271, 392, 480, 549, 550, 679, 690, 703, 714, 741, 747, 768, 788, 1058, 1059], "file": [7, 9, 27, 28, 32, 33, 34, 35, 36, 48, 49, 50, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 156, 271, 480, 703, 741, 747, 768, 788, 797, 902, 1124], "produc": [7, 130, 131, 133, 427, 428, 475, 643, 729, 730, 788, 950, 951], "filepath": 7, "same": [7, 18, 30, 31, 58, 60, 69, 75, 76, 77, 78, 110, 118, 126, 127, 129, 137, 167, 189, 211, 222, 238, 246, 247, 250, 257, 271, 277, 284, 331, 332, 471, 474, 493, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 535, 581, 586, 675, 679, 701, 715, 729, 730, 753, 759, 764, 765, 769, 788, 793, 797, 798, 842, 846, 847, 851, 986, 1004, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1115, 1124], "reset": [8, 137], "default": [8, 10, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 50, 69, 76, 77, 93, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 113, 114, 115, 116, 118, 128, 129, 130, 131, 132, 133, 137, 152, 154, 167, 169, 170, 172, 173, 183, 185, 186, 193, 199, 201, 209, 210, 211, 212, 223, 230, 238, 240, 243, 248, 271, 280, 281, 283, 312, 327, 361, 369, 374, 376, 377, 378, 379, 395, 449, 454, 455, 458, 466, 486, 487, 489, 494, 499, 502, 512, 513, 514, 515, 516, 518, 519, 520, 522, 528, 537, 546, 553, 555, 559, 560, 565, 566, 567, 568, 571, 572, 573, 576, 596, 597, 600, 602, 606, 610, 615, 623, 624, 625, 626, 627, 634, 638, 639, 641, 652, 655, 660, 661, 666, 667, 668, 670, 679, 701, 705, 707, 715, 717, 718, 720, 724, 725, 734, 747, 754, 759, 762, 768, 788, 795, 796, 797, 824, 842, 881, 889, 895, 896, 897, 898, 899, 911, 972, 977, 978, 985, 995, 996, 1000, 1004, 1006, 1026, 1037, 1045, 1048, 1055, 1062, 1064, 1068, 1069, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1112, 1113, 1124, 1132], "state": [8, 75, 76, 86, 136, 618, 690, 700, 701, 707, 709, 739, 751, 788], "note": [8, 18, 30, 31, 40, 54, 58, 59, 69, 76, 93, 94, 95, 97, 99, 100, 104, 106, 107, 108, 113, 114, 116, 118, 119, 122, 123, 129, 131, 133, 135, 137, 139, 143, 148, 157, 168, 169, 171, 172, 182, 183, 185, 186, 189, 197, 200, 209, 210, 211, 229, 232, 236, 237, 241, 242, 246, 271, 324, 325, 331, 332, 354, 355, 358, 362, 369, 400, 409, 411, 415, 431, 454, 465, 467, 497, 512, 513, 514, 515, 516, 517, 518, 519, 520, 532, 539, 546, 547, 548, 551, 554, 556, 566, 567, 568, 571, 583, 584, 592, 618, 623, 624, 626, 627, 628, 632, 641, 652, 654, 655, 666, 667, 669, 670, 675, 679, 689, 695, 700, 701, 709, 710, 716, 717, 719, 720, 721, 725, 728, 742, 751, 753, 758, 761, 764, 788, 839, 840, 846, 847, 874, 875, 878, 889, 954, 977, 986, 1021, 1029, 1030, 1036, 1041, 1048, 1055, 1056, 1057, 1060, 1063, 1065, 1075, 1076, 1077, 1080, 1094, 1105, 1124, 1131], "oper": [8, 31, 60, 77, 83, 84, 93, 95, 96, 97, 98, 99, 104, 116, 140, 156, 162, 167, 170, 177, 187, 189, 194, 197, 199, 200, 204, 211, 212, 227, 232, 233, 237, 240, 249, 250, 271, 278, 279, 282, 321, 322, 323, 324, 325, 326, 375, 376, 390, 393, 394, 415, 418, 444, 445, 446, 447, 455, 462, 479, 482, 484, 488, 489, 492, 496, 497, 504, 522, 582, 583, 592, 599, 600, 602, 613, 614, 629, 679, 690, 709, 715, 718, 721, 724, 728, 734, 735, 769, 788, 797, 837, 838, 839, 840, 841, 902, 967, 968, 969, 970, 1008, 1026, 1100, 1104, 1105, 1106, 1114, 1124], "environ": [8, 26, 132, 135], "local": [8, 30, 106, 108, 119, 133, 271, 369, 823, 825, 853, 854, 886, 889, 1001, 1002, 1124], "non": [8, 28, 30, 31, 40, 48, 69, 98, 124, 169, 172, 184, 193, 214, 215, 237, 241, 246, 247, 271, 400, 455, 466, 494, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 540, 541, 547, 601, 603, 612, 613, 614, 621, 628, 646, 650, 656, 657, 658, 661, 663, 679, 717, 720, 734, 745, 746, 761, 764, 765, 788, 917, 978, 1000, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1049, 1050, 1056, 1105, 1124], "env": [8, 134], "back": [8, 69, 156, 233, 271, 493, 577, 679, 747, 788, 797, 902, 1086, 1106, 1124], "written": [9, 27, 28, 31, 32, 33, 34, 35, 36, 48, 49, 50, 271, 747, 768, 788], "contain": [9, 28, 29, 30, 31, 48, 69, 74, 94, 95, 98, 100, 108, 119, 126, 130, 143, 152, 168, 171, 184, 197, 201, 236, 271, 281, 283, 285, 306, 307, 405, 466, 467, 544, 546, 548, 550, 563, 564, 600, 602, 644, 679, 695, 705, 716, 719, 739, 758, 788, 791, 795, 796, 842, 985, 992, 1004, 1053, 1055, 1057, 1059, 1072, 1073, 1100, 1124], "where": [9, 31, 54, 69, 107, 130, 152, 156, 183, 193, 210, 223, 243, 271, 296, 371, 374, 376, 489, 505, 523, 532, 535, 537, 597, 610, 615, 656, 657, 660, 668, 669, 679, 705, 734, 754, 762, 788, 797, 808, 891, 895, 902, 1027, 1041, 1045, 1113, 1115, 1124, 1131], "ascii": [10, 18, 552, 554, 558, 579, 1061, 1063, 1067, 1088], "charact": [10, 12, 18, 24, 28, 29, 48, 104, 105, 118, 271, 358, 545, 547, 551, 552, 553, 558, 559, 561, 562, 565, 566, 567, 568, 579, 739, 788, 791, 878, 1054, 1056, 1060, 1061, 1062, 1067, 1068, 1070, 1071, 1074, 1075, 1076, 1077, 1088], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 166, 271], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 55, 56, 57, 59, 93, 100, 104, 105, 108, 109, 118, 119, 201, 227, 233, 240, 241, 271, 761, 788, 1106, 1124, 1131], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 34, 36, 48, 49, 50, 54, 69, 75, 76, 94, 98, 100, 104, 105, 109, 110, 112, 114, 115, 116, 118, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 139, 143, 144, 145, 146, 149, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 179, 180, 181, 183, 186, 187, 191, 196, 197, 199, 201, 202, 209, 210, 211, 212, 216, 220, 222, 228, 230, 232, 233, 236, 237, 238, 242, 244, 246, 253, 254, 256, 258, 259, 261, 264, 271, 281, 282, 283, 285, 295, 301, 303, 306, 307, 321, 322, 323, 324, 325, 326, 327, 345, 361, 363, 369, 374, 375, 376, 377, 378, 379, 393, 394, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 418, 421, 422, 426, 431, 450, 454, 457, 462, 463, 465, 467, 471, 474, 476, 478, 488, 489, 490, 492, 499, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 527, 532, 534, 535, 539, 541, 544, 549, 555, 556, 557, 561, 562, 564, 571, 572, 573, 593, 596, 599, 600, 601, 602, 603, 606, 609, 610, 615, 618, 623, 624, 625, 626, 627, 638, 639, 641, 652, 655, 661, 666, 667, 669, 670, 679, 695, 697, 698, 699, 700, 701, 707, 709, 715, 716, 717, 718, 719, 720, 724, 725, 727, 729, 730, 739, 748, 751, 753, 758, 759, 764, 772, 773, 775, 777, 778, 780, 783, 788, 791, 795, 796, 797, 807, 813, 820, 823, 826, 829, 830, 837, 838, 839, 840, 841, 842, 861, 881, 883, 889, 895, 897, 898, 899, 906, 917, 918, 919, 921, 923, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 940, 944, 945, 954, 973, 977, 980, 992, 998, 1001, 1002, 1004, 1006, 1007, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1031, 1036, 1041, 1043, 1048, 1050, 1053, 1058, 1064, 1065, 1066, 1070, 1071, 1073, 1080, 1081, 1082, 1104, 1105, 1106, 1109, 1112, 1114, 1115, 1124, 1131], "revert": 10, "utf8_full_condens": [10, 18, 100], "format": [10, 11, 14, 18, 28, 31, 32, 33, 48, 103, 104, 105, 106, 118, 123, 155, 166, 183, 193, 210, 211, 229, 269, 271, 362, 365, 368, 478, 571, 572, 573, 576, 628, 708, 714, 734, 747, 768, 788, 885, 888, 1080, 1081, 1082, 1085, 1123], "style": [10, 18, 31, 116, 122, 201, 271], "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 278, 547, 556, 679, 791, 1056, 1065], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 278, 541, 547, 679, 1050, 1056, 1102, 1124], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 51, 54, 69, 71, 73, 77, 94, 96, 123, 131, 145, 146, 148, 149, 150, 153, 157, 158, 162, 165, 166, 167, 177, 185, 186, 191, 192, 201, 202, 203, 221, 222, 223, 243, 246, 250, 254, 256, 258, 259, 260, 261, 263, 264, 271, 277, 280, 287, 288, 289, 290, 291, 292, 310, 313, 314, 318, 319, 326, 327, 328, 331, 332, 363, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 389, 390, 393, 394, 399, 409, 411, 412, 413, 415, 416, 418, 431, 441, 458, 459, 460, 462, 468, 469, 470, 481, 484, 486, 487, 488, 489, 494, 496, 499, 500, 501, 502, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 530, 531, 532, 536, 537, 588, 589, 592, 597, 607, 608, 611, 612, 613, 615, 617, 629, 630, 644, 647, 648, 659, 660, 668, 679, 698, 704, 710, 711, 715, 724, 725, 732, 733, 740, 753, 754, 762, 764, 766, 769, 773, 775, 777, 778, 779, 780, 782, 783, 788, 791, 799, 800, 801, 802, 803, 804, 827, 828, 835, 836, 841, 842, 843, 846, 847, 883, 898, 899, 904, 908, 913, 954, 1000, 1004, 1006, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1039, 1040, 1044, 1098, 1099, 1111, 1124, 1132], "fmt": [11, 398, 633, 679, 722, 788], "floatfmt": 11, "mix": [11, 843, 1082, 1124], "control": [11, 31, 59, 76, 77, 129, 271, 701, 707, 788], "how": [11, 30, 31, 60, 69, 77, 78, 96, 99, 107, 152, 185, 240, 241, 271, 312, 329, 361, 369, 399, 427, 428, 429, 493, 505, 517, 549, 571, 573, 625, 669, 679, 705, 724, 761, 788, 824, 844, 881, 889, 950, 951, 952, 1021, 1058, 1080, 1082, 1124], "float": [11, 28, 31, 42, 43, 48, 123, 126, 127, 128, 131, 133, 139, 149, 154, 157, 186, 203, 212, 219, 263, 271, 314, 315, 316, 317, 327, 331, 332, 363, 374, 375, 376, 377, 378, 379, 384, 389, 393, 394, 399, 402, 406, 409, 411, 412, 413, 418, 426, 458, 462, 468, 481, 486, 487, 488, 489, 496, 499, 500, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 592, 611, 647, 648, 653, 655, 660, 668, 679, 710, 725, 740, 750, 751, 782, 788, 791, 820, 828, 831, 832, 833, 842, 843, 845, 846, 847, 883, 895, 896, 897, 898, 899, 904, 908, 913, 924, 940, 949, 950, 951, 981, 988, 989, 995, 996, 1003, 1004, 1005, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1041, 1045, 1094, 1105, 1113, 1124, 1132], "point": [11, 31, 42, 43, 131, 133, 157, 168, 171, 187, 271, 314, 327, 331, 363, 384, 389, 409, 411, 467, 521, 522, 679, 710, 716, 719, 729, 730, 742, 788, 828, 842, 846, 883, 904, 908, 924, 1004, 1025, 1026, 1105, 1124], "full": [11, 39, 69, 74, 77, 104, 105, 108, 118, 119, 168, 169, 171, 172, 271, 571, 572, 573, 576, 716, 717, 719, 720, 729, 730, 788, 791, 1080, 1081, 1082, 1085, 1132], "number": [11, 12, 13, 15, 23, 24, 28, 31, 36, 48, 50, 69, 87, 93, 95, 97, 99, 102, 104, 105, 106, 107, 109, 113, 114, 115, 118, 121, 124, 129, 131, 132, 134, 135, 143, 145, 154, 155, 157, 158, 166, 174, 183, 184, 187, 188, 196, 197, 212, 218, 219, 223, 225, 236, 240, 243, 253, 255, 265, 271, 296, 302, 308, 320, 326, 327, 329, 343, 346, 351, 353, 363, 370, 371, 373, 377, 378, 379, 383, 385, 391, 396, 409, 411, 419, 420, 429, 435, 448, 453, 455, 495, 499, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 525, 526, 528, 537, 551, 554, 556, 562, 563, 574, 585, 591, 597, 615, 616, 636, 656, 657, 660, 664, 668, 679, 695, 698, 708, 709, 710, 711, 721, 728, 739, 749, 750, 754, 756, 758, 762, 772, 774, 784, 788, 819, 830, 841, 842, 844, 859, 862, 871, 873, 883, 890, 891, 893, 896, 897, 898, 899, 903, 905, 912, 924, 942, 952, 958, 971, 976, 978, 992, 993, 1004, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1033, 1034, 1037, 1045, 1060, 1063, 1065, 1071, 1072, 1083, 1095, 1108, 1113, 1124, 1132], "plai": [12, 614], "sam": 12, "As": [12, 93, 95, 96, 97, 99, 109, 113, 114, 271, 788], "time": [12, 30, 39, 41, 54, 59, 74, 75, 76, 106, 116, 118, 156, 168, 169, 171, 172, 186, 242, 271, 308, 333, 334, 335, 336, 337, 341, 342, 358, 361, 362, 365, 367, 368, 369, 372, 425, 426, 455, 512, 513, 514, 515, 516, 518, 519, 520, 528, 571, 573, 576, 590, 591, 613, 614, 623, 624, 625, 626, 627, 628, 634, 666, 667, 679, 700, 701, 716, 717, 719, 720, 725, 739, 788, 791, 797, 819, 849, 850, 851, 852, 857, 858, 878, 881, 882, 885, 887, 888, 889, 892, 902, 948, 950, 951, 1037, 1080, 1082, 1085, 1107, 1108, 1124, 1132], "goe": 12, "By": [12, 13, 69, 104, 105, 118, 168, 169, 186, 223, 242, 243, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 537, 555, 597, 615, 623, 624, 626, 627, 628, 641, 660, 666, 667, 668, 679, 716, 717, 725, 754, 762, 788, 878, 882, 889, 1045, 1064, 1105, 1113, 1124], "begin": [12, 31, 271, 377, 378, 379, 546, 679, 897, 898, 899, 1055, 1124], "beauti": 12, "friendship": 12, "len": [12, 31, 129, 131, 184, 271, 321, 467, 552, 558, 579, 679, 1061, 1067, 1088, 1124], "u32": [12, 54, 106, 141, 144, 168, 198, 248, 253, 262, 264, 271, 279, 286, 293, 294, 295, 296, 297, 320, 321, 339, 343, 347, 351, 353, 359, 360, 363, 370, 371, 419, 423, 424, 428, 439, 466, 485, 491, 502, 509, 512, 513, 515, 518, 519, 520, 523, 541, 551, 554, 590, 594, 600, 605, 609, 610, 616, 651, 679, 693, 697, 716, 737, 767, 772, 781, 783, 788, 807, 808, 809, 820, 825, 855, 859, 866, 868, 871, 873, 876, 879, 880, 883, 890, 891, 913, 962, 1006, 1013, 1050, 1060, 1063, 1107, 1110, 1112, 1124], "37": 12, "beaut": 12, "48": [12, 169, 271, 717, 788], "fmt_str_length": 12, "50": [12, 31, 149, 156, 166, 271, 315, 316, 317, 362, 369, 679, 831, 843, 889, 1124], "print": [12, 15, 17, 18, 23, 105, 125, 153, 166, 167, 184, 187, 231, 249, 271, 398, 478, 679, 722, 788, 925, 1103, 1124, 1132], "overwrit": [13, 29, 30, 93, 95, 96, 97, 99, 104, 105, 113, 114, 118, 139, 271, 280, 679, 709, 788], "chunk": [13, 50, 102, 104, 105, 116, 118, 120, 121, 122, 131, 133, 156, 184, 196, 271, 284, 503, 679, 788, 797, 829, 902, 909, 992, 1007, 1100, 1124], "stream": [13, 32, 33, 48, 49, 50, 75, 76, 112, 143, 167, 170, 185, 236, 238, 271, 695, 700, 701, 707, 709, 715, 718, 724, 729, 730, 734, 739, 751, 753, 758, 759, 788], "engin": [13, 29, 106, 107, 109, 135, 167, 170, 185, 189, 238, 257, 271, 715, 718, 724, 729, 730, 734, 759, 776, 788, 986, 1124], "determin": [13, 28, 31, 48, 67, 69, 77, 96, 99, 104, 105, 106, 109, 115, 116, 118, 122, 124, 140, 150, 162, 168, 169, 171, 183, 184, 189, 201, 237, 242, 271, 312, 345, 361, 369, 455, 466, 475, 499, 505, 512, 513, 514, 515, 516, 518, 519, 520, 532, 549, 571, 573, 574, 625, 652, 655, 670, 679, 716, 717, 719, 788, 824, 861, 881, 889, 913, 978, 985, 1004, 1041, 1058, 1080, 1082, 1083, 1124], "schema": [13, 30, 54, 60, 70, 71, 72, 77, 78, 88, 89, 91, 93, 95, 96, 97, 99, 100, 104, 105, 106, 107, 111, 113, 114, 117, 118, 121, 129, 131, 140, 145, 146, 153, 154, 184, 189, 194, 197, 232, 271, 298, 299, 300, 455, 475, 549, 599, 661, 679, 698, 699, 706, 729, 730, 735, 747, 771, 776, 788, 791, 812, 834, 1058, 1124], "thread": [13, 28, 48, 76, 102, 104, 105, 107, 135, 271, 285, 431, 467, 679, 701, 788, 954], "pool": [13, 76, 135, 701, 788], "For": [13, 30, 31, 107, 108, 109, 119, 152, 156, 169, 185, 186, 257, 271, 377, 378, 379, 455, 467, 476, 504, 532, 539, 546, 547, 548, 556, 618, 628, 632, 633, 675, 679, 700, 705, 717, 725, 776, 788, 797, 897, 898, 899, 902, 1008, 1041, 1048, 1055, 1056, 1057, 1065, 1105, 1124], "some": [13, 26, 30, 31, 96, 104, 105, 109, 118, 139, 152, 271, 675, 705, 788, 925, 1124, 1132], "dataset": [13, 36, 104, 105, 116, 118, 122, 123, 185, 271, 416, 679, 690, 724, 729, 730, 788, 940, 1124], "esp": 13, "when": [13, 15, 17, 21, 28, 31, 36, 39, 48, 50, 59, 60, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 109, 110, 112, 115, 116, 118, 119, 120, 121, 123, 131, 133, 140, 143, 153, 154, 156, 158, 162, 168, 169, 171, 172, 185, 189, 200, 209, 211, 214, 215, 222, 230, 232, 236, 238, 247, 271, 315, 316, 317, 377, 378, 379, 385, 455, 466, 476, 495, 509, 534, 535, 566, 567, 568, 571, 609, 618, 632, 679, 695, 711, 716, 717, 719, 720, 724, 729, 730, 745, 746, 753, 758, 759, 765, 788, 797, 831, 832, 833, 889, 896, 897, 898, 899, 902, 905, 985, 1013, 1029, 1030, 1075, 1076, 1077, 1080, 1101, 1124], "have": [13, 26, 30, 31, 39, 69, 78, 94, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 131, 133, 156, 169, 183, 204, 210, 211, 229, 271, 326, 377, 378, 379, 467, 476, 502, 548, 679, 703, 717, 734, 741, 751, 767, 788, 791, 797, 841, 897, 898, 899, 902, 910, 1006, 1082, 1124, 1132], "larg": [13, 30, 69, 106, 168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "element": [13, 23, 130, 133, 143, 182, 201, 209, 223, 236, 243, 271, 285, 287, 288, 289, 290, 291, 292, 308, 313, 318, 319, 321, 322, 323, 324, 325, 326, 331, 332, 381, 382, 386, 395, 405, 427, 428, 430, 431, 432, 436, 444, 445, 446, 447, 452, 456, 459, 460, 467, 493, 494, 502, 505, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 529, 530, 531, 536, 537, 562, 563, 574, 588, 589, 591, 597, 615, 656, 657, 660, 668, 679, 695, 753, 754, 758, 762, 788, 798, 799, 800, 801, 802, 803, 804, 819, 827, 830, 835, 836, 837, 838, 839, 840, 841, 846, 847, 900, 901, 906, 912, 925, 939, 942, 950, 951, 953, 954, 955, 959, 967, 968, 969, 970, 975, 979, 982, 983, 986, 1000, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1038, 1039, 1040, 1044, 1045, 1071, 1072, 1083, 1095, 1098, 1099, 1103, 1108, 1109, 1113, 1124], "too": [13, 168, 169, 186, 242, 271, 358, 362, 369, 509, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 709, 716, 717, 725, 788, 878, 882, 889], "optimist": 13, "lead": [13, 36, 100, 123, 168, 169, 171, 172, 271, 465, 467, 524, 553, 565, 566, 568, 579, 586, 615, 679, 716, 717, 719, 720, 729, 730, 771, 776, 788, 986, 1031, 1062, 1074, 1075, 1077, 1088, 1124], "out": [13, 48, 49, 50, 100, 125, 169, 211, 271, 304, 434, 454, 539, 542, 669, 717, 788, 815, 957, 977, 1048, 1051], "memori": [13, 50, 77, 93, 94, 97, 98, 99, 104, 105, 109, 110, 116, 118, 120, 121, 122, 139, 156, 189, 211, 220, 257, 271, 493, 503, 527, 679, 788, 797, 902, 986, 1007, 1035, 1036, 1124], "error": [13, 30, 76, 79, 104, 105, 106, 118, 144, 168, 169, 186, 201, 209, 242, 271, 280, 304, 310, 358, 362, 369, 415, 437, 454, 512, 513, 514, 515, 516, 518, 519, 520, 539, 542, 546, 548, 549, 550, 571, 572, 573, 576, 623, 624, 626, 627, 666, 667, 679, 697, 701, 716, 717, 725, 771, 776, 788, 815, 820, 878, 882, 889, 960, 977, 1048, 1051, 1055, 1057, 1058, 1059, 1080, 1081, 1082, 1085, 1124], "row": [13, 18, 23, 28, 31, 34, 36, 48, 50, 69, 70, 72, 77, 85, 87, 92, 96, 97, 99, 100, 104, 105, 106, 109, 110, 112, 116, 118, 120, 121, 122, 123, 126, 129, 131, 140, 143, 145, 152, 156, 159, 162, 166, 167, 168, 170, 173, 174, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 197, 211, 212, 221, 225, 226, 229, 231, 236, 238, 240, 241, 248, 255, 257, 265, 271, 296, 382, 396, 420, 432, 455, 493, 494, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 533, 535, 545, 549, 585, 606, 609, 618, 619, 632, 636, 638, 639, 654, 656, 657, 664, 669, 679, 695, 698, 700, 705, 709, 712, 713, 716, 721, 724, 725, 726, 728, 730, 734, 752, 756, 757, 758, 759, 761, 767, 774, 776, 784, 788, 797, 901, 902, 912, 955, 1000, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1042, 1054, 1058, 1095, 1124, 1132], "per": [13, 28, 31, 48, 129, 131, 143, 166, 197, 198, 215, 222, 236, 247, 260, 262, 263, 271, 285, 309, 431, 434, 454, 467, 535, 596, 609, 679, 695, 746, 753, 758, 765, 779, 781, 782, 788, 954, 957, 977, 1112, 1124], "everi": [13, 28, 48, 104, 105, 118, 168, 171, 226, 229, 242, 271, 321, 322, 323, 324, 325, 326, 362, 369, 382, 423, 424, 429, 432, 434, 435, 444, 449, 453, 545, 587, 618, 619, 679, 709, 716, 719, 757, 788, 837, 838, 839, 840, 841, 882, 889, 901, 946, 947, 952, 955, 957, 958, 967, 972, 976, 1054, 1097, 1124], "process": [13, 28, 48, 49, 50, 135, 271, 788], "liter": [14, 18, 30, 54, 76, 109, 115, 131, 132, 133, 134, 166, 183, 190, 191, 195, 196, 199, 209, 210, 214, 215, 224, 228, 241, 246, 247, 271, 280, 303, 335, 375, 376, 383, 390, 393, 394, 400, 418, 462, 466, 482, 484, 488, 489, 496, 539, 541, 556, 557, 582, 592, 601, 603, 606, 610, 612, 613, 614, 621, 622, 623, 624, 625, 626, 627, 638, 639, 641, 646, 650, 652, 655, 658, 661, 663, 665, 666, 667, 670, 679, 701, 711, 745, 746, 761, 764, 765, 788, 791, 795, 796, 814, 842, 851, 903, 917, 1004, 1029, 1030, 1048, 1050, 1065, 1066, 1124, 1131], "left": [14, 31, 56, 69, 126, 127, 168, 169, 171, 172, 185, 186, 241, 271, 327, 377, 378, 379, 399, 400, 499, 512, 513, 514, 515, 516, 518, 519, 520, 523, 552, 579, 590, 612, 618, 619, 623, 624, 626, 627, 632, 654, 666, 667, 669, 679, 716, 717, 719, 720, 724, 725, 761, 788, 842, 897, 898, 899, 917, 1004, 1027, 1061, 1088, 1107, 1124], "center": [14, 31, 271, 377, 378, 379, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 679, 897, 898, 899, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1124], "right": [14, 16, 31, 104, 105, 126, 127, 168, 169, 171, 172, 185, 186, 271, 327, 377, 378, 379, 400, 444, 445, 446, 447, 499, 512, 513, 514, 515, 516, 518, 519, 520, 523, 532, 558, 612, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 724, 725, 788, 842, 897, 898, 899, 917, 967, 968, 969, 970, 1004, 1027, 1041, 1067, 1124], "cell": [14, 31, 271], "align": [14, 31, 69, 77, 271, 579, 1088], "valueerror": [14, 18], "recognis": [14, 18, 128], "column_abc": 14, "column_xyz": 14, "visibl": [15, 154, 271, 896, 1124], "eg": [15, 23, 31, 107, 137, 271, 362, 571, 573, 592, 679, 1080, 1082], "low": [15, 135, 499, 679, 1004, 1124], "rang": [15, 31, 106, 107, 149, 154, 168, 184, 271, 328, 339, 353, 359, 360, 362, 369, 370, 399, 606, 613, 622, 623, 624, 625, 626, 627, 638, 639, 665, 666, 667, 679, 716, 788, 843, 855, 873, 879, 880, 882, 889, 890, 896, 1000, 1124], "100": [15, 31, 96, 99, 104, 105, 118, 121, 271, 549, 574, 579, 788, 1016, 1017, 1019, 1058, 1083, 1124, 1132], "98": [15, 177, 271, 308, 534, 574, 586, 591, 679, 1083], "99": [15, 31, 157, 158, 177, 180, 271, 279, 308, 383, 385, 534, 586, 591, 679, 710, 711, 788, 895, 903, 1124], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 33, 36, 50, 54, 69, 77, 100, 107, 118, 131, 133, 146, 156, 165, 166, 168, 169, 174, 176, 177, 178, 196, 200, 201, 202, 206, 207, 214, 225, 246, 250, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 280, 284, 293, 294, 295, 297, 315, 320, 322, 325, 329, 333, 335, 341, 354, 355, 361, 362, 369, 372, 395, 396, 399, 405, 415, 419, 420, 429, 430, 435, 436, 448, 449, 452, 453, 456, 459, 475, 477, 494, 495, 533, 579, 585, 599, 612, 618, 623, 626, 629, 632, 634, 636, 641, 643, 664, 667, 679, 700, 701, 716, 717, 721, 723, 728, 738, 739, 745, 755, 756, 764, 769, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 791, 831, 844, 849, 851, 857, 881, 889, 892, 895, 912, 925, 942, 952, 953, 958, 959, 971, 972, 975, 976, 979, 982, 986, 1000, 1029, 1030, 1095, 1124, 1132], "95": [15, 279, 679], "96": [15, 279, 679], "97": [15, 177, 271, 279, 679], "move": [16, 211, 271, 377, 378, 379, 512, 513, 515, 519, 679, 897, 898, 899, 1016, 1017, 1019, 1023, 1124], "inlin": [16, 211, 271, 539, 546, 547, 556, 1048, 1055, 1056, 1065], "parenthes": 16, "inform": [17, 21, 30, 74, 108, 119, 148, 271, 315, 316, 317, 416, 532, 539, 546, 547, 556, 679, 739, 788, 825, 831, 832, 833, 940, 1041, 1048, 1055, 1056, 1065, 1124], "below": [17, 30, 108, 119, 152, 271, 385, 623, 624, 626, 627, 666, 667, 669, 675, 679, 705, 788], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 69, 100], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 309, 546, 550, 679, 1055, 1059], "rounded_corn": 18, "border": 18, "line": [18, 31, 104, 105, 109, 118, 166, 179, 181, 271, 546, 1055], "includ": [18, 26, 28, 30, 31, 48, 74, 106, 108, 119, 131, 143, 149, 154, 168, 199, 211, 236, 237, 240, 271, 327, 363, 400, 499, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 561, 562, 566, 567, 618, 656, 657, 679, 695, 716, 758, 788, 791, 842, 843, 883, 896, 917, 1004, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1070, 1071, 1075, 1114, 1124], "divid": [18, 327, 362, 369, 377, 378, 379, 416, 499, 679, 842, 882, 889, 897, 898, 899, 940, 1004, 1124], "dens": [18, 166, 271, 502, 679, 1006, 1124], "space": [18, 168, 271, 716, 788], "horizont": [18, 77, 162, 176, 240, 271, 601, 603, 613, 614, 618, 619, 621, 629, 632, 646, 650, 654, 663], "markdown": 18, "compat": [18, 31, 36, 50, 271, 539, 540, 541, 546, 547, 548, 556, 557, 788, 791, 1048, 1049, 1050, 1055, 1056, 1057, 1065, 1066], "No": [18, 577, 1086], "appli": [18, 28, 31, 48, 54, 77, 118, 128, 131, 133, 162, 189, 200, 257, 271, 337, 338, 339, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 363, 366, 370, 371, 373, 378, 379, 463, 465, 467, 495, 510, 512, 513, 515, 519, 556, 571, 572, 573, 576, 618, 619, 632, 642, 643, 644, 654, 669, 679, 721, 728, 729, 730, 738, 776, 788, 853, 854, 855, 859, 861, 862, 866, 868, 871, 873, 876, 879, 880, 883, 886, 890, 891, 893, 898, 899, 986, 1014, 1016, 1017, 1019, 1023, 1065, 1080, 1081, 1082, 1085, 1124], "round": [18, 31, 71, 100, 271, 314, 389, 588, 679, 828, 908, 1124], "corner": [18, 31, 100, 271], "op": [18, 133, 271, 505, 679, 788, 1082, 1124], "one": [18, 28, 29, 31, 48, 59, 69, 85, 93, 95, 96, 97, 98, 99, 109, 113, 114, 115, 132, 133, 134, 137, 158, 159, 166, 167, 168, 169, 171, 172, 183, 193, 201, 209, 210, 216, 232, 235, 251, 271, 279, 327, 385, 455, 460, 534, 547, 586, 644, 659, 669, 675, 679, 711, 712, 715, 716, 717, 719, 720, 734, 748, 766, 770, 788, 797, 842, 905, 936, 978, 983, 1004, 1056, 1089, 1124], "more": [18, 31, 34, 36, 50, 59, 69, 77, 92, 93, 94, 95, 96, 97, 98, 99, 106, 107, 108, 109, 113, 114, 115, 116, 119, 131, 133, 137, 148, 149, 183, 187, 189, 193, 197, 209, 210, 212, 232, 238, 257, 271, 282, 285, 301, 315, 316, 317, 416, 457, 460, 465, 467, 492, 522, 532, 547, 571, 572, 573, 593, 659, 669, 679, 734, 759, 788, 791, 798, 813, 825, 831, 832, 833, 843, 936, 940, 980, 986, 1026, 1041, 1056, 1080, 1081, 1082, 1109, 1124, 1132], "semigraph": 18, "box": [18, 189, 271], "draw": [18, 23, 24, 130, 1132], "found": [18, 28, 31, 48, 56, 80, 89, 91, 96, 100, 153, 241, 271, 523, 550, 569, 570, 571, 573, 679, 761, 788, 1027, 1059, 1078, 1079, 1080, 1082, 1124, 1131], "unicod": 18, "block": [18, 76, 167, 170, 238, 271, 669, 701, 715, 718, 742, 759, 767, 776, 788, 1029, 1030, 1124], "http": [18, 31, 32, 33, 94, 106, 107, 139, 148, 271, 546, 548, 1055, 1057], "en": [18, 31, 271], "wikipedia": 18, "org": [18, 32, 33, 94, 106, 107, 139, 148, 271], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 271], "etc": [19, 30, 31, 104, 108, 110, 112, 116, 119, 120, 122, 271, 791, 1029, 1030, 1124], "separ": [22, 28, 48, 102, 104, 105, 118, 199, 201, 230, 237, 239, 271, 285, 432, 437, 467, 545, 614, 618, 619, 679, 760, 788, 955, 960, 1054, 1093, 1101, 1124], "between": [22, 77, 128, 129, 131, 133, 148, 203, 263, 271, 310, 330, 400, 430, 436, 437, 444, 445, 446, 447, 452, 456, 494, 499, 500, 516, 538, 607, 608, 615, 617, 653, 656, 657, 679, 740, 782, 788, 820, 825, 845, 917, 953, 959, 960, 967, 968, 969, 970, 975, 979, 1000, 1004, 1005, 1020, 1047, 1124], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 36, 50, 54, 135, 149, 158, 167, 168, 169, 201, 271, 315, 316, 322, 385, 455, 493, 502, 512, 524, 563, 646, 659, 679, 711, 715, 716, 717, 788, 831, 832, 837, 843, 905, 978, 1006, 1016, 1031, 1072, 1124], "both": [23, 28, 48, 60, 109, 168, 169, 171, 172, 185, 186, 194, 209, 271, 284, 327, 380, 400, 499, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 675, 679, 689, 716, 717, 719, 720, 724, 725, 735, 788, 917, 927, 1124], "tbl_row": 23, "char": [24, 60, 78, 547, 554, 1056, 1063], "enabl": [25, 78, 106, 126, 127, 136, 214, 246, 271, 281, 283, 524, 596, 675, 679, 745, 764, 788, 795, 796, 1031, 1112, 1124], "addit": [25, 30, 31, 96, 108, 109, 119, 129, 150, 152, 155, 167, 170, 199, 214, 215, 216, 222, 239, 246, 247, 250, 271, 278, 341, 380, 383, 493, 535, 539, 546, 547, 556, 609, 612, 613, 614, 630, 658, 661, 675, 679, 704, 708, 715, 718, 745, 746, 748, 753, 760, 764, 765, 769, 788, 849, 857, 903, 1048, 1055, 1056, 1065, 1124], "verbos": [25, 137, 547, 1056], "debug": [25, 700, 709, 729, 730, 788, 1132], "log": [25, 71, 308, 374, 460, 484, 496, 591, 679, 819, 895, 1108, 1124], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 36, 57, 70, 72, 74, 93, 95, 96, 97, 98, 99, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 131, 161, 183, 199, 205, 209, 210, 211, 213, 228, 229, 237, 271, 466, 509, 679, 742, 744, 788, 985, 1124], "show": [26, 31, 58, 152, 166, 187, 198, 271, 705, 739, 751, 788], "variabl": [26, 51, 56, 132, 135, 193, 230, 271, 734, 788, 1101, 1124, 1131], "chang": [26, 69, 76, 104, 105, 106, 123, 240, 241, 242, 271, 285, 326, 327, 329, 362, 467, 494, 499, 512, 513, 514, 515, 516, 518, 519, 520, 679, 701, 761, 788, 797, 825, 826, 841, 842, 882, 913, 1000, 1004, 1036, 1124], "restrict": [26, 563, 1072], "dictionari": [26, 31, 93, 95, 96, 97, 99, 104, 105, 106, 107, 111, 113, 114, 117, 118, 183, 199, 209, 210, 211, 228, 229, 271, 466, 679, 788, 985, 1124], "those": [26, 31, 104, 109, 211, 271, 502, 546, 644, 679, 791, 1006, 1055, 1124], "been": [26, 31, 139, 140, 142, 170, 171, 172, 252, 271, 285, 309, 403, 407, 410, 427, 430, 436, 452, 456, 463, 467, 502, 510, 512, 513, 514, 515, 516, 518, 519, 520, 540, 553, 559, 565, 604, 642, 679, 694, 718, 719, 720, 729, 741, 768, 771, 788, 798, 922, 928, 950, 953, 959, 975, 979, 1006, 1014, 1049, 1062, 1068, 1074, 1124], "set_fmt_float": 26, "directli": [26, 56, 76, 106, 131, 133, 137, 211, 271, 377, 378, 379, 655, 679, 701, 788, 897, 898, 899, 1124, 1132], "via": [26, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 183, 210, 271, 285, 467, 548, 679, 703, 741, 788, 1057], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 33, 103, 104, 109, 110, 111, 112, 115, 116, 117, 271], "bytesio": [27, 28, 31, 32, 33, 36, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 271, 703, 741, 788], "compress": [27, 32, 33, 36, 49, 50, 271, 788], "avrocompress": [27, 271], "uncompress": [27, 32, 33, 36, 50, 110, 120, 271, 788], "write": [27, 28, 29, 30, 31, 32, 33, 34, 36, 48, 50, 105, 110, 137, 271, 315, 316, 317, 480, 679, 727, 751, 788, 831, 832, 833, 1124], "apach": [27, 32, 33, 36, 103, 106, 107, 271], "avro": [27, 103, 271, 690], "should": [27, 28, 29, 31, 32, 33, 34, 35, 36, 48, 49, 50, 77, 93, 95, 97, 99, 108, 113, 114, 116, 118, 122, 128, 129, 133, 143, 150, 168, 169, 183, 186, 189, 209, 210, 211, 229, 230, 236, 239, 242, 257, 271, 279, 312, 326, 358, 362, 369, 372, 380, 409, 411, 431, 467, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 523, 532, 596, 623, 624, 626, 627, 628, 630, 637, 641, 644, 656, 657, 666, 667, 669, 675, 679, 695, 704, 709, 716, 717, 724, 725, 730, 747, 751, 753, 758, 760, 768, 788, 791, 824, 841, 878, 882, 889, 892, 954, 986, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1041, 1112, 1124], "snappi": [27, 36, 50, 271, 788], "deflat": [27, 271], "import": [27, 28, 30, 31, 32, 33, 36, 39, 69, 93, 94, 97, 98, 118, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 149, 150, 152, 166, 168, 184, 186, 199, 201, 230, 232, 233, 240, 242, 271, 328, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 511, 512, 513, 515, 518, 519, 520, 607, 608, 623, 624, 626, 628, 666, 667, 675, 679, 690, 697, 701, 703, 704, 705, 716, 725, 730, 734, 747, 788, 835, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 921, 926, 930, 931, 936, 1015, 1039, 1098, 1124, 1132], "pathlib": [27, 28, 32, 33, 36, 118, 271], "foo": [27, 28, 30, 32, 33, 34, 35, 36, 58, 144, 147, 148, 150, 151, 152, 153, 156, 159, 160, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 180, 185, 189, 190, 191, 192, 195, 198, 201, 203, 205, 206, 207, 209, 212, 213, 214, 217, 218, 219, 221, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 237, 238, 239, 243, 244, 245, 249, 271, 311, 315, 316, 317, 327, 358, 396, 398, 420, 426, 433, 434, 438, 439, 471, 474, 475, 476, 477, 478, 479, 499, 506, 525, 526, 538, 541, 543, 545, 547, 548, 561, 563, 566, 567, 568, 569, 570, 575, 578, 585, 587, 605, 611, 615, 616, 617, 631, 635, 636, 640, 645, 647, 648, 649, 651, 653, 658, 660, 664, 668, 669, 675, 679, 697, 702, 704, 705, 706, 712, 722, 723, 724, 737, 742, 744, 745, 759, 760, 763, 766, 788, 791, 822, 831, 842, 878, 960, 1004, 1010, 1050, 1052, 1054, 1056, 1057, 1072, 1078, 1079, 1084, 1087, 1124], "bar": [27, 28, 30, 32, 33, 34, 35, 36, 58, 144, 147, 148, 150, 151, 152, 153, 156, 159, 160, 162, 163, 164, 165, 174, 176, 177, 178, 180, 185, 189, 190, 191, 192, 195, 198, 201, 203, 205, 206, 207, 209, 212, 213, 214, 218, 219, 221, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 238, 239, 243, 244, 249, 271, 311, 398, 439, 471, 472, 473, 474, 475, 476, 477, 478, 479, 532, 541, 543, 545, 547, 548, 561, 563, 569, 570, 605, 611, 615, 616, 617, 631, 636, 640, 645, 647, 648, 649, 651, 658, 660, 664, 668, 669, 675, 679, 697, 702, 704, 705, 706, 712, 722, 723, 724, 737, 742, 744, 745, 759, 760, 763, 788, 791, 822, 960, 1041, 1050, 1052, 1054, 1056, 1057, 1072, 1078, 1079, 1124], "ham": [27, 28, 30, 32, 33, 36, 144, 147, 148, 150, 151, 152, 153, 159, 160, 163, 173, 174, 176, 185, 190, 191, 192, 195, 198, 203, 205, 207, 209, 212, 213, 214, 218, 219, 221, 223, 224, 225, 230, 231, 232, 233, 234, 238, 243, 244, 271, 311, 478, 675, 697, 702, 704, 705, 706, 712, 724, 737, 742, 744, 745, 759, 766, 788, 822], "d": [27, 28, 30, 31, 32, 33, 36, 60, 78, 96, 123, 149, 166, 168, 173, 174, 177, 185, 225, 227, 240, 244, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 278, 280, 342, 365, 368, 400, 495, 527, 541, 547, 562, 571, 572, 573, 612, 628, 634, 679, 716, 724, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 825, 858, 885, 888, 917, 1050, 1056, 1071, 1080, 1081, 1082, 1124], "e": [27, 28, 30, 32, 33, 36, 48, 60, 78, 94, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 149, 166, 168, 169, 174, 186, 225, 227, 232, 240, 242, 271, 278, 285, 358, 362, 369, 374, 380, 400, 458, 466, 467, 472, 473, 475, 476, 477, 478, 479, 512, 513, 514, 515, 516, 518, 519, 520, 527, 532, 623, 624, 626, 627, 630, 644, 666, 667, 669, 679, 703, 716, 717, 725, 727, 741, 742, 788, 791, 878, 882, 889, 895, 917, 1028, 1041, 1105, 1124, 1132], "dirpath": [27, 28, 32, 33, 36, 118, 271], "new_fil": [27, 28, 32, 33, 36, 271], "has_head": [28, 31, 48, 104, 105, 109, 118, 271, 788], "line_termin": [28, 48, 271, 788], "quot": [28, 29, 48, 104, 105, 118, 271, 788], "batch_siz": [28, 48, 104, 105, 106, 121, 123, 271, 788], "1024": [28, 48, 50, 104, 105, 121, 271, 788], "datetime_format": [28, 48, 271, 788], "date_format": [28, 48, 271, 788], "time_format": [28, 48, 271, 788], "float_precis": [28, 31, 48, 271, 788], "null_valu": [28, 48, 104, 105, 118, 271, 788], "quote_styl": [28, 48, 271, 788], "csvquotestyl": [28, 48, 271, 788], "textiowrapp": [28, 271], "comma": [28, 271], "csv": [28, 48, 49, 50, 104, 105, 109, 118, 271, 690, 788], "result": [28, 34, 35, 48, 49, 50, 69, 77, 97, 99, 106, 107, 108, 109, 118, 120, 122, 123, 133, 156, 168, 169, 171, 185, 197, 211, 219, 233, 242, 250, 271, 365, 368, 377, 378, 379, 383, 416, 455, 465, 467, 493, 499, 506, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 524, 526, 561, 562, 573, 592, 618, 619, 623, 624, 625, 626, 627, 643, 652, 655, 656, 657, 670, 679, 696, 716, 717, 719, 720, 724, 729, 730, 739, 747, 750, 768, 769, 788, 797, 842, 885, 888, 897, 898, 899, 902, 940, 986, 1004, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1031, 1034, 1070, 1071, 1082, 1105, 1124, 1131, 1132], "If": [28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 50, 54, 60, 74, 76, 77, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 132, 139, 140, 143, 152, 156, 166, 168, 169, 171, 172, 174, 182, 183, 186, 188, 189, 193, 197, 210, 211, 212, 221, 225, 229, 230, 232, 236, 237, 238, 240, 241, 271, 281, 283, 285, 315, 316, 317, 335, 354, 355, 369, 386, 416, 449, 455, 465, 466, 467, 478, 493, 499, 502, 504, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 528, 532, 533, 547, 548, 549, 551, 553, 554, 559, 560, 561, 562, 563, 565, 566, 567, 568, 571, 572, 573, 576, 596, 600, 602, 604, 606, 610, 615, 616, 618, 623, 624, 626, 627, 628, 632, 638, 639, 641, 644, 652, 655, 656, 657, 661, 666, 667, 669, 670, 679, 695, 701, 705, 707, 716, 717, 719, 720, 724, 725, 730, 734, 742, 747, 752, 758, 759, 761, 768, 771, 776, 788, 791, 795, 796, 797, 798, 831, 832, 833, 842, 851, 874, 875, 889, 902, 910, 912, 913, 939, 940, 942, 972, 978, 986, 1004, 1006, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1031, 1037, 1041, 1042, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1095, 1100, 1105, 1112, 1114, 1124, 1131], "instead": [28, 34, 35, 54, 58, 69, 76, 77, 104, 105, 106, 109, 115, 116, 118, 122, 131, 166, 168, 169, 183, 186, 189, 197, 199, 209, 210, 211, 214, 215, 233, 242, 246, 247, 271, 295, 327, 358, 361, 362, 369, 380, 465, 499, 512, 513, 514, 515, 516, 518, 519, 520, 551, 553, 559, 565, 566, 567, 568, 571, 573, 606, 610, 611, 623, 624, 625, 626, 627, 628, 638, 639, 652, 655, 661, 666, 667, 670, 679, 701, 710, 716, 717, 725, 745, 746, 747, 764, 765, 768, 788, 791, 807, 842, 878, 881, 882, 889, 1004, 1029, 1030, 1060, 1062, 1068, 1074, 1075, 1076, 1077, 1080, 1082, 1106, 1124, 1131], "whether": [28, 48, 97, 99, 133, 143, 216, 236, 271, 281, 283, 345, 363, 421, 422, 472, 473, 524, 679, 695, 729, 730, 748, 753, 758, 788, 791, 795, 796, 823, 826, 861, 883, 944, 945, 1124, 1131], "header": [28, 31, 36, 48, 50, 100, 104, 105, 109, 118, 153, 201, 237, 271, 788], "field": [28, 30, 48, 61, 89, 91, 96, 232, 239, 271, 455, 466, 508, 547, 548, 549, 562, 563, 581, 618, 619, 643, 661, 679, 760, 788, 842, 978, 1004, 1012, 1057, 1069, 1071, 1072, 1091, 1093, 1124], "symbol": [28, 48, 271, 788], "end": [28, 31, 48, 104, 105, 116, 118, 168, 271, 303, 306, 307, 333, 362, 380, 400, 449, 539, 544, 547, 560, 564, 606, 623, 624, 626, 627, 630, 638, 639, 666, 667, 669, 675, 679, 716, 721, 728, 739, 788, 791, 817, 849, 882, 917, 972, 1053, 1056, 1069, 1073, 1124], "each": [28, 31, 48, 69, 105, 106, 121, 126, 127, 129, 166, 167, 168, 169, 170, 171, 172, 184, 186, 189, 199, 212, 233, 239, 242, 249, 250, 253, 255, 257, 265, 271, 327, 362, 369, 403, 404, 407, 408, 435, 453, 460, 467, 499, 502, 509, 514, 516, 518, 520, 522, 528, 535, 547, 562, 563, 606, 609, 614, 638, 639, 661, 669, 679, 716, 717, 719, 720, 725, 739, 760, 769, 771, 772, 774, 776, 784, 788, 829, 842, 882, 889, 922, 923, 928, 929, 958, 976, 1004, 1006, 1013, 1026, 1037, 1056, 1071, 1072, 1093, 1124, 1132], "byte": [28, 48, 50, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 154, 271, 303, 306, 307, 551, 554, 788, 814, 817, 818, 896, 1060, 1063, 1124], "specifi": [28, 31, 48, 69, 80, 89, 91, 109, 115, 131, 143, 144, 150, 154, 155, 158, 167, 168, 169, 170, 171, 172, 185, 199, 209, 211, 214, 215, 216, 222, 236, 239, 246, 247, 250, 271, 377, 378, 379, 380, 385, 466, 493, 505, 512, 513, 514, 515, 516, 518, 519, 520, 535, 552, 558, 609, 612, 613, 614, 623, 624, 626, 627, 630, 658, 661, 666, 667, 675, 679, 695, 697, 704, 708, 711, 715, 716, 717, 718, 719, 720, 724, 745, 746, 748, 753, 758, 760, 764, 765, 769, 788, 896, 897, 898, 899, 905, 1061, 1067, 1124], "defin": [28, 31, 39, 48, 106, 128, 129, 131, 140, 144, 152, 155, 168, 169, 171, 172, 189, 197, 200, 252, 257, 271, 285, 400, 454, 467, 495, 499, 509, 512, 513, 514, 515, 516, 518, 519, 520, 604, 623, 624, 626, 627, 641, 644, 661, 666, 667, 679, 697, 705, 708, 716, 717, 719, 720, 738, 771, 776, 788, 791, 798, 917, 977, 986, 1004, 1013, 1124], "chrono": [28, 48, 271, 365, 368, 571, 572, 573, 576, 788, 885, 888, 1080, 1081, 1082, 1085], "rust": [28, 36, 48, 86, 106, 110, 112, 116, 189, 257, 271, 548, 788, 986, 1057, 1124], "crate": [28, 48, 271, 539, 540, 541, 546, 547, 548, 556, 557, 571, 572, 573, 576, 788, 791, 1048, 1049, 1050, 1055, 1056, 1057, 1065, 1066, 1080, 1081, 1082, 1085], "fraction": [28, 48, 126, 127, 212, 271, 363, 494, 522, 571, 573, 679, 788, 883, 1000, 1026, 1080, 1082, 1124], "second": [28, 48, 130, 168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 571, 573, 623, 624, 625, 626, 627, 628, 665, 666, 667, 669, 679, 716, 717, 725, 788, 791, 878, 882, 889, 1080, 1082, 1132], "precis": [28, 30, 31, 39, 40, 48, 106, 183, 210, 211, 229, 271, 334, 574, 788, 791, 850, 1083], "infer": [28, 48, 93, 95, 96, 97, 98, 99, 104, 105, 106, 109, 113, 114, 118, 121, 140, 189, 271, 506, 549, 571, 572, 573, 574, 576, 655, 679, 788, 1010, 1058, 1080, 1081, 1082, 1083, 1085, 1124], "maximum": [28, 48, 104, 105, 118, 123, 129, 130, 131, 133, 166, 190, 271, 423, 468, 486, 502, 645, 646, 679, 731, 788, 831, 863, 946, 987, 995, 1001, 1006, 1124], "timeunit": [28, 39, 41, 48, 271, 334, 335, 367, 372, 573, 623, 624, 625, 626, 627, 788, 791, 850, 851, 887, 892, 1082], "frame": [28, 29, 31, 48, 54, 55, 56, 57, 58, 59, 69, 76, 77, 96, 105, 109, 115, 126, 131, 144, 145, 183, 184, 189, 194, 197, 200, 209, 210, 211, 233, 240, 271, 697, 698, 735, 738, 788, 791, 830, 1124, 1131, 1132], "datetim": [28, 30, 31, 48, 69, 100, 109, 131, 144, 149, 166, 168, 169, 171, 172, 184, 186, 242, 271, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 426, 512, 513, 514, 515, 516, 518, 519, 520, 571, 573, 590, 623, 624, 626, 627, 628, 634, 641, 666, 667, 679, 697, 716, 717, 719, 720, 725, 788, 791, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 936, 949, 950, 951, 995, 996, 1030, 1080, 1082, 1107, 1124], "place": [28, 48, 143, 151, 156, 176, 177, 201, 206, 211, 218, 219, 222, 236, 244, 271, 295, 437, 448, 525, 526, 534, 679, 695, 749, 750, 753, 758, 788, 797, 807, 902, 960, 971, 1007, 1033, 1034, 1043, 1124], "float64": [28, 31, 48, 96, 104, 131, 153, 154, 162, 213, 233, 246, 271, 287, 288, 289, 290, 291, 292, 310, 318, 319, 328, 363, 380, 409, 411, 501, 530, 531, 588, 589, 630, 652, 655, 670, 675, 679, 706, 744, 764, 788, 791, 883, 1106, 1111, 1124], "repres": [28, 31, 48, 52, 67, 93, 95, 97, 98, 99, 223, 243, 249, 271, 409, 411, 465, 537, 597, 600, 615, 628, 630, 641, 643, 644, 656, 657, 660, 668, 675, 679, 754, 762, 788, 1030, 1045, 1113, 1124], "empti": [28, 48, 84, 96, 104, 105, 109, 115, 118, 145, 146, 168, 180, 193, 271, 641, 658, 698, 699, 716, 734, 788, 791, 830, 834, 920, 1124], "necessari": [28, 48, 109, 271, 788], "alwai": [28, 30, 48, 54, 104, 130, 167, 170, 189, 257, 271, 475, 571, 623, 669, 730, 788, 797, 986, 1080, 1124, 1131, 1132], "non_numer": [28, 48, 271, 788], "never": [28, 48, 106, 209, 271, 788], "strategi": [28, 48, 69, 77, 104, 128, 129, 130, 131, 133, 158, 168, 171, 185, 186, 196, 271, 285, 385, 455, 467, 679, 711, 716, 719, 724, 725, 788, 905, 978, 1124], "put": [28, 48, 271, 788], "around": [28, 48, 271, 788], "thei": [28, 30, 31, 48, 76, 96, 118, 126, 137, 187, 211, 271, 701, 788, 791], "delimit": [28, 35, 48, 104, 105, 114, 118, 121, 201, 230, 271, 538, 788, 1047, 1101, 1124], "record": [28, 33, 48, 112, 123, 186, 232, 271, 725, 788], "termin": [28, 48, 271, 788], "also": [28, 31, 48, 59, 96, 109, 115, 118, 129, 130, 131, 132, 133, 137, 153, 167, 168, 169, 171, 172, 194, 197, 210, 214, 222, 246, 271, 322, 325, 358, 361, 400, 467, 502, 512, 513, 514, 515, 516, 518, 519, 520, 535, 566, 567, 618, 619, 623, 632, 634, 654, 669, 678, 679, 684, 715, 716, 717, 719, 720, 735, 745, 753, 764, 766, 788, 791, 881, 917, 1006, 1049, 1050, 1075, 1124], "indistinguish": [28, 48, 271, 788], "even": [28, 48, 104, 271, 495, 499, 679, 788, 1004, 1124], "invalid": [28, 48, 60, 104, 105, 118, 271, 549, 550, 555, 592, 679, 788, 1058, 1059, 1064], "g": [28, 48, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 139, 168, 169, 186, 232, 240, 242, 271, 278, 285, 358, 362, 369, 380, 467, 512, 513, 514, 515, 516, 518, 519, 520, 527, 623, 624, 626, 627, 630, 666, 667, 679, 703, 716, 717, 725, 741, 742, 788, 878, 882, 889, 1028, 1105, 1124, 1132], "numer": [28, 31, 48, 144, 150, 186, 201, 240, 271, 278, 315, 316, 317, 390, 400, 460, 482, 484, 496, 505, 527, 548, 582, 592, 679, 690, 697, 704, 725, 734, 788, 791, 831, 832, 833, 843, 917, 934, 1028, 1035, 1057, 1105, 1124, 1132], "doe": [28, 30, 48, 69, 77, 87, 93, 95, 96, 97, 99, 100, 104, 105, 106, 108, 109, 113, 114, 118, 119, 123, 126, 127, 156, 184, 185, 209, 210, 211, 238, 246, 271, 309, 372, 455, 466, 594, 631, 640, 675, 679, 709, 724, 730, 759, 764, 788, 797, 892, 902, 910, 985, 1036, 1114, 1124], "pars": [28, 48, 54, 104, 105, 109, 114, 118, 120, 121, 143, 167, 170, 214, 215, 222, 236, 246, 247, 250, 271, 400, 466, 493, 535, 549, 555, 574, 601, 603, 609, 612, 613, 614, 621, 634, 646, 650, 658, 659, 661, 663, 669, 679, 695, 715, 718, 745, 746, 753, 758, 764, 765, 769, 788, 917, 1058, 1064, 1082, 1083, 1124], "valid": [28, 31, 39, 48, 54, 110, 112, 116, 133, 137, 154, 185, 271, 326, 539, 540, 541, 546, 547, 548, 550, 556, 557, 669, 679, 724, 788, 791, 841, 896, 910, 1048, 1049, 1050, 1055, 1056, 1057, 1059, 1065, 1066, 1124], "integ": [28, 30, 31, 44, 45, 46, 47, 48, 63, 64, 65, 66, 124, 129, 131, 132, 134, 152, 168, 169, 230, 271, 282, 314, 363, 389, 390, 492, 499, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 555, 599, 606, 634, 638, 639, 655, 679, 705, 716, 717, 788, 791, 828, 883, 908, 927, 1004, 1008, 1021, 1030, 1064, 1124, 1131, 1132], "aren": [28, 48, 271, 788], "t": [28, 48, 56, 57, 77, 104, 109, 115, 118, 168, 189, 200, 238, 240, 271, 285, 326, 333, 341, 361, 374, 377, 378, 379, 431, 467, 493, 495, 546, 568, 571, 573, 669, 679, 716, 738, 759, 788, 791, 841, 881, 895, 897, 898, 899, 954, 986, 1028, 1055, 1076, 1077, 1080, 1082, 1105, 1114, 1124], "strictli": [28, 48, 271, 709, 788], "table_nam": [29, 31, 271], "connect": [29, 104, 106, 107, 110, 112, 116, 120, 122, 123, 271, 691], "if_exist": [29, 271], "dbwritemod": [29, 271], "fail": [29, 30, 94, 108, 110, 114, 119, 139, 238, 271, 296, 366, 455, 571, 572, 573, 576, 679, 759, 788, 986, 1080, 1081, 1082, 1085, 1124], "dbwriteengin": [29, 271], "sqlalchemi": [29, 106, 271], "databas": [29, 106, 107, 271, 690], "creat": [29, 31, 93, 97, 99, 106, 107, 119, 129, 130, 131, 132, 133, 134, 145, 146, 168, 169, 172, 198, 201, 242, 246, 271, 335, 362, 369, 455, 503, 512, 513, 515, 518, 519, 520, 560, 613, 622, 623, 624, 625, 626, 627, 628, 665, 666, 667, 675, 679, 698, 699, 707, 716, 717, 720, 764, 788, 830, 834, 842, 851, 882, 889, 997, 1004, 1007, 1069, 1105, 1124, 1131, 1132], "append": [29, 30, 131, 156, 185, 186, 271, 503, 669, 679, 724, 725, 788, 902, 1124], "your": [29, 31, 69, 104, 105, 106, 109, 126, 127, 183, 189, 210, 211, 214, 229, 246, 250, 257, 271, 285, 467, 548, 571, 572, 573, 644, 679, 700, 721, 728, 730, 745, 764, 769, 776, 788, 986, 1057, 1080, 1081, 1082, 1124, 1132], "special": [29, 104, 105, 118, 271, 511, 547, 679, 798, 986, 1015, 1056, 1124], "uri": [29, 30, 106, 107, 108, 119, 271], "postgresql": [29, 107, 271, 493, 679], "user": [29, 106, 107, 140, 189, 200, 252, 257, 271, 285, 465, 467, 495, 524, 604, 644, 679, 738, 771, 776, 788, 798, 986, 1031, 1124], "pass": [29, 30, 31, 36, 57, 69, 95, 106, 107, 109, 118, 123, 129, 131, 133, 143, 148, 150, 167, 168, 169, 171, 174, 188, 199, 200, 214, 222, 225, 236, 242, 246, 250, 271, 285, 342, 358, 361, 383, 398, 467, 493, 495, 512, 513, 514, 515, 516, 518, 519, 520, 535, 566, 567, 568, 600, 609, 623, 634, 661, 669, 675, 679, 695, 704, 715, 716, 717, 719, 720, 722, 729, 730, 738, 745, 751, 753, 758, 764, 769, 776, 788, 798, 858, 881, 903, 912, 942, 986, 1075, 1076, 1077, 1095, 1124], "server": [29, 107, 271], "port": [29, 104, 107, 110, 112, 116, 120, 122, 271], "sqlite": [29, 106, 271], "db": [29, 107, 271], "replac": [29, 30, 104, 105, 118, 157, 158, 207, 237, 246, 247, 271, 335, 361, 466, 557, 679, 710, 764, 765, 788, 851, 881, 985, 1029, 1030, 1066, 1124], "insert": [29, 104, 105, 110, 112, 116, 118, 120, 121, 122, 177, 206, 237, 239, 271, 523, 538, 579, 679, 760, 788, 1027, 1047, 1088, 1124], "mode": [29, 30, 54, 271, 547, 652, 655, 670, 679, 788, 1056, 1124, 1131], "new": [29, 30, 31, 118, 137, 176, 177, 189, 197, 198, 205, 206, 226, 237, 239, 240, 246, 247, 271, 280, 335, 382, 399, 464, 556, 557, 562, 563, 580, 581, 587, 679, 690, 742, 757, 760, 764, 765, 771, 776, 788, 794, 851, 901, 997, 1009, 1065, 1066, 1071, 1072, 1089, 1091, 1097, 1102, 1124, 1131], "alreadi": [29, 30, 271, 326, 431, 596, 679, 841, 954, 1112, 1124], "adbc": [29, 106, 107, 271], "deltalak": [30, 108, 119, 125, 271], "deltat": [30, 271], "ignor": [30, 106, 130, 131, 133, 191, 224, 271, 281, 283, 329, 361, 377, 378, 379, 429, 486, 487, 600, 602, 679, 795, 796, 844, 881, 897, 898, 899, 952, 995, 996, 1124], "overwrite_schema": [30, 271], "storage_opt": [30, 104, 108, 110, 112, 116, 119, 120, 122, 271], "delta_write_opt": [30, 271], "delta": [30, 41, 108, 119, 223, 243, 271, 518, 520, 537, 597, 615, 656, 657, 660, 668, 679, 690, 754, 762, 788, 1022, 1024, 1045, 1113, 1124], "object": [30, 31, 32, 33, 59, 77, 94, 95, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 129, 131, 133, 139, 167, 168, 169, 170, 171, 186, 187, 211, 232, 233, 271, 623, 624, 626, 627, 641, 666, 667, 690, 703, 716, 717, 719, 720, 725, 741, 788, 791, 821, 848, 943, 1046, 1100, 1124], "handl": [30, 77, 100, 104, 105, 118, 123, 271, 329, 429, 579, 679, 844, 952, 1088, 1124], "throw": [30, 144, 271, 310, 549, 550, 679, 697, 788, 820, 1058, 1059, 1124], "add": [30, 31, 105, 156, 168, 171, 189, 246, 247, 248, 271, 327, 497, 499, 583, 628, 632, 669, 679, 716, 719, 724, 764, 765, 766, 767, 788, 797, 902, 1124], "anyth": [30, 209, 271], "updat": [30, 271, 788], "extra": [30, 36, 50, 104, 108, 109, 110, 112, 116, 119, 120, 122, 156, 168, 271, 716, 788, 797, 902, 1124], "storag": [30, 104, 108, 110, 112, 116, 119, 120, 122, 271], "backend": [30, 106, 107, 108, 119, 271], "cloud": [30, 106, 108, 119, 123, 271], "configur": [30, 108, 119, 137, 271], "authent": [30, 108, 119, 271], "see": [30, 31, 32, 33, 39, 106, 107, 108, 109, 119, 126, 127, 131, 133, 148, 185, 200, 271, 315, 316, 317, 385, 416, 465, 532, 539, 546, 547, 556, 623, 624, 626, 627, 654, 666, 667, 675, 679, 791, 825, 831, 832, 833, 940, 1041, 1048, 1055, 1056, 1065, 1124, 1132], "here": [30, 31, 36, 93, 95, 96, 97, 99, 107, 108, 113, 114, 119, 129, 131, 133, 271, 467, 548, 550, 679, 788, 1059], "gc": [30, 108, 119, 271], "azur": [30, 108, 119, 271], "keyword": [30, 57, 108, 116, 119, 148, 200, 209, 214, 215, 246, 247, 250, 271, 495, 658, 661, 679, 738, 745, 746, 764, 765, 769, 788, 1124], "argument": [30, 36, 104, 108, 116, 118, 119, 148, 150, 155, 167, 168, 169, 170, 171, 172, 191, 199, 200, 201, 214, 215, 216, 222, 224, 233, 239, 242, 246, 247, 250, 271, 362, 369, 380, 400, 493, 495, 512, 513, 514, 515, 516, 518, 519, 520, 535, 566, 567, 568, 600, 607, 608, 609, 612, 613, 614, 623, 630, 655, 658, 661, 666, 675, 679, 704, 708, 715, 716, 717, 718, 719, 720, 738, 745, 746, 748, 753, 760, 764, 765, 769, 788, 797, 882, 889, 917, 1075, 1076, 1077, 1106, 1124], "while": [30, 76, 105, 108, 109, 119, 131, 133, 137, 183, 193, 237, 271, 701, 734, 788], "lake": [30, 108, 119, 271, 690], "typeerror": [30, 271], "unsupport": [30, 271], "arrowinvaliderror": [30, 271], "could": [30, 67, 81, 144, 168, 271, 310, 618, 628, 632, 679, 697, 705, 716, 788, 820, 1124], "primit": [30, 271, 405, 679, 1105, 1124], "categor": [30, 60, 78, 94, 126, 127, 185, 230, 231, 271, 311, 312, 327, 466, 499, 590, 679, 791, 821, 822, 823, 824, 825, 826, 842, 1004, 1107, 1124], "protocol": [30, 94, 107, 139, 271], "associ": [30, 31, 55, 57, 69, 107, 130, 211, 271], "affect": [30, 271], "follow": [30, 31, 36, 74, 104, 105, 108, 118, 119, 168, 169, 186, 189, 200, 242, 271, 358, 362, 369, 495, 502, 512, 513, 514, 515, 516, 517, 518, 519, 520, 581, 592, 623, 624, 626, 627, 644, 666, 667, 669, 671, 672, 674, 679, 680, 681, 685, 686, 687, 716, 717, 725, 738, 788, 878, 882, 889, 1006, 1029, 1030, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1130, 1132], "unsign": [30, 63, 64, 65, 66, 271, 504, 679, 791, 927, 1008, 1124], "millisecond": [30, 168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 791, 878, 882, 889], "nanosecond": [30, 168, 169, 186, 242, 271, 358, 362, 363, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 878, 882, 883, 889], "zone": [30, 39, 271, 333, 336, 361, 573, 623, 624, 625, 626, 627, 791, 849, 852, 881, 1082], "binari": [30, 32, 271, 303, 305, 306, 307, 791, 814, 817, 818], "nullabl": [30, 271], "To": [30, 76, 157, 271, 331, 332, 385, 539, 546, 547, 556, 577, 623, 679, 710, 788, 846, 847, 1048, 1055, 1056, 1065, 1086, 1105, 1124], "pyarrow": [30, 36, 93, 94, 98, 104, 107, 108, 110, 112, 116, 119, 123, 125, 227, 232, 233, 271, 691, 1100, 1104, 1105, 1106, 1124], "ha": [30, 31, 69, 76, 106, 109, 118, 139, 140, 142, 168, 169, 170, 171, 172, 242, 252, 271, 285, 308, 309, 326, 403, 407, 410, 427, 430, 436, 452, 456, 463, 476, 510, 512, 513, 514, 515, 516, 518, 519, 520, 540, 553, 559, 565, 591, 604, 642, 675, 679, 694, 701, 716, 717, 718, 719, 720, 729, 741, 768, 771, 776, 788, 798, 819, 830, 841, 843, 910, 922, 924, 928, 950, 953, 959, 975, 979, 1014, 1049, 1062, 1068, 1074, 1108, 1124], "last": [30, 143, 174, 186, 188, 201, 211, 222, 225, 236, 238, 265, 271, 295, 326, 339, 354, 359, 370, 407, 408, 415, 434, 453, 497, 534, 563, 583, 585, 623, 664, 679, 695, 725, 753, 756, 758, 759, 784, 788, 791, 807, 841, 855, 874, 879, 890, 912, 928, 929, 942, 957, 976, 1072, 1095, 1124], "filesystem": [30, 108, 119, 271], "table_path": [30, 108, 119, 271], "match": [30, 31, 39, 77, 87, 93, 95, 96, 97, 99, 113, 114, 126, 127, 158, 186, 209, 271, 473, 517, 539, 540, 541, 544, 546, 547, 549, 550, 556, 557, 564, 571, 572, 573, 675, 679, 711, 725, 788, 791, 927, 936, 1021, 1048, 1049, 1050, 1053, 1055, 1056, 1058, 1059, 1065, 1066, 1073, 1080, 1081, 1082, 1124], "version": [30, 74, 108, 119, 125, 139, 140, 142, 170, 171, 172, 252, 271, 285, 309, 354, 355, 361, 369, 403, 407, 410, 427, 430, 436, 452, 456, 463, 510, 540, 553, 559, 565, 571, 573, 604, 611, 623, 625, 642, 654, 655, 666, 679, 694, 714, 718, 719, 720, 729, 741, 768, 771, 788, 797, 798, 842, 874, 875, 881, 889, 922, 928, 950, 953, 959, 975, 979, 1004, 1014, 1049, 1062, 1068, 1074, 1080, 1082, 1124], "old": [30, 205, 271, 742, 788], "existing_table_path": [30, 271], "store": [30, 104, 116, 156, 183, 210, 271, 311, 797, 822, 902, 1124], "like": [30, 76, 94, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 179, 181, 185, 232, 271, 333, 431, 479, 502, 546, 596, 675, 679, 701, 703, 741, 788, 797, 849, 954, 1006, 1055, 1112, 1124], "bucket": [30, 108, 119, 271, 362, 369, 882, 889, 913, 1124], "prefix": [30, 137, 271, 280, 307, 464, 564, 569, 579, 583, 679, 791, 818, 1073, 1078, 1088], "aws_region": [30, 119, 271], "the_aws_region": [30, 271], "aws_access_key_id": [30, 108, 119, 271], "the_aws_access_key_id": [30, 108, 119, 271], "aws_secret_access_kei": [30, 108, 119, 271], "the_aws_secret_access_kei": [30, 108, 119, 271], "pa": [30, 93, 123, 271], "workbook": [31, 109, 271], "worksheet": [31, 109, 115, 271], "posit": [31, 150, 155, 167, 170, 199, 214, 215, 216, 222, 239, 246, 247, 250, 271, 377, 378, 379, 380, 493, 499, 535, 548, 555, 607, 608, 609, 612, 613, 614, 630, 658, 661, 675, 679, 704, 708, 715, 718, 745, 746, 748, 753, 760, 764, 765, 769, 788, 897, 898, 899, 1004, 1057, 1064, 1124], "tupl": [31, 107, 109, 115, 140, 183, 189, 209, 210, 211, 217, 249, 271, 506, 679, 739, 751, 788, 791, 1010, 1124], "a1": [31, 70, 72, 271], "table_styl": [31, 271], "column_format": [31, 271], "columnformatdict": [31, 271], "dtype_format": [31, 271], "oneormoredatatyp": [31, 129, 271, 936, 1124], "conditional_format": [31, 271], "conditionalformatdict": [31, 271], "header_format": [31, 271], "column_tot": [31, 271], "columntotalsdefinit": [31, 271], "column_width": [31, 271], "columnwidthsdefinit": [31, 271], "row_tot": [31, 271], "rowtotalsdefinit": [31, 271], "row_height": [31, 271], "sparklin": [31, 271], "sequenc": [31, 61, 69, 75, 76, 93, 95, 96, 97, 99, 104, 105, 109, 113, 114, 115, 118, 129, 130, 131, 143, 149, 155, 156, 185, 186, 193, 197, 199, 200, 201, 211, 222, 230, 236, 240, 241, 242, 271, 327, 405, 455, 463, 465, 495, 499, 535, 581, 604, 609, 618, 619, 632, 634, 642, 643, 644, 654, 659, 679, 695, 708, 724, 725, 734, 738, 753, 758, 760, 761, 788, 797, 842, 843, 845, 902, 978, 1004, 1030, 1091, 1124], "formula": [31, 271, 374, 679, 895, 1124], "autofilt": [31, 271], "autofit": [31, 271], "hidden_column": [31, 271], "selectortyp": [31, 271, 791], "hide_gridlin": [31, 271], "sheet_zoom": [31, 271], "freeze_pan": [31, 271], "excel": [31, 109, 271], "open": [31, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 271, 703, 741, 788], "xlsxwriter": [31, 125, 271], "close": [31, 106, 168, 169, 171, 172, 271, 327, 400, 460, 499, 512, 513, 514, 515, 516, 518, 519, 520, 532, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 788, 842, 917, 1004, 1041, 1124], "xlsx": [31, 109, 271], "work": [31, 40, 94, 105, 206, 215, 247, 271, 281, 283, 285, 301, 314, 315, 316, 317, 380, 389, 431, 457, 467, 493, 509, 554, 593, 679, 746, 765, 788, 791, 795, 796, 813, 828, 831, 832, 833, 908, 954, 980, 1063, 1109, 1124], "directori": [31, 36, 116, 122, 271], "sheet1": [31, 271], "notat": [31, 271], "medium": [31, 271], "kei": [31, 69, 74, 77, 168, 183, 185, 186, 194, 199, 201, 205, 208, 210, 211, 271, 467, 661, 679, 709, 716, 724, 725, 735, 742, 743, 788], "first_column": [31, 271], "last_column": [31, 271], "banded_column": [31, 271], "banded_row": [31, 271], "sheet": [31, 109, 115, 271], "chart": [31, 271, 739, 788], "subsequ": [31, 59, 204, 233, 271, 455, 669, 707, 788], "colnam": [31, 118, 131, 153, 271, 706, 788], "given": [31, 54, 55, 69, 93, 95, 96, 97, 99, 104, 105, 106, 107, 109, 113, 114, 115, 118, 128, 129, 131, 132, 133, 134, 140, 143, 154, 155, 157, 168, 169, 171, 172, 182, 189, 199, 200, 209, 211, 218, 219, 222, 236, 241, 271, 333, 336, 365, 367, 368, 374, 400, 426, 448, 455, 458, 467, 493, 495, 502, 505, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 525, 526, 547, 548, 571, 573, 581, 604, 630, 642, 643, 644, 655, 656, 657, 679, 695, 708, 716, 717, 719, 720, 729, 730, 738, 749, 750, 753, 758, 761, 771, 776, 788, 791, 798, 849, 852, 885, 887, 888, 895, 896, 913, 917, 939, 949, 971, 978, 981, 984, 986, 997, 1006, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1033, 1034, 1056, 1057, 1080, 1082, 1111, 1115, 1124, 1131, 1132], "dd": [31, 271], "mm": [31, 271], "yyyi": [31, 271], "00": [31, 131, 168, 186, 242, 271, 333, 334, 336, 340, 341, 343, 344, 347, 348, 350, 351, 352, 354, 355, 357, 358, 361, 362, 363, 364, 365, 368, 369, 372, 512, 513, 515, 518, 519, 520, 571, 573, 576, 626, 628, 666, 667, 679, 716, 725, 788, 791, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 865, 866, 867, 869, 871, 872, 874, 875, 876, 877, 878, 881, 882, 884, 886, 887, 889, 892, 1080, 1082, 1085], "overridden": [31, 93, 95, 97, 99, 113, 114, 135, 271, 788], "basi": [31, 131, 271], "param": [31, 93, 95, 96, 97, 99, 104, 105, 113, 114, 118, 130, 131, 133, 209, 271, 788], "It": [31, 194, 200, 257, 271, 309, 475, 509, 675, 679, 729, 730, 735, 776, 788, 1029, 1030, 1124], "group": [31, 36, 50, 54, 105, 167, 168, 169, 170, 171, 172, 184, 197, 199, 201, 211, 240, 242, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 279, 326, 382, 388, 431, 467, 475, 477, 493, 502, 509, 534, 535, 539, 546, 547, 548, 556, 586, 596, 644, 679, 715, 716, 717, 718, 719, 720, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 841, 954, 1013, 1048, 1055, 1056, 1057, 1065, 1112, 1124], "float_dtyp": [31, 271], "simplifi": [31, 48, 49, 50, 75, 76, 271, 700, 701, 707, 709, 739, 751, 788], "uniform": [31, 271, 499, 679, 1004, 1124], "condit": [31, 152, 159, 209, 271, 544, 564, 610, 632, 669, 705, 712, 788], "suppli": [31, 93, 95, 96, 97, 99, 106, 113, 114, 209, 271, 495, 679, 788], "typenam": [31, 271], "3_color_scal": [31, 271], "data_bar": [31, 271], "make": [31, 61, 77, 93, 98, 104, 105, 110, 112, 116, 120, 122, 194, 197, 204, 242, 271, 378, 379, 466, 493, 505, 562, 579, 679, 735, 788, 898, 899, 913, 985, 1071, 1088, 1124, 1132], "icon": [31, 271], "multipl": [31, 57, 75, 76, 77, 104, 105, 109, 115, 118, 120, 121, 122, 129, 133, 143, 150, 154, 156, 159, 167, 168, 176, 184, 199, 201, 211, 214, 216, 222, 236, 246, 250, 271, 454, 472, 476, 483, 484, 493, 506, 509, 512, 513, 514, 515, 516, 518, 519, 520, 535, 609, 618, 619, 632, 642, 643, 645, 649, 654, 659, 662, 669, 675, 679, 695, 701, 704, 712, 715, 716, 745, 748, 753, 758, 764, 769, 776, 788, 797, 896, 902, 977, 991, 1010, 1124], "singl": [31, 55, 69, 76, 77, 104, 105, 107, 116, 118, 129, 144, 150, 151, 152, 156, 164, 182, 185, 189, 199, 209, 211, 222, 271, 285, 358, 386, 427, 428, 454, 465, 467, 503, 506, 535, 538, 598, 604, 609, 613, 614, 639, 643, 644, 659, 667, 675, 679, 697, 704, 705, 724, 753, 788, 797, 878, 902, 950, 951, 977, 1007, 1010, 1047, 1100, 1124], "across": [31, 69, 271, 601, 603, 621, 646, 650, 663], "effect": [31, 162, 168, 171, 232, 271, 341, 467, 623, 624, 679, 716, 719, 767, 788, 849, 857], "heatmap": [31, 271], "min": [31, 36, 50, 149, 158, 168, 169, 201, 271, 315, 317, 323, 385, 493, 502, 515, 650, 658, 679, 711, 716, 717, 788, 831, 833, 838, 843, 905, 1006, 1019, 1124, 1132], "entir": [31, 271], "final": [31, 69, 122, 271, 377, 378, 379, 679, 709, 788, 897, 898, 899, 1124], "made": [31, 271, 1105, 1124], "up": [31, 61, 107, 183, 186, 210, 211, 229, 271, 285, 314, 467, 579, 679, 724, 725, 730, 788, 791, 828, 1088, 1124], "abov": [31, 271, 669], "order": [31, 48, 49, 50, 54, 56, 69, 75, 96, 106, 124, 126, 143, 152, 159, 167, 168, 169, 170, 171, 172, 185, 199, 200, 201, 212, 216, 222, 232, 236, 238, 242, 271, 295, 301, 312, 331, 332, 386, 450, 457, 502, 513, 514, 515, 516, 518, 520, 522, 523, 524, 534, 535, 581, 593, 594, 596, 609, 679, 689, 695, 705, 712, 715, 716, 717, 718, 719, 720, 724, 734, 748, 753, 758, 759, 788, 807, 813, 824, 826, 846, 847, 906, 935, 973, 980, 1006, 1011, 1026, 1027, 1031, 1043, 1091, 1109, 1110, 1112, 1124, 1132], "than": [31, 48, 49, 50, 92, 97, 99, 104, 105, 106, 109, 115, 118, 123, 131, 133, 145, 167, 170, 183, 186, 189, 199, 209, 210, 212, 240, 257, 271, 393, 394, 418, 462, 467, 478, 499, 509, 522, 532, 552, 558, 563, 579, 615, 623, 644, 679, 715, 718, 725, 776, 788, 986, 1004, 1013, 1026, 1041, 1061, 1067, 1072, 1088, 1124, 1132], "bold": [31, 271], "font_color": [31, 271], "702963": [31, 271], "total": [31, 154, 271, 896, 1124], "export": [31, 183, 184, 210, 211, 229, 232, 271, 675], "sum": [31, 54, 154, 162, 167, 168, 169, 182, 201, 250, 271, 324, 325, 374, 386, 455, 467, 475, 477, 478, 479, 512, 515, 519, 598, 600, 618, 620, 621, 632, 644, 654, 663, 679, 700, 701, 703, 707, 709, 715, 716, 717, 737, 739, 747, 751, 769, 788, 791, 839, 840, 895, 896, 1016, 1017, 1019, 1022, 1023, 1024, 1124], "must": [31, 94, 95, 108, 119, 123, 149, 155, 168, 169, 171, 172, 186, 194, 209, 271, 327, 455, 465, 499, 512, 513, 514, 515, 516, 518, 519, 520, 669, 679, 708, 716, 717, 719, 720, 725, 729, 730, 735, 788, 842, 843, 1004, 1124], "funcnam": [31, 271], "averag": [31, 271, 377, 378, 379, 502, 679, 897, 898, 899, 1006, 1124], "count_num": [31, 271], "count": [31, 54, 104, 105, 110, 112, 116, 118, 120, 121, 122, 123, 141, 142, 149, 168, 169, 186, 197, 198, 201, 237, 241, 242, 248, 257, 262, 271, 286, 321, 358, 419, 427, 428, 467, 475, 477, 485, 491, 512, 513, 514, 515, 516, 518, 519, 520, 540, 541, 594, 596, 605, 651, 679, 693, 694, 716, 717, 725, 737, 761, 767, 776, 781, 788, 843, 878, 913, 950, 951, 993, 999, 1049, 1050, 1110, 1112, 1124], "std_dev": [31, 271], "var": [31, 134, 271, 520, 679, 788, 1124], "pixel": [31, 271], "unit": [31, 39, 41, 131, 133, 154, 271, 334, 335, 342, 367, 372, 461, 476, 571, 573, 595, 623, 624, 625, 626, 627, 634, 679, 739, 788, 791, 850, 851, 858, 887, 892, 896, 984, 1080, 1082, 1111, 1124, 1132], "hand": [31, 104, 105, 118, 271, 444, 445, 446, 447, 967, 968, 969, 970], "side": [31, 168, 169, 171, 172, 271, 400, 444, 445, 446, 447, 512, 513, 514, 515, 516, 518, 519, 520, 523, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 788, 917, 967, 968, 969, 970, 1027, 1124], "call": [31, 58, 105, 106, 131, 133, 137, 167, 168, 169, 171, 187, 189, 270, 271, 285, 322, 325, 415, 467, 497, 528, 583, 675, 679, 691, 715, 716, 717, 719, 720, 787, 788, 791, 798, 986, 1037, 1124], "ad": [31, 96, 168, 237, 246, 247, 271, 284, 383, 618, 619, 679, 716, 764, 765, 788, 842, 903, 1004, 1124], "wise": [31, 69, 106, 162, 271, 287, 288, 289, 290, 291, 292, 318, 319, 381, 459, 529, 530, 531, 588, 589, 618, 619, 632, 654, 679, 799, 800, 801, 802, 803, 804, 835, 836, 900, 982, 983, 1038, 1039, 1040, 1098, 1099, 1124], "particip": [31, 271], "distinct": [31, 133, 199, 271, 301, 403, 404, 407, 408, 457, 502, 628, 679, 813, 922, 923, 928, 929, 980, 1006, 1124, 1132], "referenc": [31, 271, 581], "differ": [31, 104, 123, 126, 156, 168, 169, 183, 210, 211, 229, 237, 271, 329, 339, 358, 359, 361, 370, 376, 429, 444, 446, 452, 466, 467, 486, 487, 489, 571, 594, 631, 634, 640, 679, 707, 716, 717, 788, 791, 797, 825, 844, 855, 878, 879, 881, 890, 902, 952, 967, 969, 975, 986, 995, 996, 1028, 1080, 1124], "row_index": [31, 271], "height": [31, 152, 271], "provid": [31, 48, 49, 50, 57, 104, 105, 107, 108, 118, 119, 131, 133, 182, 271, 304, 305, 380, 455, 465, 467, 542, 543, 546, 549, 550, 634, 661, 679, 690, 788, 815, 816, 913, 939, 986, 1051, 1052, 1055, 1058, 1059, 1124, 1131, 1132], "intersect": [31, 271, 445, 791, 968], "bodi": [31, 271], "start": [31, 103, 104, 105, 107, 110, 112, 116, 118, 120, 121, 122, 135, 167, 168, 170, 171, 187, 221, 242, 248, 271, 303, 306, 307, 339, 353, 359, 362, 369, 370, 380, 400, 449, 512, 513, 515, 518, 519, 520, 533, 539, 544, 547, 560, 564, 606, 618, 623, 624, 626, 627, 630, 632, 638, 639, 666, 667, 669, 675, 679, 715, 716, 718, 719, 739, 752, 767, 788, 791, 818, 850, 852, 855, 858, 859, 866, 868, 871, 873, 876, 879, 882, 887, 889, 890, 917, 972, 1042, 1053, 1056, 1069, 1073, 1124, 1132], "zero": [31, 93, 94, 103, 104, 105, 110, 112, 116, 130, 139, 158, 183, 209, 227, 232, 233, 271, 385, 455, 460, 523, 532, 579, 592, 679, 698, 711, 788, 830, 905, 978, 1041, 1088, 1100, 1105, 1106, 1124], "unless": [31, 69, 95, 233, 271, 566, 567, 655, 788, 1075, 1106, 1114, 1124], "marker": [31, 271], "compliant": [31, 271], "case": [31, 69, 76, 93, 95, 96, 97, 99, 113, 114, 122, 135, 140, 156, 168, 169, 171, 172, 183, 189, 210, 211, 229, 271, 333, 464, 465, 475, 476, 539, 547, 556, 679, 701, 716, 717, 719, 720, 788, 791, 797, 849, 902, 1048, 1056, 1065, 1124], "three": [31, 235, 271, 327, 455, 499, 523, 679, 842, 978, 1004, 1124], "avail": [31, 102, 106, 107, 108, 119, 129, 137, 270, 271, 502, 671, 672, 674, 678, 679, 680, 681, 684, 685, 686, 687, 690, 691, 709, 787, 788, 791, 1006, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1130], "insert_befor": [31, 271], "insert_aft": [31, 271], "respect": [31, 271, 791], "direct": [31, 107, 116, 122, 240, 271], "far": [31, 271], "strongli": [31, 135, 189, 209, 257, 271, 467, 679, 986, 1124], "advis": [31, 187, 271], "structur": [31, 84, 88, 90, 156, 200, 211, 232, 271, 495, 679, 738, 788, 797, 902, 1124], "wherev": [31, 189, 257, 271, 467, 679, 986, 1124], "possibl": [31, 104, 143, 167, 170, 183, 189, 210, 236, 238, 257, 271, 461, 467, 475, 511, 563, 595, 679, 695, 715, 718, 753, 758, 759, 788, 986, 1015, 1072, 1124], "simpl": [31, 133, 197, 271], "colx": [31, 59, 271, 791, 1132], "coli": [31, 271, 791, 1132], "after": [31, 59, 77, 96, 103, 104, 105, 110, 112, 116, 118, 120, 121, 122, 156, 239, 270, 271, 380, 466, 493, 502, 579, 679, 760, 788, 797, 902, 985, 1006, 1088, 1124], "befor": [31, 104, 106, 118, 123, 126, 127, 135, 137, 156, 168, 171, 186, 239, 271, 324, 325, 326, 466, 493, 494, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 579, 584, 656, 657, 679, 716, 719, 722, 725, 760, 788, 797, 839, 840, 841, 902, 985, 1000, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1088, 1094, 1124], "most": [31, 56, 93, 104, 105, 107, 118, 271, 476, 483, 494, 563, 679, 991, 1000, 1072, 1124, 1131], "mandatori": [31, 271], "return_dtyp": [31, 140, 189, 271, 285, 463, 465, 466, 467, 604, 642, 643, 644, 679, 798, 985, 986, 1124], "latter": [31, 156, 271, 797, 902, 1124], "appropri": [31, 123, 232, 271, 502, 679, 1006, 1124], "pure": [31, 271, 1105, 1124], "actual": [31, 96, 131, 133, 211, 271, 1036, 1124], "indic": [31, 103, 104, 105, 110, 112, 116, 118, 128, 129, 133, 168, 169, 171, 172, 186, 211, 216, 230, 242, 271, 296, 358, 362, 369, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 454, 471, 474, 512, 513, 514, 515, 516, 518, 519, 520, 523, 529, 586, 609, 610, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 725, 748, 788, 791, 878, 882, 889, 921, 922, 923, 926, 928, 929, 930, 931, 932, 933, 977, 1027, 1038, 1096, 1101, 1124, 1132], "calcul": [31, 69, 168, 223, 243, 271, 329, 377, 378, 379, 416, 429, 444, 461, 517, 532, 537, 595, 597, 615, 656, 657, 660, 668, 679, 716, 754, 762, 788, 844, 897, 898, 899, 940, 952, 967, 1021, 1041, 1045, 1113, 1124], "individu": [31, 50, 131, 137, 169, 232, 271, 467, 547, 679, 717, 788, 829, 1056, 1124], "gridlin": [31, 271], "zoom": [31, 271], "level": [31, 36, 50, 118, 120, 121, 122, 131, 162, 189, 197, 271, 386, 679, 721, 728, 788], "freez": [31, 271], "pane": [31, 271], "top": [31, 143, 236, 271, 695, 758, 788], "index": [31, 94, 98, 101, 125, 139, 160, 168, 169, 171, 172, 177, 182, 183, 186, 201, 207, 209, 210, 221, 232, 234, 242, 248, 271, 279, 293, 294, 295, 297, 358, 423, 424, 434, 449, 454, 455, 512, 513, 514, 515, 516, 518, 519, 520, 523, 533, 546, 560, 586, 679, 716, 717, 719, 720, 725, 752, 767, 788, 805, 806, 807, 808, 809, 878, 939, 946, 947, 957, 972, 977, 978, 997, 1027, 1030, 1042, 1055, 1069, 1096, 1124], "thu": [31, 156, 271, 615, 797, 902, 1124], "altern": [31, 271, 675, 1105, 1124], "a2": [31, 70, 72, 271], "occur": [31, 75, 76, 271, 427, 428, 483, 502, 679, 700, 701, 707, 709, 739, 751, 788, 950, 951, 991, 1006, 1124], "equival": [31, 93, 95, 96, 97, 99, 108, 113, 114, 168, 182, 197, 271, 278, 282, 375, 376, 390, 393, 394, 418, 462, 482, 484, 488, 489, 492, 496, 554, 582, 592, 599, 679, 716, 788, 939, 1063, 1084, 1086, 1087, 1124], "top_row": [31, 271], "top_col": [31, 271], "base": [31, 37, 152, 159, 168, 169, 171, 172, 271, 333, 341, 374, 377, 378, 379, 458, 459, 499, 555, 679, 705, 712, 716, 717, 719, 720, 788, 791, 849, 857, 895, 897, 898, 899, 913, 981, 982, 1004, 1064, 1115, 1124, 1132], "scroll": [31, 271], "region": [31, 271], "initit": [31, 271], "5th": [31, 271], "properti": [31, 139, 147, 153, 161, 175, 213, 217, 245, 271, 702, 706, 744, 763, 788, 791, 1132], "readthedoc": [31, 271], "io": [31, 271, 703, 747, 788], "html": [31, 32, 33, 94, 106, 139, 148, 271], "definit": [31, 129, 271, 416, 679, 940, 1124], "take": [31, 109, 115, 131, 137, 162, 168, 171, 194, 200, 201, 226, 232, 271, 358, 535, 587, 623, 624, 629, 631, 640, 679, 716, 719, 735, 757, 788, 878, 1097, 1115, 1124], "care": [31, 271, 285, 467, 524, 679, 1031, 1124], "rel": [31, 107, 108, 119, 126, 127, 271, 358, 377, 378, 379, 514, 516, 518, 520, 679, 878, 897, 898, 899, 1124], "working_with_conditional_format": [31, 271], "similarli": [31, 96, 168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "well": [31, 104, 105, 106, 118, 201, 271, 400, 679, 917, 1124], "adjac": [31, 271], "two": [31, 59, 95, 97, 99, 107, 162, 193, 194, 201, 235, 251, 257, 271, 279, 330, 335, 455, 499, 534, 586, 607, 608, 615, 617, 656, 657, 679, 734, 735, 770, 776, 788, 845, 851, 978, 1004, 1124], "help": [31, 126, 127, 271, 709, 788], "appear": [31, 96, 126, 271, 594, 679, 1110, 1124], "working_with_sparklin": [31, 271], "inject": [31, 69, 271], "locat": [31, 156, 207, 234, 239, 271, 523, 679, 760, 788, 797, 902, 1027, 1030, 1096, 1124], "syntax": [31, 189, 197, 271, 539, 546, 547, 556, 675, 751, 788, 1048, 1055, 1056, 1065, 1124], "ensur": [31, 78, 107, 130, 131, 133, 167, 170, 199, 209, 271, 400, 679, 715, 718, 729, 730, 788, 791, 1105, 1124], "correctli": [31, 271], "microsoft": [31, 125, 271], "com": [31, 107, 271, 377, 378, 379, 546, 547, 548, 679, 897, 898, 899, 1055, 1056, 1057, 1124], "u": [31, 39, 41, 57, 100, 271, 334, 335, 342, 367, 372, 571, 573, 623, 624, 625, 626, 627, 634, 791, 850, 851, 858, 887, 892, 1080, 1082], "offic": [31, 271], "f5ed2452": [31, 271], "2337": [31, 271], "4f71": [31, 271], "bed3": [31, 271], "c8ae6d2b276": [31, 271], "instanti": [31, 106, 214, 246, 271, 745, 764, 788], "basic": [31, 271, 1132], "random": [31, 32, 124, 129, 131, 133, 173, 212, 271, 395, 502, 522, 528, 596, 679, 690, 911, 1006, 1026, 1037, 1112, 1124], "date": [31, 39, 69, 104, 105, 107, 109, 115, 118, 123, 131, 144, 149, 166, 168, 169, 171, 172, 184, 186, 242, 271, 334, 335, 336, 339, 340, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 426, 512, 513, 514, 515, 516, 518, 519, 520, 571, 572, 590, 623, 624, 626, 627, 634, 641, 665, 666, 667, 679, 697, 716, 717, 719, 720, 725, 788, 791, 850, 851, 852, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 893, 936, 949, 950, 951, 995, 996, 1030, 1080, 1081, 1107, 1124], "dtm": [31, 271, 335, 791, 851], "2023": [31, 100, 125, 184, 271, 335, 628, 641, 791, 851], "num": [31, 235, 271, 400, 579, 679, 917, 1124], "500": [31, 183, 241, 271, 709, 761, 788, 866, 868, 876, 1016, 1017, 1019, 1124], "val": [31, 208, 271, 312, 467, 495, 590, 669, 679, 743, 788, 824], "10_000": [31, 271], "20_000": [31, 271], "30_000": [31, 271], "increas": [31, 69, 104, 116, 271, 326, 679, 841, 1124], "b4": [31, 271], "light": [31, 271], "twice": [31, 109, 271], "titl": [31, 54, 271], "explicit": [31, 118, 129, 271, 654], "integr": [31, 271, 1132], "multi_fram": [31, 271], "wb": [31, 271], "coordin": [31, 271], "advanc": [31, 109, 271, 455, 978, 1132], "min_color": [31, 271], "76933c": [31, 271], "mid_color": [31, 271], "c4d79b": [31, 271], "max_color": [31, 271], "ebf1d": [31, 271], "data_bar_2010": [31, 271], "bar_color": [31, 271], "9bbb59": [31, 271], "bar_negative_color_sam": [31, 271], "bar_negative_border_color_sam": [31, 271], "000": [31, 271, 1132], "white": [31, 271], "w": [31, 56, 57, 168, 171, 211, 271, 541, 546, 548, 601, 603, 716, 719, 788, 791, 1050, 1055, 1057, 1076], "get_worksheet_by_nam": [31, 271], "fmt_titl": [31, 271], "add_format": [31, 271], "4f6228": [31, 271], "font_siz": [31, 271], "12": [31, 69, 100, 130, 131, 142, 168, 169, 186, 242, 271, 280, 324, 333, 335, 339, 343, 351, 353, 354, 355, 358, 359, 360, 362, 369, 370, 371, 494, 501, 519, 527, 541, 574, 611, 619, 622, 623, 624, 625, 626, 627, 643, 666, 667, 679, 694, 714, 716, 717, 721, 725, 728, 741, 751, 756, 768, 788, 791, 849, 851, 873, 882, 889, 986, 1025, 1050, 1083, 1124, 1132], "ital": [31, 271], "customis": [31, 271], "trend": [31, 271], "win_loss": [31, 271], "subtl": [31, 271], "tone": [31, 271], "hidden": [31, 271], "id": [31, 77, 237, 257, 271, 509, 556, 557, 594, 679, 776, 1013, 1110, 1124, 1132], "q1": [31, 271], "55": [31, 71, 271], "20": [31, 131, 156, 176, 177, 194, 200, 202, 206, 207, 271, 293, 294, 295, 329, 362, 369, 395, 399, 495, 512, 513, 515, 634, 641, 666, 679, 735, 738, 788, 791, 844, 889, 1124], "35": [31, 125, 271, 329, 679, 844, 1124], "q2": [31, 271], "30": [31, 156, 168, 176, 200, 206, 207, 228, 246, 271, 293, 294, 295, 329, 335, 340, 343, 351, 353, 354, 360, 361, 362, 369, 370, 395, 527, 641, 666, 679, 716, 738, 764, 788, 791, 844, 851, 856, 874, 881, 882, 889, 1124, 1132], "15": [31, 125, 130, 168, 169, 177, 189, 271, 326, 329, 343, 351, 355, 362, 369, 495, 519, 619, 655, 666, 679, 716, 717, 788, 841, 844, 882, 889, 1124], "60": [31, 156, 271, 363, 364, 519, 571, 679, 879, 883, 884, 1080], "q3": [31, 271], "40": [31, 156, 200, 271, 362, 369, 395, 574, 679, 738, 788, 862, 889, 1083], "80": [31, 271], "q4": [31, 271], "75": [31, 149, 271, 282, 492, 499, 512, 513, 514, 515, 518, 519, 520, 644, 679, 843, 913, 1004, 1124, 1132], "account": [31, 100, 107, 271, 358, 377, 378, 379, 679, 878, 897, 898, 899, 1124], "flavour": [31, 106, 271], "integer_dtyp": [31, 214, 271, 745, 788, 791], "0_": [31, 271], "just": [31, 118, 193, 271, 734, 788], "unifi": [31, 271, 791], "multi": [31, 104, 105, 271, 380, 546, 679, 1055], "2_color_scal": [31, 271], "95b3d7": [31, 271], "ffffff": [31, 271], "standardis": [31, 271], "z": [31, 56, 77, 100, 129, 131, 154, 179, 181, 185, 193, 210, 211, 240, 271, 278, 280, 282, 312, 395, 425, 464, 467, 492, 497, 505, 547, 571, 573, 583, 601, 603, 621, 646, 650, 655, 663, 679, 724, 734, 752, 788, 791, 824, 905, 1056, 1080, 1082, 1124, 1131], "score": [31, 271], "conjunct": [31, 109, 115, 271], "a123": [31, 271], "b345": [31, 271], "c567": [31, 271], "d789": [31, 271], "e101": [31, 271], "45": [31, 169, 271, 335, 343, 351, 362, 369, 519, 541, 547, 607, 608, 641, 666, 679, 717, 788, 791, 851, 882, 889, 1050, 1056, 1132], "85": [31, 271, 1132], "font": [31, 271], "consola": [31, 271], "standard": [31, 125, 223, 232, 271, 346, 378, 518, 532, 537, 550, 660, 679, 754, 788, 862, 898, 1041, 1045, 1059, 1124, 1132], "stdev": [31, 271], "ipccompress": [32, 33, 271], "arrow": [32, 33, 49, 79, 93, 94, 106, 107, 110, 112, 120, 183, 210, 211, 227, 229, 271, 788, 1100, 1105, 1124], "ipc": [32, 33, 110, 111, 112, 120, 123, 271, 690], "feather": [32, 110, 120, 271, 690], "access": [32, 70, 71, 72, 73, 139, 183, 209, 210, 271, 466, 548, 679, 766, 788, 1057, 1132], "doc": [32, 33, 107, 148, 271], "python": [32, 33, 53, 94, 104, 105, 106, 125, 139, 183, 189, 210, 211, 229, 257, 271, 285, 335, 463, 465, 467, 548, 623, 624, 626, 627, 666, 667, 669, 679, 684, 776, 798, 851, 863, 864, 865, 870, 986, 1057, 1104, 1124], "lz4": [32, 33, 36, 49, 50, 271, 788], "zstd": [32, 33, 36, 49, 50, 271, 788], "batch": [33, 102, 105, 106, 112, 121, 123, 271, 729, 730, 788], "pretti": [34, 271], "row_ori": [34, 271], "iobas": [34, 35, 113, 114, 271, 480, 703, 741, 747, 768, 788], "serial": [34, 35, 271, 703, 768, 788], "represent": [34, 35, 231, 271, 312, 339, 343, 346, 347, 349, 351, 353, 356, 359, 360, 363, 370, 371, 373, 590, 679, 707, 727, 788, 824, 825, 855, 859, 861, 862, 866, 868, 871, 873, 876, 879, 880, 883, 890, 891, 893, 1103, 1107, 1124], "orient": [34, 70, 72, 97, 99, 271, 788], "slower": [34, 97, 99, 109, 167, 170, 189, 199, 242, 257, 271, 467, 644, 679, 715, 718, 776, 788, 986, 1124], "common": [34, 69, 75, 76, 77, 271, 464, 679, 684, 700, 701, 707, 709, 739, 751, 788], "write_ndjson": [34, 271], "bit_set": [34, 271, 747, 788], "newlin": [35, 114, 121, 271], "parquetcompress": [36, 271], "compression_level": [36, 50, 271, 788], "statist": [36, 50, 104, 105, 116, 122, 149, 271, 378, 379, 416, 512, 513, 514, 515, 516, 517, 518, 519, 520, 532, 679, 788, 843, 898, 899, 940, 1021, 1041, 1124], "row_group_s": [36, 50, 271, 788], "use_pyarrow": [36, 104, 110, 112, 116, 271, 1104, 1105, 1124], "pyarrow_opt": [36, 108, 116, 119, 271], "parquet": [36, 50, 116, 117, 122, 271, 690, 788], "gzip": [36, 50, 271, 788], "lzo": [36, 50, 271, 788], "brotli": [36, 50, 271, 788], "choos": [36, 49, 50, 201, 271, 788], "good": [36, 49, 50, 183, 271, 788], "perform": [36, 49, 50, 69, 84, 94, 104, 105, 110, 116, 118, 120, 121, 122, 139, 143, 167, 168, 169, 170, 171, 172, 186, 189, 204, 211, 236, 257, 271, 285, 467, 493, 571, 572, 573, 679, 695, 716, 717, 719, 720, 725, 753, 758, 767, 788, 986, 1080, 1081, 1082, 1124], "fast": [36, 49, 50, 132, 134, 271, 383, 524, 679, 788, 903, 1031, 1124, 1132], "decompress": [36, 49, 50, 271, 788], "backward": [36, 50, 158, 186, 271, 302, 355, 385, 679, 711, 725, 788, 875, 905, 1124], "guarante": [36, 50, 94, 104, 105, 238, 271, 709, 759, 788], "deal": [36, 50, 183, 271, 281, 283, 361, 369, 502, 571, 573, 600, 602, 625, 679, 788, 795, 796, 881, 889, 1006, 1080, 1082, 1124], "older": [36, 50, 271, 788], "reader": [36, 50, 102, 104, 105, 110, 112, 116, 271, 691, 788], "higher": [36, 50, 203, 263, 271, 500, 516, 653, 679, 740, 782, 788, 1005, 1020, 1124], "mean": [36, 50, 104, 105, 110, 116, 118, 149, 158, 167, 168, 169, 186, 201, 242, 250, 271, 358, 362, 369, 382, 385, 512, 513, 514, 515, 516, 518, 519, 520, 532, 546, 611, 623, 624, 626, 627, 628, 666, 667, 669, 679, 711, 715, 716, 717, 725, 729, 730, 769, 788, 843, 878, 882, 889, 901, 905, 910, 1017, 1041, 1055, 1124], "smaller": [36, 50, 154, 271, 709, 788, 896, 1124], "disk": [36, 48, 49, 50, 110, 271, 751, 788], "11": [36, 50, 94, 125, 131, 169, 271, 280, 354, 355, 358, 362, 369, 399, 494, 502, 511, 519, 533, 579, 599, 662, 667, 675, 679, 700, 701, 717, 721, 728, 739, 756, 788, 791, 878, 882, 889, 986, 1015, 1124], "22": [36, 50, 130, 271, 339, 359, 362, 369, 371, 372, 511, 512, 513, 515, 518, 519, 520, 571, 675, 679, 788, 791, 882, 889, 892, 1015, 1080, 1124, 1132], "comput": [36, 50, 75, 77, 81, 154, 167, 186, 233, 238, 250, 263, 271, 277, 287, 288, 289, 290, 291, 292, 298, 299, 300, 313, 318, 319, 321, 322, 323, 324, 325, 330, 374, 381, 416, 430, 436, 440, 441, 442, 444, 445, 446, 447, 452, 456, 458, 459, 460, 483, 493, 494, 498, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 529, 530, 531, 532, 536, 588, 589, 596, 601, 603, 607, 608, 609, 615, 617, 629, 656, 657, 669, 679, 715, 722, 724, 725, 759, 766, 769, 782, 788, 793, 799, 800, 801, 802, 803, 804, 810, 811, 812, 827, 835, 836, 837, 838, 839, 840, 845, 895, 896, 900, 940, 953, 959, 963, 964, 965, 967, 968, 969, 970, 975, 979, 981, 982, 983, 991, 1000, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1038, 1039, 1040, 1041, 1044, 1098, 1099, 1106, 1112, 1124], "512": [36, 271, 496, 679, 1000, 1124], "implement": [36, 94, 106, 139, 189, 257, 271, 415, 467, 497, 583, 644, 679, 776, 986, 1029, 1030, 1124], "v": [36, 56, 57, 154, 271, 523, 679, 1027, 1124], "At": [36, 271], "moment": [36, 148, 271, 416, 532, 679, 940, 1041, 1124], "write_t": [36, 271], "partition_col": [36, 107, 271], "write_to_dataset": [36, 271], "similar": [36, 135, 162, 186, 271, 365, 368, 493, 509, 669, 679, 709, 725, 788, 885, 888, 1013, 1124], "spark": [36, 271], "partit": [36, 107, 108, 116, 119, 122, 123, 184, 199, 271], "we": [36, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 168, 169, 186, 242, 271, 358, 362, 369, 431, 465, 467, 512, 513, 514, 515, 516, 518, 519, 520, 548, 555, 623, 624, 626, 627, 641, 666, 667, 669, 679, 703, 716, 717, 725, 729, 730, 741, 788, 798, 878, 882, 889, 913, 954, 986, 1057, 1064, 1124], "use_pyarrow_write_to_dataset": [36, 271], "first": [36, 69, 104, 105, 109, 118, 121, 130, 140, 166, 168, 171, 174, 186, 188, 189, 196, 200, 201, 225, 230, 231, 237, 238, 242, 255, 271, 295, 297, 326, 355, 358, 362, 396, 403, 404, 420, 431, 434, 435, 455, 466, 476, 495, 523, 535, 546, 549, 550, 556, 557, 612, 618, 632, 636, 669, 679, 700, 716, 719, 721, 725, 728, 738, 759, 766, 774, 788, 791, 807, 841, 843, 875, 878, 882, 912, 922, 923, 942, 954, 957, 958, 978, 985, 1027, 1055, 1057, 1058, 1059, 1065, 1066, 1095, 1103, 1124, 1132], "watermark": [36, 271], "partitioned_object": [36, 271], "calendar": [38, 39, 168, 169, 186, 242, 271, 346, 358, 362, 369, 373, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 862, 878, 882, 889, 893], "time_unit": [39, 41, 100, 334, 335, 342, 367, 372, 573, 623, 624, 625, 626, 627, 634, 791, 850, 851, 858, 887, 892, 1082], "time_zon": [39, 100, 336, 361, 369, 573, 623, 624, 625, 626, 627, 791, 849, 852, 857, 881, 889, 1082], "timezon": [39, 791], "m": [39, 41, 57, 185, 271, 333, 334, 335, 341, 342, 365, 367, 368, 372, 546, 571, 572, 573, 576, 623, 624, 625, 626, 627, 634, 724, 788, 791, 849, 850, 851, 857, 858, 885, 887, 888, 892, 1055, 1080, 1081, 1082, 1085], "zoneinfo": [39, 791], "run": [39, 48, 49, 50, 75, 76, 132, 134, 167, 170, 187, 189, 201, 215, 238, 247, 257, 271, 285, 326, 431, 467, 508, 509, 658, 679, 700, 701, 707, 709, 715, 718, 729, 730, 734, 739, 746, 751, 759, 765, 788, 791, 841, 954, 986, 1012, 1013, 1124, 1131, 1132], "available_timezon": [39, 791], "check": [39, 104, 105, 118, 126, 127, 163, 168, 169, 171, 172, 180, 182, 185, 271, 303, 306, 307, 400, 405, 426, 539, 544, 564, 679, 716, 717, 719, 720, 724, 729, 730, 788, 814, 817, 818, 918, 920, 924, 925, 927, 934, 935, 936, 938, 939, 949, 1028, 1048, 1053, 1073, 1124], "128": [40, 71, 1000, 1124], "bit": [40, 42, 43, 44, 45, 46, 47, 63, 64, 65, 66, 504, 539, 679, 1008, 1048, 1124], "neg": [40, 124, 168, 169, 171, 172, 174, 188, 218, 219, 221, 225, 271, 448, 449, 495, 525, 526, 533, 560, 679, 716, 717, 719, 720, 749, 750, 752, 767, 788, 912, 942, 971, 972, 1033, 1034, 1042, 1069, 1095, 1124], "scale": [40, 154, 271, 467, 495, 574, 679, 896, 1083, 1124], "experiment": [40, 76, 123, 214, 240, 241, 246, 271, 326, 362, 467, 512, 513, 514, 515, 516, 518, 519, 520, 679, 701, 745, 761, 764, 788, 826, 841, 882, 913, 1004, 1124], "progress": 40, "expect": [40, 85, 87, 92, 104, 118, 467, 641, 679, 727, 729, 730, 788], "32": [42, 45, 64, 71, 169, 182, 271, 484, 527, 679, 717, 788, 845, 879, 1000, 1020, 1124], "sign": [44, 45, 46, 47, 358, 504, 579, 679, 791, 878, 927, 1008, 1088, 1124], "maintain_ord": [48, 49, 50, 143, 167, 170, 199, 201, 236, 238, 242, 251, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 279, 301, 457, 467, 586, 593, 616, 679, 695, 700, 701, 707, 709, 715, 718, 739, 751, 753, 758, 759, 770, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 813, 980, 1109, 1124], "type_coercion": [48, 49, 50, 75, 76, 700, 701, 707, 709, 739, 751, 788], "predicate_pushdown": [48, 49, 50, 75, 76, 700, 701, 707, 709, 729, 730, 739, 751, 788], "projection_pushdown": [48, 49, 50, 75, 76, 700, 701, 707, 709, 729, 730, 739, 751, 788], "simplify_express": [48, 49, 50, 75, 76, 700, 701, 707, 709, 739, 751, 788], "no_optim": [48, 49, 50, 75, 76, 700, 701, 709, 729, 730, 739, 788], "slice_pushdown": [48, 49, 50, 75, 76, 700, 701, 707, 709, 729, 730, 739, 751, 788], "persist": [48, 49, 50, 59, 788], "larger": [48, 49, 50, 615, 788], "ram": [48, 49, 50, 788], "maintain": [48, 49, 50, 143, 236, 271, 301, 457, 523, 593, 679, 695, 753, 758, 788, 813, 980, 1027, 1109, 1124], "slightli": [48, 49, 50, 109, 788], "faster": [48, 49, 50, 106, 156, 232, 240, 271, 285, 467, 554, 594, 679, 788, 797, 798, 902, 986, 1063, 1124], "coercion": [48, 49, 50, 75, 76, 505, 679, 700, 701, 707, 709, 739, 751, 788], "optim": [48, 49, 50, 75, 76, 116, 118, 120, 121, 122, 183, 187, 200, 204, 210, 238, 271, 700, 701, 707, 709, 729, 730, 739, 751, 759, 767, 776, 788, 827, 1124], "predic": [48, 49, 50, 75, 76, 118, 120, 121, 122, 123, 159, 182, 209, 271, 386, 598, 632, 679, 700, 701, 707, 709, 712, 729, 730, 739, 742, 751, 767, 788, 906, 1029, 1030, 1124], "pushdown": [48, 49, 50, 75, 76, 700, 701, 707, 709, 729, 730, 739, 742, 751, 767, 788, 1029, 1030, 1124], "project": [48, 49, 50, 75, 76, 118, 120, 121, 122, 285, 534, 535, 679, 700, 701, 707, 709, 729, 730, 739, 742, 747, 751, 788], "turn": [48, 49, 50, 75, 76, 104, 105, 118, 577, 700, 701, 707, 709, 729, 730, 739, 788, 1086], "off": [48, 49, 50, 75, 76, 104, 105, 118, 700, 701, 707, 709, 729, 730, 739, 788], "certain": [48, 49, 50, 76, 83, 108, 119, 177, 242, 271, 675, 700, 701, 739, 788, 1124], "slice": [48, 49, 50, 70, 75, 76, 154, 174, 184, 225, 271, 435, 453, 467, 475, 477, 510, 512, 513, 514, 515, 516, 518, 519, 520, 679, 700, 701, 707, 709, 729, 730, 739, 751, 788, 896, 912, 958, 976, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1095, 1124], "lf": [48, 49, 50, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 766, 767, 788, 1131, 1132], "scan_csv": [48, 49, 50, 104, 105, 788], "my_larger_than_ram_fil": [48, 49, 50, 788], "data_pagesize_limit": [50, 788], "reduc": [50, 104, 105, 116, 118, 120, 121, 122, 258, 259, 261, 264, 527, 632, 679, 777, 778, 780, 783, 788, 988, 1003, 1035, 1094, 1124], "pressur": [50, 116, 121, 122, 527, 679, 788, 1035, 1124], "improv": [50, 110, 120, 788], "speed": [50, 285, 467, 679, 788, 1132], "limit": [50, 107, 118, 158, 271, 302, 315, 316, 317, 385, 391, 679, 711, 721, 788, 831, 832, 833, 905, 1124], "page": [50, 110, 116, 120, 122, 271, 679, 690, 788, 1124], "arrai": [51, 93, 97, 104, 105, 116, 154, 227, 232, 233, 271, 298, 299, 300, 301, 315, 316, 317, 321, 322, 323, 324, 325, 425, 439, 440, 441, 442, 443, 450, 451, 459, 512, 513, 515, 519, 524, 629, 679, 788, 810, 811, 812, 813, 831, 832, 833, 837, 838, 839, 840, 845, 896, 948, 962, 963, 964, 965, 966, 973, 974, 982, 983, 1016, 1017, 1019, 1022, 1023, 1024, 1031, 1036, 1100, 1105, 1106, 1114, 1124], "integer_list": 51, "float_list": 51, "wrap": [53, 100, 400, 679], "arbitrari": [53, 131, 791], "queri": [54, 56, 75, 76, 106, 107, 110, 118, 120, 121, 122, 156, 187, 200, 271, 465, 466, 467, 550, 679, 700, 701, 707, 709, 721, 728, 739, 751, 767, 771, 776, 788, 797, 902, 986, 1059, 1124, 1131], "eager": [54, 55, 56, 57, 58, 59, 168, 240, 271, 334, 336, 339, 340, 342, 344, 347, 348, 350, 352, 354, 355, 357, 358, 359, 361, 362, 364, 367, 369, 371, 372, 512, 513, 515, 518, 519, 520, 606, 610, 623, 624, 626, 627, 634, 638, 639, 652, 655, 661, 666, 667, 670, 678, 679, 716, 730, 788, 849, 850, 852, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 887, 889, 890, 891, 1131], "against": [54, 106, 431, 788, 954, 1131, 1132], "eagerli": [54, 455], "unset": [54, 130, 361, 455, 881], "init": [54, 137], "eager_execut": [54, 1131], "itself": [54, 129, 467, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 656, 657, 679, 727, 788, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1124, 1131], "impact": [54, 168, 171, 271, 716, 719, 788, 1131], "declar": [54, 93, 95, 96, 97, 99, 106, 113, 114, 271, 788], "godfath": 54, "1972": 54, "6_000_000": 54, "134_821_952": 54, "dark": 54, "knight": 54, "2008": 54, "185_000_000": 54, "533_316_061": 54, "schindler": 54, "1993": 54, "22_000_000": 54, "96_067_179": 54, "pulp": 54, "fiction": 54, "1994": 54, "8_000_000": 54, "107_930_000": 54, "shawshank": 54, "redempt": 54, "25_000_000": 54, "28_341_469": 54, "release_year": 54, "budget": 54, "gross": 54, "imdb_scor": 54, "ctx": [54, 55, 56, 57, 58, 59], "film": 54, "1990": 54, "BY": [54, 56], "desc": [54, 56], "AS": [54, 659, 1131], "decad": 54, "total_gross": 54, "n_film": 54, "2000": [54, 345, 347, 354, 355, 358, 363, 791, 861, 874, 875, 878, 883], "533316061": 54, "232338648": 54, "1970": [54, 123], "134821952": 54, "register_glob": [55, 57, 59, 1131], "register_mani": [55, 56, 59], "unregist": [55, 56, 57, 1131], "frame_data": [55, 58], "execut": [55, 56, 58, 77, 106, 187, 271, 309, 431, 596, 679, 696, 729, 730, 739, 788, 954, 1112, 1124, 1131], "collect": [55, 56, 59, 72, 75, 76, 106, 118, 119, 123, 131, 133, 150, 152, 187, 227, 238, 239, 271, 309, 380, 405, 467, 613, 630, 634, 661, 679, 693, 695, 697, 701, 703, 704, 705, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 745, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 766, 767, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 925, 1124, 1131, 1132], "global": [56, 60, 78, 124, 131, 136, 232, 271, 466, 679, 823, 825, 1131], "scope": [56, 59, 137, 689, 791, 1131], "automat": [56, 59, 93, 95, 96, 97, 99, 100, 104, 105, 106, 107, 109, 113, 114, 118, 131, 133, 135, 214, 246, 271, 309, 466, 566, 567, 568, 679, 745, 764, 788, 985, 1075, 1076, 1077, 1124, 1131], "map": [56, 57, 95, 96, 104, 105, 106, 107, 110, 111, 116, 117, 118, 120, 144, 153, 161, 183, 189, 205, 209, 210, 211, 228, 271, 362, 369, 464, 465, 466, 467, 493, 509, 596, 643, 679, 697, 706, 742, 788, 791, 843, 882, 889, 985, 986, 1013, 1112, 1124, 1131], "recent": [56, 494, 679, 1000, 1124, 1131], "df1": [56, 58, 59, 60, 69, 77, 78, 126, 156, 163, 194, 233, 244, 271, 735, 788], "x": [56, 57, 69, 77, 94, 100, 104, 105, 107, 118, 129, 131, 139, 154, 176, 179, 181, 185, 193, 201, 210, 211, 240, 271, 278, 280, 282, 328, 375, 376, 390, 393, 394, 395, 418, 425, 437, 460, 462, 464, 465, 467, 482, 484, 488, 489, 492, 496, 497, 505, 509, 529, 532, 562, 582, 583, 590, 592, 599, 601, 603, 607, 608, 618, 619, 621, 632, 641, 643, 646, 650, 654, 663, 679, 724, 730, 734, 752, 788, 791, 825, 905, 938, 986, 1038, 1041, 1071, 1107, 1124, 1131], "df2": [56, 58, 59, 60, 69, 77, 78, 126, 156, 163, 233, 244, 271], "join": [56, 60, 69, 75, 76, 77, 78, 186, 241, 271, 399, 493, 679, 700, 701, 707, 709, 725, 739, 751, 761, 766, 788], "named_fram": [57, 1131], "lf1": [57, 59], "o": [57, 110, 120, 308, 326, 545, 591, 679, 819, 841, 1054, 1075, 1108, 1124], "lf2": [57, 59, 788], "p": [57, 71, 200, 271, 495, 661, 679, 738, 788], "q": [57, 211, 271, 661], "r": [57, 495, 541, 545, 546, 547, 548, 556, 679, 791, 1050, 1054, 1055, 1056, 1057, 1065], "lf3": [57, 788], "lf4": [57, 788], "either": [57, 131, 169, 182, 186, 187, 191, 199, 209, 224, 232, 271, 499, 571, 600, 609, 661, 679, 717, 725, 727, 788, 791, 1004, 1080, 1124, 1132], "tbl1": [57, 59], "tbl2": [57, 59], "tbl3": 57, "tbl4": 57, "statement": [58, 669], "hello_world": 58, "baz": [58, 177, 178, 201, 239, 271, 548, 561, 563, 723, 760, 788, 791, 1057, 1072], "hello_data": 58, "foo_bar": [58, 471, 474, 561, 641], "registr": [59, 690], "lifetim": [59, 137, 689], "context": [59, 60, 135, 197, 253, 271, 279, 285, 309, 320, 386, 431, 465, 467, 475, 534, 535, 596, 604, 616, 631, 634, 640, 644, 655, 658, 678, 679, 689, 690, 766, 772, 788, 954, 1112, 1124, 1131], "manag": [59, 60, 689, 690, 1131], "often": [59, 137, 168, 169, 171, 172, 271, 427, 428, 505, 679, 716, 717, 719, 720, 788, 950, 951], "want": [59, 76, 96, 156, 189, 197, 271, 315, 316, 317, 369, 386, 465, 466, 467, 509, 512, 513, 514, 515, 516, 518, 519, 520, 618, 623, 632, 652, 655, 670, 679, 700, 701, 721, 728, 788, 791, 797, 831, 832, 833, 889, 902, 986, 1013, 1105, 1124], "df0": [59, 194, 271, 735, 788], "exit": [59, 60, 137, 1131], "construct": [59, 93, 95, 96, 97, 98, 99, 271, 392, 466, 652, 655, 670, 675, 679, 703, 714, 741, 788, 823, 1124], "through": [59, 94, 675, 791, 1124], "tbl0": 59, "remain": [59, 104, 105, 118, 152, 154, 159, 271, 331, 332, 386, 562, 563, 679, 705, 712, 729, 730, 788, 846, 847, 896, 906, 1071, 1072, 1124], "text": [59, 554, 556, 557, 659, 1063, 1132], "misc": 59, "testing1234": 59, "test1": 59, "test2": 59, "test3": 59, "temporarili": [60, 135, 137, 168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "cach": [60, 75, 76, 78, 110, 118, 120, 122, 126, 127, 136, 466, 512, 513, 514, 515, 516, 518, 519, 520, 571, 572, 573, 576, 679, 689, 700, 701, 707, 709, 739, 751, 788, 823, 1080, 1081, 1082, 1085], "categori": [60, 78, 230, 271, 311, 312, 327, 499, 679, 822, 824, 842, 913, 1004, 1124], "until": [60, 187, 271], "finish": [60, 81, 156, 271, 797, 902, 1124], "outermost": 60, "color": [60, 78, 257, 303, 305, 306, 307, 596, 679, 776, 1112, 1124], "red": [60, 78, 257, 596, 679, 776, 1112, 1124], "green": [60, 78, 257, 596, 679, 776, 1112, 1124], "blue": [60, 78, 303, 305, 306, 307, 596, 679, 1112, 1124], "orang": [60, 78, 147, 253, 254, 256, 258, 259, 261, 263, 264, 271, 772, 773, 775, 777, 778, 780, 782, 783], "uint8": [60, 78, 106, 128, 130, 144, 231, 232, 240, 271, 324, 325, 466, 584, 599, 679, 697, 788, 791, 839, 840, 1094, 1124, 1132], "yellow": [60, 78, 303, 305, 306, 307], "black": [60, 78, 189, 271, 303, 305, 306, 307], "succe": [60, 104, 105, 118], "df_join": [60, 78], "cat": [60, 78, 231, 271, 327, 499, 539, 541, 575, 578, 590, 614, 674, 679, 791, 842, 913, 1004, 1048, 1050, 1084, 1087, 1120, 1124], "u8": [60, 78, 144, 230, 231, 240, 271, 466, 599, 679, 697, 788, 791, 1101, 1124, 1132], "composit": [61, 130, 1132], "schemadict": [61, 93, 95, 96, 97, 98, 99, 104, 106, 107, 109, 115, 118, 213, 271, 661, 729, 730, 744, 771, 776, 788], "struct_seri": [61, 776], "dai": [62, 168, 169, 171, 184, 186, 242, 271, 354, 355, 358, 359, 362, 369, 371, 512, 513, 514, 515, 516, 518, 519, 520, 622, 623, 624, 625, 626, 627, 628, 666, 667, 679, 716, 717, 719, 725, 788, 791, 874, 875, 878, 879, 882, 889, 891], "static": [67, 771, 776], "utf": 68, "frametyp": [69, 1131], "joinstrategi": [69, 185, 271, 724, 788], "outer": [69, 77, 185, 271, 724, 788], "descend": [69, 143, 216, 222, 236, 271, 295, 450, 502, 524, 534, 535, 596, 609, 679, 695, 748, 753, 758, 788, 807, 935, 973, 1006, 1031, 1043, 1112, 1124], "fill": [69, 77, 145, 157, 158, 219, 240, 271, 302, 322, 325, 384, 385, 391, 399, 512, 513, 515, 519, 526, 552, 558, 579, 633, 652, 655, 670, 679, 710, 711, 750, 766, 788, 904, 905, 916, 997, 1016, 1017, 1019, 1022, 1023, 1024, 1034, 1061, 1067, 1088, 1124], "sort": [69, 70, 126, 130, 143, 168, 169, 171, 172, 186, 194, 200, 201, 216, 236, 242, 255, 265, 271, 295, 312, 386, 467, 493, 513, 514, 515, 516, 518, 520, 524, 535, 596, 598, 609, 644, 679, 695, 707, 716, 717, 719, 720, 725, 735, 738, 739, 748, 751, 758, 774, 784, 788, 791, 807, 824, 935, 1031, 1109, 1112, 1124, 1132], "origin": [69, 104, 105, 152, 159, 238, 271, 331, 332, 361, 386, 415, 466, 493, 504, 505, 506, 540, 541, 546, 550, 552, 558, 579, 607, 608, 679, 705, 712, 759, 788, 842, 846, 847, 881, 906, 985, 1004, 1010, 1049, 1050, 1055, 1059, 1061, 1067, 1088, 1124], "In": [69, 76, 108, 119, 122, 131, 133, 137, 154, 156, 168, 169, 171, 172, 189, 197, 232, 271, 467, 623, 679, 701, 716, 717, 719, 720, 788, 797, 896, 902, 1007, 1124], "duplic": [69, 82, 179, 185, 186, 238, 271, 280, 401, 415, 499, 679, 724, 725, 759, 788, 919, 1004, 1124], "behaviour": [69, 77, 109, 152, 271, 539, 546, 547, 556, 592, 679, 705, 788, 1048, 1055, 1056, 1065], "suitabl": [69, 77, 129, 189, 271, 467, 523, 679, 986, 1027, 1124, 1132], "get": [69, 76, 101, 111, 117, 123, 135, 143, 147, 153, 161, 164, 165, 168, 169, 171, 172, 174, 175, 179, 181, 182, 188, 196, 209, 213, 217, 221, 225, 236, 245, 255, 265, 271, 279, 293, 294, 295, 297, 301, 311, 321, 322, 323, 324, 325, 342, 387, 396, 414, 417, 420, 433, 438, 439, 457, 468, 469, 470, 475, 477, 481, 486, 487, 500, 508, 533, 537, 551, 554, 584, 585, 593, 597, 623, 631, 636, 640, 644, 645, 646, 647, 648, 649, 650, 660, 664, 668, 679, 695, 701, 702, 706, 713, 716, 717, 719, 720, 721, 726, 728, 744, 752, 756, 758, 763, 774, 784, 788, 805, 806, 807, 808, 809, 813, 822, 829, 837, 838, 839, 840, 858, 909, 912, 917, 919, 937, 942, 956, 961, 962, 980, 987, 989, 990, 992, 995, 996, 1001, 1002, 1005, 1012, 1042, 1045, 1060, 1063, 1095, 1100, 1101, 1109, 1113, 1114, 1124], "speedup": [69, 183, 189, 271, 467, 679, 986, 1124], "receiv": [69, 118, 189, 200, 257, 271, 467, 495, 679, 738, 788, 1132], "now": [69, 169, 271, 309, 679, 717, 788, 1082], "One": [69, 149, 197, 201, 271, 282, 492, 659, 679, 791, 843, 1124], "whose": [69, 186, 201, 271, 380, 630, 679, 725, 788], "uniqu": [69, 128, 129, 130, 133, 141, 142, 181, 185, 197, 211, 262, 271, 286, 297, 327, 414, 485, 499, 571, 572, 573, 576, 594, 596, 605, 651, 679, 693, 694, 724, 781, 788, 809, 842, 843, 937, 993, 1004, 1080, 1081, 1082, 1085, 1110, 1112, 1124], "post": 69, "constrain": [69, 152, 271, 705, 788], "newli": 69, "boolean": [69, 143, 159, 162, 187, 222, 236, 271, 281, 282, 283, 303, 306, 307, 345, 386, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 422, 426, 490, 492, 535, 549, 598, 599, 609, 610, 661, 669, 679, 695, 699, 712, 727, 753, 758, 788, 791, 795, 796, 808, 814, 816, 861, 906, 917, 918, 919, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 937, 944, 945, 949, 998, 1001, 1002, 1029, 1048, 1105, 1115, 1124], "know": [69, 106, 455, 554, 1063, 1105, 1114, 1124], "2022": [69, 144, 149, 166, 168, 169, 186, 242, 271, 335, 343, 351, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 571, 623, 624, 626, 627, 628, 634, 666, 667, 679, 697, 716, 717, 725, 788, 791, 851, 862, 878, 882, 889, 1080], "y": [69, 77, 94, 100, 129, 131, 139, 154, 179, 181, 185, 193, 201, 210, 211, 240, 271, 278, 280, 282, 365, 368, 375, 376, 393, 394, 418, 425, 437, 462, 464, 467, 488, 489, 492, 497, 505, 509, 571, 572, 573, 583, 592, 599, 601, 603, 607, 608, 621, 628, 641, 646, 650, 663, 679, 724, 734, 752, 788, 791, 825, 885, 888, 1080, 1081, 1082], "df3": [69, 271], "set_tbl_format": 69, "09": [69, 131, 169, 271, 335, 354, 355, 574, 623, 667, 717, 788, 791, 1083], "01": [69, 131, 144, 149, 166, 168, 169, 242, 271, 333, 334, 335, 336, 340, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 512, 513, 515, 518, 519, 520, 571, 572, 573, 576, 623, 624, 626, 628, 679, 697, 716, 717, 788, 791, 850, 851, 852, 853, 854, 856, 858, 859, 860, 865, 866, 867, 869, 871, 872, 874, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 892, 1080, 1081, 1082, 1085], "02": [69, 144, 166, 168, 169, 186, 242, 271, 334, 335, 342, 344, 352, 354, 355, 358, 361, 362, 364, 367, 369, 372, 512, 513, 514, 515, 516, 518, 519, 520, 521, 571, 572, 573, 576, 623, 624, 626, 627, 628, 666, 667, 679, 697, 716, 717, 725, 788, 791, 850, 851, 853, 854, 858, 859, 860, 865, 866, 871, 872, 874, 875, 876, 878, 881, 882, 884, 886, 887, 889, 978, 1080, 1081, 1082, 1085], "03": [69, 100, 144, 168, 169, 242, 271, 334, 335, 336, 340, 342, 344, 352, 354, 355, 358, 361, 362, 363, 364, 365, 367, 368, 369, 372, 512, 513, 515, 518, 519, 520, 572, 576, 623, 624, 626, 628, 679, 697, 716, 717, 788, 850, 851, 852, 856, 858, 859, 860, 865, 866, 872, 874, 875, 876, 881, 882, 884, 885, 887, 888, 1081, 1085], "af1": 69, "af2": 69, "af3": 69, "keep": [69, 104, 105, 118, 238, 241, 242, 271, 415, 466, 612, 679, 759, 761, 788, 985, 1124], "easili": [69, 106, 214, 246, 250, 271, 661, 675, 745, 764, 769, 788], "dot": [69, 675, 679, 751, 788, 1124], "product": [69, 148, 271, 324, 330, 679, 709, 788, 839, 845, 1124], "fill_nul": [69, 157, 271, 679, 710, 766, 788, 1124], "sum_horizont": [69, 662], "167": 69, "47": 69, "callabl": [70, 71, 72, 73, 118, 140, 162, 189, 200, 252, 257, 271, 285, 455, 463, 464, 465, 467, 495, 510, 511, 604, 618, 619, 632, 642, 643, 644, 654, 679, 729, 730, 738, 771, 776, 788, 798, 978, 986, 1014, 1015, 1124], "decor": [70, 71, 72, 73, 131, 133, 189, 271, 467, 679, 689, 690, 986, 1124], "under": [70, 71, 72, 73, 671, 672, 674, 675, 680, 681, 685, 686, 687, 1116, 1118, 1120, 1125, 1128, 1129, 1130], "by_first_letter_of_column_nam": 70, "f": [70, 105, 149, 166, 184, 227, 237, 240, 271, 278, 455, 527, 545, 571, 573, 604, 613, 642, 679, 978, 1054, 1080, 1082], "fromkei": [70, 72], "by_first_letter_of_column_valu": 70, "starts_with": [70, 303, 306, 539, 544, 791, 1053], "to_seri": [70, 164, 271, 571, 610, 655, 1080], "xx": [70, 72, 130, 133, 791], "xy": [70, 72], "yy": [70, 72, 130, 133, 791], "yz": [70, 72], "b1": [70, 72], "b2": [70, 72], "pow_n": 71, "powersofn": 71, "next": [71, 168, 169, 186, 242, 271, 302, 358, 362, 369, 502, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889, 1006, 1124], "ceil": [71, 679, 1124], "previou": [71, 137, 494, 497, 581, 583, 679, 797, 1000, 1124], "floor": [71, 679, 1124], "nearest": [71, 186, 203, 263, 271, 314, 389, 399, 500, 516, 653, 679, 725, 740, 782, 788, 828, 908, 916, 1005, 1020, 1124], "24": [71, 125, 154, 168, 169, 186, 189, 242, 271, 324, 326, 339, 344, 358, 359, 362, 369, 371, 484, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 841, 860, 878, 882, 889, 939, 1124], "001": [71, 347, 348, 350, 357, 628, 867, 869, 877], "next_pow2": 71, "prev_pow2": 71, "nearest_pow2": 71, "split_by_column_dtyp": 72, "collect_al": [72, 76, 701, 788], "31": [73, 131, 335, 339, 340, 343, 351, 354, 358, 571, 622, 623, 625, 634, 641, 791, 849, 851, 855, 856, 874, 1080, 1132], "42": [73, 169, 173, 194, 271, 717, 735, 788, 911, 1124], "961": 73, "1764": 73, "4160": 73, "build": [74, 94, 791, 1132], "wa": 74, "compil": [74, 423, 424, 946, 947], "gate": 74, "info": [74, 108, 119, 125], "otherwis": [74, 106, 130, 135, 189, 194, 211, 214, 257, 271, 304, 315, 316, 317, 327, 377, 378, 379, 455, 467, 495, 499, 504, 513, 514, 515, 516, 518, 520, 539, 542, 600, 644, 669, 679, 735, 745, 776, 788, 815, 831, 832, 833, 842, 897, 898, 899, 978, 986, 1004, 1008, 1029, 1030, 1048, 1051, 1124], "depend": [74, 106, 125, 423, 424, 467, 475, 499, 502, 628, 631, 634, 640, 679, 946, 947, 1004, 1006, 1124, 1132], "host": [74, 104, 110, 112, 116, 120, 122], "git": 74, "lazy_fram": [75, 76], "comm_subplan_elim": [75, 76, 700, 701, 707, 709, 739, 751, 788], "comm_subexpr_elim": [75, 76, 309, 679, 700, 701, 707, 709, 739, 751, 788], "graph": [75, 187, 271, 722, 766, 788], "parallel": [75, 77, 102, 107, 116, 122, 168, 171, 186, 187, 200, 215, 247, 271, 326, 431, 596, 669, 679, 690, 716, 719, 724, 725, 746, 765, 776, 788, 841, 954, 1112, 1124], "threadpool": [75, 135], "Will": [75, 76, 700, 701, 707, 709, 739, 751, 788, 1124], "try": [75, 76, 88, 90, 104, 105, 110, 116, 118, 120, 122, 700, 701, 707, 709, 739, 751, 788], "branch": [75, 76, 700, 701, 707, 709, 739, 751, 788], "subplan": [75, 76, 700, 701, 707, 709, 739, 751, 788], "union": [75, 76, 77, 447, 700, 701, 707, 709, 739, 751, 788, 791, 970], "subexpress": [75, 76, 700, 701, 707, 709, 739, 751, 788], "reus": [75, 76, 700, 701, 707, 709, 739, 751, 788], "part": [75, 76, 93, 131, 547, 562, 563, 700, 701, 707, 709, 739, 751, 766, 788, 1056, 1071, 1072], "fashion": [75, 76, 185, 271, 700, 701, 707, 709, 739, 751, 788], "alpha": [75, 76, 285, 377, 378, 379, 679, 700, 701, 707, 709, 739, 751, 788, 897, 898, 899, 1124], "gevent": [76, 701, 788], "_geventdataframeresult": [76, 701, 788], "await": [76, 701, 788], "asynchron": [76, 701, 788], "them": [76, 93, 95, 96, 97, 99, 113, 114, 115, 118, 155, 156, 168, 169, 186, 194, 242, 271, 400, 437, 486, 487, 493, 613, 623, 624, 626, 627, 666, 667, 679, 701, 708, 716, 717, 725, 735, 788, 791, 797, 902, 960, 995, 996, 1124], "schedul": [76, 701, 788], "insid": [76, 701, 788], "almost": [76, 189, 257, 271, 571, 572, 573, 701, 788, 986, 1080, 1081, 1082, 1124], "instantli": [76, 701, 788], "asyncio": [76, 701, 788], "releas": [76, 285, 467, 679, 701, 788, 1132], "greenlet": [76, 701, 788], "task": [76, 701, 788], "being": [76, 104, 105, 118, 123, 144, 155, 230, 240, 241, 271, 285, 326, 362, 512, 513, 514, 515, 516, 518, 519, 520, 629, 679, 697, 701, 708, 709, 761, 788, 826, 841, 882, 913, 1004, 1124, 1132], "wrapper": [76, 701, 788], "event": [76, 701, 788], "asyncresult": [76, 701, 788], "timeout": [76, 701, 788], "break": [76, 123, 240, 241, 271, 285, 326, 327, 362, 512, 513, 514, 515, 516, 518, 519, 520, 679, 701, 761, 788, 826, 841, 842, 882, 913, 1004, 1124], "collect_async": [76, 788], "set_except": [76, 701, 788], "futur": [76, 139, 623, 701, 788], "rerais": [76, 701, 788], "item": [77, 105, 166, 209, 212, 271, 382, 426, 434, 437, 522, 563, 679, 901, 949, 957, 960, 1026, 1072, 1124], "iter": [77, 93, 132, 134, 143, 167, 168, 169, 170, 171, 172, 183, 184, 209, 210, 211, 214, 215, 216, 222, 236, 237, 246, 247, 249, 250, 271, 326, 493, 535, 601, 603, 609, 612, 613, 614, 621, 646, 650, 658, 661, 663, 675, 679, 695, 715, 716, 717, 718, 719, 720, 745, 746, 748, 753, 758, 764, 765, 769, 788, 841, 1124, 1132], "polarstyp": 77, "concatmethod": 77, "vertic": [77, 156, 240, 244, 271, 538, 1047], "rechunk": [77, 93, 98, 104, 105, 110, 112, 116, 118, 120, 121, 122, 156, 271, 679, 797, 829, 902, 992, 1124], "combin": [77, 88, 90, 168, 169, 173, 186, 242, 271, 282, 296, 369, 492, 553, 559, 565, 566, 567, 568, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 751, 788, 882, 889, 1062, 1068, 1074, 1075, 1076, 1077], "concaten": [77, 162, 200, 271, 495, 613, 614, 679, 738, 788, 829, 992, 1124], "vertical_relax": 77, "diagon": [77, 237, 271], "vstack": [77, 156, 271], "coerc": [77, 505, 679], "equal": [77, 78, 104, 105, 118, 126, 127, 143, 163, 168, 171, 186, 194, 236, 271, 309, 327, 375, 376, 393, 418, 455, 489, 499, 505, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 551, 552, 558, 579, 656, 657, 675, 679, 695, 716, 719, 725, 735, 753, 758, 788, 842, 978, 1004, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1060, 1061, 1067, 1088, 1124, 1132], "supertyp": [77, 158, 271, 284, 679, 711, 788], "find": [77, 160, 271, 523, 679, 1027, 1124], "miss": [77, 104, 105, 118, 157, 271, 302, 377, 378, 379, 391, 409, 411, 679, 710, 788, 897, 898, 899, 1114, 1124], "stack": [77, 176, 244, 271], "don": [77, 189, 238, 240, 271, 285, 326, 431, 467, 493, 679, 759, 788, 791, 841, 954, 986, 1028, 1114, 1124], "auto": [77, 93, 95, 96, 97, 99, 113, 114, 116, 122, 237, 271, 788, 1132], "logic": [77, 189, 257, 271, 281, 283, 467, 590, 600, 602, 644, 679, 703, 714, 724, 741, 747, 768, 776, 788, 795, 796, 986, 1107, 1124], "align_fram": 77, "pattern": [77, 104, 105, 118, 120, 121, 122, 183, 271, 473, 539, 540, 541, 546, 547, 548, 556, 557, 776, 791, 1029, 1030, 1048, 1049, 1050, 1055, 1056, 1057, 1065, 1066, 1124], "collis": 77, "need": [77, 100, 104, 105, 107, 126, 127, 168, 169, 171, 172, 211, 220, 232, 271, 455, 466, 527, 551, 574, 628, 652, 655, 670, 679, 716, 717, 719, 720, 788, 1035, 1060, 1083, 1124, 1132], "sure": [77, 93, 98, 104, 105, 110, 112, 116, 168, 169, 171, 172, 204, 271, 716, 717, 719, 720, 788], "contigu": [77, 93, 98, 104, 105, 110, 112, 116, 118, 120, 121, 122, 204, 271], "relev": 77, "df_h1": 77, "l1": 77, "l2": 77, "df_h2": 77, "r1": 77, "r2": 77, "r3": 77, "df_d1": 77, "df_d2": 77, "df_a1": 77, "df_a2": 77, "df_a3": 77, "disabl": [78, 136, 183, 271], "encount": [79, 168, 171, 271, 486, 487, 549, 550, 615, 618, 632, 679, 716, 719, 788, 995, 996, 1058, 1059, 1124], "least": [85, 131, 494, 679, 1000, 1124], "unexpect": [86, 271, 465, 467, 679, 986, 1124], "caus": [86, 94, 104, 105, 118, 139, 156, 271, 797, 902, 1124], "panic": 86, "mismatch": [88, 114], "incompat": 90, "chunkedarrai": [93, 196, 271, 845, 1124], "recordbatch": [93, 184, 271], "schemadefinit": [93, 95, 96, 97, 99, 113, 114, 271, 788], "schema_overrid": [93, 95, 96, 97, 98, 99, 106, 107, 109, 113, 114, 115, 184, 232, 271, 301, 788, 791, 813], "copi": [93, 94, 139, 145, 146, 184, 227, 232, 233, 246, 271, 383, 579, 679, 698, 699, 764, 788, 830, 834, 903, 1088, 1100, 1105, 1106, 1124], "closest": 93, "pair": [93, 95, 96, 97, 99, 113, 114, 130, 205, 271, 742, 788, 1132], "sever": [93, 95, 96, 97, 99, 113, 114, 271, 788, 1132], "wai": [93, 95, 96, 97, 99, 113, 114, 167, 184, 200, 222, 250, 271, 493, 495, 535, 546, 675, 679, 715, 738, 753, 769, 776, 788, 1055], "form": [93, 95, 96, 97, 99, 113, 114, 183, 210, 240, 271, 494, 679, 788, 1000, 1124], "dimens": [93, 95, 97, 99, 113, 114, 271, 506, 679, 788, 1010, 1124], "supportsinterchang": 94, "allow_copi": [94, 139], "interchang": [94, 139], "__dataframe__": 94, "convers": [94, 109, 139, 183, 184, 210, 211, 229, 233, 271, 571, 572, 573, 576, 690, 1080, 1081, 1082, 1085, 1104, 1105, 1106, 1124], "detail": [94, 106, 107, 126, 127, 139, 271, 788, 1132], "latest": [94, 108, 119, 139, 361, 369, 391, 476, 571, 573, 625, 679, 881, 889, 1080, 1082], "from_panda": 94, "from_arrow": 94, "effici": [94, 106, 109, 184, 271], "reli": 94, "therefor": [94, 154, 271, 467, 669, 679, 896, 1124], "becaus": [94, 114, 154, 168, 171, 187, 189, 240, 257, 271, 431, 716, 719, 776, 788, 798, 896, 954, 986, 1124], "convert": [94, 98, 108, 109, 115, 119, 139, 228, 229, 230, 231, 232, 235, 271, 328, 336, 365, 368, 455, 464, 501, 548, 555, 571, 572, 573, 574, 576, 679, 714, 788, 825, 852, 885, 888, 978, 1057, 1064, 1080, 1081, 1082, 1083, 1085, 1093, 1103, 1104, 1105, 1106, 1114, 1124], "panda": [94, 98, 125, 168, 233, 271, 354, 355, 590, 679, 716, 788, 874, 875, 1106, 1107, 1124], "pd": [94, 98, 590, 679, 1106, 1107, 1124], "df_pd": 94, "dfi": [94, 139], "clone": [95, 96, 97, 98, 99, 145, 232, 233, 271, 698, 788, 830, 1104, 1105, 1106, 1114, 1124], "dimension": [95, 97, 99, 232, 271, 788, 1124], "infer_schema_length": [96, 99, 104, 105, 109, 118, 121, 271, 549, 788, 1058], "NOT": [96, 126, 127, 474, 1131], "typic": [96, 189, 271, 341, 791, 857, 986, 1124], "clearer": 96, "load": [96, 98, 106, 108, 109, 115, 119, 132, 134, 271, 690, 721, 728, 788, 1132], "_partial_": [96, 271, 788], "omit": [96, 100, 129, 131, 133, 137, 197, 211, 271, 666, 667, 791], "mani": [96, 99, 107, 156, 271, 549, 797, 902, 1058, 1124], "scan": [96, 99, 104, 105, 118, 119, 120, 121, 122, 123, 168, 169, 171, 172, 271, 709, 716, 717, 719, 720, 721, 728, 788], "slow": [96, 99, 104, 105, 118, 285, 326, 467, 511, 679, 776, 841, 1015, 1124], "partial": [96, 104, 118], "present": [96, 126, 131, 405, 679, 709, 788, 1114, 1124], "np": [97, 159, 232, 271, 586, 679, 788, 921, 926, 930, 931, 1096, 1124], "ndarrai": [97, 159, 232, 271, 586, 679, 788, 845, 1027, 1030, 1096, 1105, 1124], "numpi": [97, 125, 148, 183, 210, 211, 229, 232, 233, 271, 486, 487, 511, 679, 788, 921, 926, 930, 931, 995, 996, 1015, 1105, 1106, 1114, 1124], "columnar": [97, 99, 183, 210, 271], "interpret": [97, 99, 104, 105, 118, 271, 788], "yield": [97, 99, 104, 105, 118, 154, 156, 237, 271, 493, 679, 788, 797, 896, 902, 1124], "conclus": [97, 99, 271, 788], "nan_to_nul": [98, 271, 788, 1124], "include_index": 98, "instal": [98, 104, 105, 107, 110, 112, 116, 125, 148, 232, 233, 271, 751, 788, 1106, 1124], "nan": [98, 126, 127, 131, 139, 157, 233, 271, 331, 332, 375, 376, 384, 393, 394, 399, 409, 411, 412, 413, 418, 462, 468, 481, 486, 487, 488, 489, 511, 592, 615, 679, 710, 788, 800, 804, 846, 847, 904, 930, 931, 995, 996, 1015, 1105, 1106, 1124, 1132], "pd_df": 98, "pd_seri": 98, "tbl": [100, 102, 105], "reconstruct": 100, "repr": [100, 131, 133], "trim": 100, "whitespac": [100, 553, 559, 565, 566, 567, 568, 1062, 1068, 1074, 1075, 1076, 1077], "prompt": 100, "extract": [100, 337, 339, 340, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 363, 364, 366, 370, 371, 373, 495, 547, 548, 549, 550, 679, 853, 854, 855, 856, 859, 860, 862, 866, 867, 868, 869, 871, 872, 873, 876, 877, 879, 880, 883, 884, 886, 890, 891, 893, 1056, 1057, 1058, 1059], "to_init_repr": [100, 271, 1124], "truncat": [100, 104, 118, 166, 168, 171, 183, 210, 211, 229, 271, 716, 719, 739, 788], "identifi": [100, 193, 199, 238, 271, 734, 759, 788], "compound": [100, 211, 271, 791], "struct": [100, 197, 214, 235, 239, 246, 271, 327, 455, 466, 499, 508, 509, 548, 549, 562, 563, 596, 618, 619, 621, 643, 679, 745, 760, 764, 776, 788, 842, 978, 1004, 1012, 1057, 1058, 1069, 1071, 1072, 1124], "neither": [100, 109, 115, 212, 271, 455, 978], "source_ac": 100, "source_cha": 100, "ident": [100, 145, 146, 271, 365, 508, 509, 679, 698, 699, 788, 830, 834, 885, 1012, 1013, 1124], "timestamp": [100, 361, 634, 881], "tor_id": 100, "nnel_id": 100, "\u03bc": [100, 131, 168, 169, 183, 186, 210, 211, 229, 242, 271, 333, 334, 335, 336, 340, 341, 343, 344, 347, 348, 350, 351, 352, 354, 355, 357, 358, 361, 362, 363, 364, 365, 368, 369, 372, 512, 513, 515, 518, 519, 520, 571, 573, 626, 628, 634, 679, 716, 717, 725, 788, 791, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 865, 866, 867, 869, 871, 872, 874, 875, 876, 877, 878, 881, 882, 884, 886, 887, 889, 892, 1080, 1082], "asia": [100, 791, 853, 854, 886], "tokyo": [100, 791], "123456780": 100, "9876543210": 100, "56": [100, 588, 679], "59": [100, 130, 335, 343, 351, 363, 625, 665, 666, 667, 791, 851, 871, 883], "663053": 100, "jst": [100, 791], "803065983": 100, "2055938745": 100, "38": [100, 131], "18": [100, 142, 169, 194, 271, 309, 325, 362, 369, 372, 399, 415, 430, 436, 452, 456, 611, 623, 666, 679, 694, 714, 717, 735, 739, 741, 768, 788, 791, 797, 892, 953, 959, 975, 979, 1082, 1124], "050545": 100, "source_actor_id": 100, "source_channel_id": 100, "sr": 100, "to_list": [100, 169, 271, 717, 788, 1048, 1124], "datatypeclass": 101, "uint32": [101, 125, 144, 154, 271, 295, 339, 343, 347, 349, 351, 353, 356, 359, 360, 363, 370, 371, 423, 424, 439, 505, 540, 541, 551, 554, 586, 590, 679, 697, 788, 791, 808, 820, 855, 859, 866, 868, 871, 873, 876, 879, 880, 883, 890, 891, 896, 927, 946, 947, 962, 1028, 1049, 1050, 1060, 1063, 1107, 1124], "regular": [101, 183, 209, 210, 242, 271, 380, 539, 540, 541, 546, 547, 548, 556, 557, 630, 675, 679, 791, 1048, 1049, 1050, 1055, 1056, 1057, 1065, 1066], "uint64": [101, 173, 271, 395, 423, 424, 504, 679, 911, 946, 947, 1008, 1124], "bigidx": 101, "read": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 156, 271, 392, 465, 669, 679, 703, 709, 714, 741, 788, 797, 902, 1124], "over": [102, 104, 105, 108, 118, 131, 140, 156, 183, 184, 189, 209, 210, 211, 237, 249, 252, 257, 271, 285, 326, 385, 464, 465, 467, 475, 477, 478, 479, 502, 512, 513, 514, 515, 516, 518, 519, 520, 604, 618, 619, 632, 642, 643, 644, 654, 679, 771, 776, 791, 797, 798, 841, 902, 986, 1016, 1017, 1019, 1023, 1124], "fetch": [102, 106, 118, 187, 271, 698, 700, 721, 728, 788], "ideal": 102, "read_csv_batch": [102, 691], "tpch": [102, 105], "tables_scale_100": [102, 105], "lineitem": [102, 105, 107], "try_parse_d": [102, 104, 105, 118], "n_row": [103, 104, 105, 110, 112, 116, 118, 120, 121, 122, 184, 271, 709, 788], "handler": [103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 117, 703, 741, 788], "builtin": [103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 117, 703, 741, 788], "accept": [103, 104, 105, 108, 110, 112, 116, 143, 167, 170, 214, 215, 222, 236, 246, 247, 250, 271, 278, 380, 400, 466, 493, 535, 599, 601, 603, 609, 612, 613, 614, 621, 630, 646, 650, 658, 661, 663, 669, 675, 679, 695, 715, 718, 745, 746, 753, 758, 764, 765, 769, 788, 917, 1124], "stop": [103, 104, 105, 110, 112, 116, 118, 120, 121, 122, 512, 513, 515, 518, 519, 520, 679, 850, 852, 858, 859, 866, 868, 871, 876, 882, 887], "textio": 104, "new_column": [104, 105, 109, 118, 206, 271], "comment_char": [104, 105, 118], "quote_char": [104, 105, 118], "skip_row": [104, 105, 118], "missing_utf8_is_empty_str": [104, 105, 118], "ignore_error": [104, 105, 114, 118], "n_thread": [104, 105], "8192": 104, "csvencod": [104, 105, 118], "low_memori": [104, 105, 116, 118, 121, 122], "skip_rows_after_head": [104, 105, 118], "row_count_nam": [104, 105, 110, 112, 116, 118, 120, 121, 122], "row_count_offset": [104, 105, 110, 112, 116, 118, 120, 121, 122], "sample_s": [104, 105], "eol_char": [104, 105, 118], "raise_if_empti": [104, 105, 109, 115, 118], "truncate_ragged_lin": [104, 118], "fsspec": [104, 105, 110, 112, 116, 119, 120, 122, 125], "remot": [104, 105, 110, 112, 116], "autogener": [104, 105, 118], "column_x": [104, 105, 118], "enumer": [104, 105, 118, 184, 271], "shorter": [104, 105], "comment": [104, 105, 118], "instanc": [104, 105, 118, 131, 133, 137, 144, 156, 162, 271, 310, 476, 512, 513, 514, 515, 516, 518, 519, 520, 618, 632, 675, 679, 697, 730, 767, 788, 797, 820, 902, 1124], "escap": [104, 105, 118], "dure": [104, 105, 118, 137, 156, 271, 797, 902, 1124], "doesn": [104, 118, 168, 271, 374, 679, 716, 788, 895, 1114, 1124], "complet": [104, 106, 118, 1105, 1124], "wherea": [104, 106, 118, 486, 487, 679, 721, 728, 788, 995, 996, 1124], "would": [104, 105, 118, 295, 434, 467, 475, 502, 609, 679, 807, 957, 1006, 1105, 1124], "prefer": [104, 105, 108, 118, 134, 156, 183, 189, 209, 210, 257, 271, 380, 467, 679, 788, 797, 902, 986, 1124, 1132], "treat": [104, 105, 118, 539, 541, 556, 557, 1048, 1050, 1065, 1066], "10000": [104, 184, 271, 579], "might": [104, 105, 118, 135, 143, 232, 236, 271, 285, 467, 594, 679, 695, 753, 758, 788, 1106, 1124], "issu": [104, 105, 109, 118, 324, 325, 584, 679, 839, 840, 1094, 1124], "iso8601": [104, 105, 118], "physic": [104, 105, 186, 271, 312, 590, 679, 696, 724, 725, 788, 824, 825, 1107, 1124], "cpu": [104, 105], "system": [104, 105], "wrongli": 104, "done": [104, 105, 118, 123, 137, 141, 144, 186, 271, 284, 286, 310, 493, 552, 558, 605, 679, 693, 697, 725, 788, 820, 1061, 1067, 1124], "buffer": [104, 105, 154, 183, 271, 896, 1124], "modifi": [104, 105, 118, 135, 137, 156, 176, 183, 244, 271, 296, 361, 372, 539, 546, 547, 556, 679, 797, 881, 892, 902, 1048, 1055, 1056, 1065, 1084, 1086, 1087, 1124], "upper": [104, 105, 154, 168, 171, 271, 315, 316, 400, 455, 595, 606, 623, 624, 626, 627, 638, 639, 666, 667, 679, 716, 719, 788, 832, 896, 917, 984, 1111, 1124], "bound": [104, 105, 154, 168, 171, 271, 315, 316, 317, 400, 434, 454, 455, 461, 595, 606, 623, 624, 626, 627, 638, 639, 666, 667, 679, 716, 719, 788, 832, 833, 896, 917, 957, 977, 984, 1111, 1124], "lossi": [104, 105, 118], "decod": [104, 105], "usag": [104, 105, 118, 131, 133, 220, 271, 791, 1036, 1124], "expens": [104, 105, 116, 118, 121, 122, 132, 134, 168, 169, 171, 172, 183, 189, 209, 210, 211, 237, 238, 271, 285, 467, 679, 716, 717, 719, 720, 759, 788, 797, 902, 986, 1124, 1132], "aggreg": [104, 105, 116, 162, 167, 168, 169, 170, 171, 190, 191, 192, 195, 197, 201, 202, 203, 223, 224, 240, 243, 250, 251, 254, 256, 271, 279, 386, 397, 463, 465, 467, 493, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 600, 601, 602, 603, 618, 619, 620, 621, 632, 637, 645, 646, 649, 650, 654, 662, 663, 679, 716, 717, 719, 720, 730, 731, 732, 733, 736, 737, 740, 754, 755, 762, 769, 770, 773, 775, 788, 914, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1124], "nativ": [104, 106, 110, 112, 116, 129, 183, 189, 210, 211, 229, 257, 271, 467, 644, 679, 684, 776, 986, 1124, 1132], "parser": 104, "regard": [104, 615], "sens": [104, 110, 112, 116, 120, 122, 194, 242, 271, 493, 679, 735, 788], "particular": [104, 110, 112, 116, 120, 122, 154, 271, 896, 1124], "usernam": [104, 107, 110, 112, 116, 120, 122], "password": [104, 107, 110, 112, 116, 120, 122], "skip": [104, 105, 109, 116, 118, 122, 240, 271, 798, 986, 1124], "offset": [104, 105, 110, 112, 116, 118, 120, 121, 122, 168, 169, 171, 172, 221, 242, 248, 271, 333, 341, 354, 355, 358, 362, 369, 449, 533, 560, 679, 716, 717, 719, 720, 752, 767, 788, 849, 857, 874, 875, 878, 882, 889, 972, 1042, 1069, 1082, 1124], "row_count": [104, 105, 110, 112, 116, 118, 120, 121, 122], "sampl": [104, 105, 257, 271, 532, 679, 776, 1041, 1124], "estim": [104, 105, 141, 154, 271, 286, 378, 379, 416, 605, 679, 693, 788, 896, 898, 899, 940, 1124], "alloc": [104, 105, 154, 204, 271, 896, 1124], "nodataerror": [104, 105, 109, 115, 118, 690], "longer": [104, 118], "lazili": [104, 105, 118, 119, 120, 121, 122, 466, 679, 701, 788], "glob": [104, 105, 118, 120, 121, 122], "continu": [104, 116, 327, 499, 532, 679, 842, 1004, 1041, 1124], "benchmark": [104, 116], "50000": 105, "batchedcsvread": [105, 690], "upon": 105, "creation": 105, "gather": 105, "next_batch": 105, "big": 105, "interest": 105, "seen_group": 105, "big_fil": 105, "df_current_batch": 105, "concat": [105, 829, 992, 1124], "partition_df": 105, "partition_bi": [105, 184, 271], "as_dict": [105, 199, 271], "fh": 105, "write_csv": [105, 118, 271], "els": [105, 669], "connectionorcursor": 106, "cursor": 106, "client": 106, "incom": 106, "driver": [106, 107], "read_database_uri": 106, "wide": [106, 166, 193, 240, 271, 734, 788], "snowflak": [106, 107], "variou": [106, 271, 679, 788, 791, 1124], "odbc": 106, "facil": 106, "initialis": [106, 137, 788, 1131], "flight": 106, "flightsql": 106, "packag": [106, 109], "flight_sql": 106, "about": [106, 532, 539, 546, 547, 556, 679, 1041, 1048, 1055, 1056, 1065, 1124, 1132], "notabl": 106, "dremio": 106, "influxdb": 106, "read_connection_uri": 106, "notic": [106, 271, 788, 1124], "dbapi2": 106, "connectorx": [106, 107, 125], "optimis": [106, 189, 211, 257, 271, 788, 986, 1029, 1030, 1124, 1132], "translat": 106, "conn": 106, "url": [106, 546, 548, 1055, 1057], "test_data": 106, "user_conn": 106, "normalised_scor": 106, "partition_on": 107, "partition_rang": 107, "partition_num": 107, "dbreadengin": 107, "raw": 107, "warehous": 107, "role": 107, "transfer": 107, "document": [107, 109, 365, 368, 550, 571, 572, 573, 576, 675, 825, 885, 888, 1059, 1080, 1081, 1082, 1085], "redshift": 107, "mysql": 107, "mariadb": 107, "clickhous": 107, "oracl": 107, "bigqueri": 107, "pleas": [107, 168, 271, 623, 628, 716, 788], "github": 107, "sfu": 107, "connector": 107, "destin": 107, "small": [107, 130, 187, 271, 362, 709, 788, 1132], "still": 107, "develop": [107, 131, 133], "read_databas": 107, "explicitli": [107, 129, 131, 137, 466, 661, 679, 689], "test_tabl": 107, "compani": 107, "testdb": 107, "public": [107, 271, 679, 690, 788, 1124], "myrol": 107, "delta_table_opt": [108, 119], "root": [108, 119, 313, 415, 464, 477, 497, 536, 583, 678, 679, 827, 1044, 1124], "absolut": [108, 119, 126, 127, 277, 377, 378, 379, 679, 793, 897, 898, 899, 1124], "sinc": [108, 119, 140, 142, 143, 170, 171, 172, 236, 252, 271, 285, 309, 342, 361, 369, 403, 407, 410, 427, 430, 436, 452, 456, 463, 510, 540, 553, 559, 565, 571, 573, 604, 611, 623, 625, 634, 642, 655, 666, 679, 694, 695, 714, 718, 719, 720, 729, 741, 753, 758, 768, 771, 788, 797, 798, 842, 858, 881, 889, 922, 928, 950, 953, 959, 975, 979, 1004, 1014, 1049, 1062, 1068, 1074, 1080, 1082, 1124], "avoid": [108, 210, 271, 280, 679], "year": [108, 119, 168, 169, 186, 242, 271, 345, 346, 358, 359, 362, 369, 370, 512, 513, 514, 515, 516, 518, 519, 520, 622, 623, 624, 625, 626, 627, 666, 667, 679, 716, 717, 725, 788, 861, 862, 878, 879, 882, 889, 890], "2021": [108, 119, 144, 149, 166, 168, 242, 271, 571, 641, 697, 716, 788, 791, 853, 854, 862, 886, 936, 1080, 1124], "aw": [108, 119], "googl": [108, 119], "service_account": [108, 119], "service_account_json_absolute_path": [108, 119], "az": [108, 119], "adl": [108, 119], "abf": [108, 119], "azure_storage_account_nam": [108, 119], "azure_storage_account_kei": [108, 119], "without_fil": [108, 119], "track": [108, 119, 189, 271, 455, 1131], "sheet_id": [109, 115], "sheet_nam": [109, 115], "xlsx2csv": [109, 125], "openpyxl": 109, "xlsx2csv_option": 109, "read_csv_opt": 109, "noreturn": [109, 115], "spreadsheet": [109, 115, 201, 271, 690], "read_csv": [109, 118], "influenc": [109, 709, 730, 788], "load_workbook": 109, "sheetnam": [109, 115], "nor": [109, 115, 212, 271], "fastest": 109, "refin": 109, "potenti": [109, 118, 120, 121, 122, 183, 209, 211, 271], "unabl": 109, "odf": 109, "openoffic": [109, 115], "od": [109, 115], "extens": [109, 233, 271, 1106, 1124], "skip_empty_lin": 109, "correct": [109, 115, 378, 379, 416, 513, 514, 515, 516, 517, 518, 520, 532, 679, 729, 730, 788, 898, 899, 940, 1021, 1041, 1124], "known": [109, 131, 455, 771, 776, 978], "1000": [109, 154, 231, 271, 347, 348, 579, 867, 1103, 1124, 1132], "better": [109, 189, 232, 257, 271, 467, 679, 776, 1029, 1030, 1124], "detect": 109, "memory_map": [110, 116, 120], "v2": [110, 120], "greatli": [110, 120], "repeat": [110, 120, 503, 505, 652, 670, 679], "give": [110, 112, 116, 120, 121, 122, 193, 238, 271, 342, 416, 505, 592, 679, 690, 734, 759, 788, 858, 940, 1124], "That": [110, 729, 730, 788], "filenam": 110, "my_fil": 110, "write_ipc": [110, 271], "read_ndjson": 113, "parallelstrategi": [116, 122], "use_statist": [116, 122], "stabl": [116, 143, 148, 212, 236, 271, 460, 679, 695, 734, 753, 758, 788], "row_group": [116, 122], "read_tabl": 116, "scan_parquet": 116, "scan_pyarrow_dataset": [116, 122], "hive": [116, 122], "contribut": [116, 514, 516, 518, 520, 679], "with_column_nam": 118, "push": [118, 120, 121, 122, 123], "down": [118, 120, 121, 122, 123, 389, 679, 908, 1124], "therebi": [118, 120, 121, 122], "overhead": [118, 120, 121, 122], "realloc": [118, 120, 121, 156, 271, 797, 902, 1124], "headerless": 118, "unlik": [118, 168, 271, 716, 788], "fewer": [118, 709, 788], "my_long_fil": 118, "thing": [118, 124, 631, 640], "less": [118, 186, 271, 418, 462, 552, 558, 563, 579, 679, 725, 788, 1061, 1067, 1072, 1088, 1132], "breezah": 118, "languag": [118, 168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "hard": [118, 729, 730, 788], "mydf": 118, "lambda": [118, 140, 162, 189, 200, 257, 271, 285, 377, 378, 379, 455, 463, 464, 465, 467, 618, 619, 632, 643, 644, 654, 679, 729, 730, 738, 776, 788, 798, 897, 898, 899, 978, 986, 1124], "lower": [118, 168, 171, 203, 263, 271, 315, 317, 400, 461, 464, 500, 504, 516, 606, 623, 624, 626, 627, 638, 639, 653, 666, 667, 679, 716, 719, 740, 782, 788, 833, 917, 984, 1005, 1008, 1020, 1111, 1124], "simpli": [118, 493, 618, 632, 679], "idx": [118, 168, 184, 271, 455, 716, 788, 978, 1030, 1124], "uint16": [118, 324, 325, 584, 679, 791, 839, 840, 1094, 1124], "u16": [118, 131, 1132], "eu": 119, "central": [119, 416, 532, 679, 940, 1041, 1124], "read_parquet": 122, "allow_pyarrow_filt": 123, "comparison": 123, "dset": 123, "my": [123, 577, 1086], "folder": 123, "05": [123, 126, 127, 131, 144, 186, 242, 271, 335, 336, 340, 361, 363, 365, 368, 623, 626, 697, 725, 788, 791, 851, 852, 853, 854, 856, 881, 882, 885, 886, 888, 889], "04": [123, 144, 168, 242, 271, 335, 336, 340, 344, 352, 354, 355, 361, 362, 364, 365, 368, 372, 571, 626, 628, 697, 716, 788, 791, 852, 856, 860, 866, 871, 872, 874, 875, 876, 881, 884, 885, 888, 892, 1080], "seed": [124, 173, 212, 271, 395, 502, 522, 528, 679, 911, 1006, 1026, 1037, 1124], "shuffl": [124, 212, 257, 271, 522, 679, 776, 1026, 1124], "intern": [124, 183, 271, 700, 788], "stdout": [125, 137, 166, 271, 478], "17": [125, 131, 250, 511, 521, 634, 655, 666, 679, 769, 835, 882, 1015, 1124, 1132], "platform": 125, "linux": 125, "90": [125, 574, 1083], "wsl2": 125, "x86_64": 125, "glibc2": 125, "main": [125, 701, 788], "apr": 125, "14": [125, 131, 189, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 333, 399, 502, 666, 679, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 791, 849, 882], "44": [125, 194, 271, 330, 679, 735, 788], "51": 125, "gcc": 125, "matplotlib": [125, 739, 751, 788], "check_row_ord": 126, "check_column_ord": 126, "check_dtyp": [126, 127], "check_exact": [126, 127], "rtol": [126, 127], "1e": [126, 127], "atol": [126, 127], "08": [126, 127, 131, 169, 271, 335, 362, 571, 626, 628, 717, 788, 791, 882, 889, 1080], "nans_compare_equ": [126, 127], "categorical_as_str": [126, 127], "assertionerror": [126, 127], "compar": [126, 127, 163, 271, 375, 376, 393, 394, 418, 462, 488, 489, 679, 825, 1028, 1124], "irrespect": 126, "unsort": 126, "exactli": [126, 127, 130, 131, 133, 562, 563, 569, 570, 628, 1036, 1071, 1072, 1078, 1079, 1124], "toler": [126, 127, 186, 271, 725, 788], "inexact": [126, 127], "assert": [126, 127, 129, 131, 133, 169, 271, 690, 717, 788, 791, 910, 1124], "check_nam": 127, "s1": [127, 162, 271, 939, 978, 1106, 1115, 1124], "searchstrategi": [128, 130, 131, 133], "null_prob": [128, 131, 133], "percentag": [128, 131, 133, 494, 679, 1000, 1124], "chanc": [128, 131, 133, 1132], "independ": [128, 129, 131, 133], "flag": [128, 271, 524, 539, 546, 547, 556, 679, 707, 729, 730, 788, 1031, 1048, 1055, 1056, 1065, 1124], "hypothesi": [128, 129, 130, 131, 132, 133, 1132], "sampled_from": [128, 1132], "unique_small_int": 128, "ccy": [128, 1132], "gbp": [128, 1132], "eur": [128, 149, 166, 271, 1132], "jpy": [128, 1132], "min_col": [129, 131], "max_col": [129, 131], "standalon": [129, 131, 791], "mincol": 129, "assign": [129, 168, 271, 455, 493, 502, 562, 563, 679, 716, 788, 978, 985, 1006, 1071, 1072, 1124], "exact": [129, 131, 133, 220, 271, 571, 572, 573, 592, 679, 1080, 1081, 1082], "minimum": [129, 130, 131, 133, 162, 195, 271, 377, 378, 379, 481, 487, 502, 649, 650, 679, 736, 788, 831, 870, 897, 898, 899, 996, 1002, 1006, 1124, 1132], "especi": [129, 509, 679, 709, 788, 1013, 1124], "test_unique_xyz": 129, "assert_someth": 129, "punctuat": 129, "test_special_char_colname_init": 129, "inner_dtyp": [130, 133], "select_from": [130, 133], "min_siz": [130, 131, 133, 1132], "max_siz": [130, 131, 133, 1132], "anoth": [130, 167, 271, 326, 334, 454, 471, 474, 679, 715, 766, 788, 841, 850, 902, 977, 1028, 1124], "randomli": 130, "innermost": 130, "2x": 130, "lst": 130, "11330": 130, "24030": 130, "116": 130, "zz": [130, 133], "uint8_pair": [130, 1132], "uint": [130, 1132], "zip": [130, 1132], "131": 130, "176": 130, "149": [130, 1132], "max_data_s": [131, 133], "include_col": 131, "allow_infin": [131, 133], "allowed_dtyp": [131, 133, 1132], "excluded_dtyp": [131, 133], "describ": [131, 166, 271, 1124], "desir": [131, 455, 978], "n_chunk": [131, 133, 271, 797, 902, 1124], "randomis": 131, "onto": 131, "pct": 131, "preced": [131, 791], "disallow": [131, 133], "inf": [131, 133, 292, 327, 402, 406, 499, 592, 679, 804, 842, 913, 921, 926, 984, 1000, 1004, 1111, 1124], "exclud": [131, 133, 322, 325, 400, 675, 679, 917, 936, 1124], "deploi": [131, 133], "characterist": [131, 133], "concret": [131, 133], "test_repr": 131, "isinst": [131, 133, 271], "0x11f561580": 131, "0565": 131, "34715": 131, "5844": 131, "33": [131, 194, 271, 521, 679, 735, 788, 1020, 1124], "076854": 131, "3382": 131, "48662": 131, "7540": 131, "29": [131, 168, 169, 186, 242, 271, 333, 354, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 849, 874, 878, 882, 889], "836271": 131, "4063": 131, "06": [131, 144, 242, 271, 335, 353, 360, 361, 370, 697, 788, 791, 881, 882], "39092": 131, "1889": 131, "13": [131, 145, 146, 157, 158, 165, 169, 177, 187, 196, 246, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 280, 475, 477, 574, 613, 618, 621, 632, 663, 668, 679, 698, 699, 710, 711, 717, 727, 764, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 882, 889, 890, 986, 1083, 1124], "41": [131, 519, 679, 1132], "874455": 131, "15836": 131, "1755e": 131, "575050513": 131, "profil": [132, 134, 788], "balanc": [132, 134, 1132], "set_environ": 132, "polars_hypothesis_profil": [132, 134], "1500": 132, "constructor": 133, "normal": [133, 168, 271, 374, 416, 532, 679, 716, 788, 895, 940, 1041, 1124], "test_repr_is_valid_str": 133, "experi": 133, "create_list_strategi": [133, 1132], "polars_max_thread": 135, "behind": 135, "lock": 135, "reason": [135, 465, 679], "pyspark": 135, "udf": [135, 140, 189, 200, 252, 257, 271, 285, 467, 495, 604, 644, 679, 738, 771, 776, 788, 798, 986, 1124], "recommend": [135, 183, 200, 271, 791], "easi": [137, 1132], "restor": 137, "restore_default": 137, "relat": [137, 791], "set_tbl_row": 137, "initi": [137, 618, 632, 669], "whatev": 137, "were": [137, 675], "enter": 137, "advantag": [137, 200, 271], "set_": 137, "set_verbos": 137, "do_various_th": 137, "cleaner": 137, "breviti": 137, "vein": 137, "durat": [137, 186, 242, 271, 333, 340, 341, 344, 348, 350, 352, 357, 364, 372, 590, 623, 624, 626, 627, 666, 667, 679, 725, 788, 791, 849, 856, 857, 860, 867, 869, 872, 877, 884, 889, 892, 1107, 1124], "set_ascii_t": 137, "write_ascii_frame_to_stdout": 137, "sy": 137, "nan_as_nul": 139, "polarsdatafram": 139, "notimplementederror": 139, "num_row": 139, "get_column": [139, 234, 271], "dtypekind": 139, "inference_s": [140, 189, 271], "256": [140, 189, 271, 1000, 1124], "deprec": [140, 142, 170, 171, 172, 252, 271, 285, 309, 361, 369, 403, 407, 410, 427, 430, 436, 452, 456, 463, 510, 540, 553, 559, 565, 571, 573, 604, 611, 623, 625, 642, 655, 666, 679, 694, 714, 718, 719, 720, 729, 741, 768, 771, 788, 797, 798, 842, 881, 889, 922, 928, 950, 953, 959, 975, 979, 1004, 1014, 1049, 1062, 1068, 1074, 1080, 1082, 1124], "19": [140, 169, 170, 171, 172, 186, 252, 271, 285, 361, 362, 369, 403, 407, 410, 427, 463, 510, 513, 515, 540, 553, 559, 565, 571, 573, 574, 604, 623, 625, 642, 679, 717, 718, 719, 720, 725, 729, 771, 788, 798, 842, 881, 882, 889, 922, 928, 950, 1004, 1014, 1049, 1062, 1068, 1074, 1080, 1082, 1083, 1124], "map_row": [140, 271], "tri": [140, 189, 271], "approxim": [141, 142, 271, 286, 605, 679, 693, 694, 788, 1132], "hyperloglog": [141, 271, 286, 605, 679, 693, 788], "algorithm": [141, 271, 286, 605, 679, 693, 788], "cardin": [141, 271, 286, 605, 679, 693, 788], "approx_n_uniqu": [142, 271, 679, 694, 788], "k": [143, 211, 236, 271, 308, 312, 416, 591, 679, 695, 758, 788, 819, 824, 940, 1108, 1124], "intoexpr": [143, 167, 168, 169, 170, 171, 172, 214, 215, 222, 236, 246, 247, 250, 271, 284, 400, 427, 428, 430, 436, 444, 445, 446, 447, 452, 456, 493, 523, 526, 535, 601, 603, 606, 609, 612, 613, 614, 618, 621, 623, 624, 625, 626, 627, 632, 638, 639, 646, 650, 655, 658, 661, 663, 666, 667, 669, 679, 695, 712, 715, 716, 717, 718, 719, 720, 745, 746, 753, 758, 764, 765, 769, 788, 917, 1124], "nulls_last": [143, 222, 236, 271, 295, 534, 679, 695, 753, 758, 788, 807, 1124], "smallest": [143, 236, 271, 308, 679, 695, 758, 788, 819, 1124], "largest": [143, 168, 169, 186, 236, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 591, 623, 624, 626, 627, 666, 667, 679, 695, 716, 717, 725, 758, 788, 878, 882, 889, 1108, 1124], "wors": [143, 236, 271, 695, 753, 758, 788], "search": [143, 186, 236, 271, 695, 725, 753, 758, 788], "top_k": [143, 271, 308, 679, 695, 788, 819, 1124], "columnnameorselector": [144, 150, 152, 199, 201, 211, 230, 238, 239, 240, 271, 697, 704, 705, 734, 759, 788], "strict": [144, 271, 304, 310, 539, 542, 555, 571, 572, 573, 576, 679, 697, 788, 815, 820, 1028, 1048, 1051, 1064, 1080, 1081, 1082, 1085, 1124], "due": [144, 168, 169, 186, 211, 242, 271, 280, 310, 341, 358, 362, 369, 415, 497, 512, 513, 514, 515, 516, 518, 519, 520, 583, 623, 624, 626, 627, 666, 667, 679, 697, 716, 717, 725, 788, 820, 857, 878, 882, 889, 1124], "overflow": [144, 271, 310, 324, 325, 555, 584, 679, 697, 788, 820, 839, 840, 1064, 1094, 1124], "2020": [144, 149, 166, 169, 271, 336, 340, 341, 344, 347, 348, 350, 352, 357, 361, 364, 365, 368, 369, 571, 572, 573, 697, 717, 788, 791, 852, 856, 857, 860, 867, 869, 872, 877, 881, 884, 885, 888, 889, 1080, 1081, 1082], "to_dict": [144, 271, 697, 788], "tempor": [144, 168, 169, 171, 172, 183, 210, 211, 229, 271, 400, 512, 513, 514, 515, 516, 518, 519, 520, 679, 690, 697, 716, 717, 719, 720, 788, 791, 917, 936, 1124], "greater": [145, 186, 271, 393, 394, 532, 563, 679, 725, 788, 1041, 1072, 1124], "cheap": [145, 146, 215, 247, 271, 698, 699, 746, 765, 788, 797, 830, 834, 1124], "deepcopi": [145, 146, 271, 698, 699, 788, 830, 834, 1124], "clear": [146, 271, 699, 788, 834, 1124], "appl": [147, 176, 185, 205, 207, 228, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 507, 544, 564, 679, 724, 742, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 788, 1053, 1073], "banana": [147, 228, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 271, 507, 544, 564, 679, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783], "pairwis": [148, 271], "pearson": [148, 271, 416, 532, 615, 679, 940, 1041, 1124], "correl": [148, 271, 615, 656], "coeffici": [148, 271, 532, 679, 1041, 1124], "corrcoef": [148, 271], "percentil": [149, 271, 843, 1124], "summari": [149, 271, 843, 1124], "glimps": [149, 174, 271], "usd": [149, 166, 271, 1132], "null_count": [149, 152, 271, 326, 679, 788, 841, 843, 1124], "266667": [149, 271], "666667": [149, 191, 243, 259, 271, 377, 679, 762, 778, 788], "std": [149, 271, 518, 679, 788, 843, 1022, 1124], "101514": [149, 271], "707107": [149, 271, 378, 518, 679, 898, 1124], "57735": [149, 271], "more_column": [150, 155, 216, 239, 271, 380, 630, 679, 704, 708, 748, 760, 788], "subset": [152, 197, 238, 271, 705, 759, 788], "preserv": [152, 159, 167, 170, 185, 189, 232, 233, 271, 331, 332, 386, 529, 679, 705, 712, 724, 788, 846, 847, 906, 1038, 1106, 1124], "behavior": [152, 271, 454, 705, 788, 797, 842, 977, 1004, 1124], "all_horizont": [152, 271, 600, 705, 788], "is_nul": [152, 271, 679, 705, 788, 1124], "sizeunit": [154, 271, 896, 1124], "heap": [154, 271, 896, 1124], "its": [154, 271, 335, 362, 369, 535, 669, 679, 825, 851, 882, 889, 896, 1124], "bitmap": [154, 271, 896, 1124], "structarrai": [154, 271, 896, 1124], "constant": [154, 169, 271, 333, 383, 679, 717, 788, 849, 896, 903, 1124], "unchang": [154, 271, 590, 679, 729, 730, 771, 776, 788, 896, 1107, 1124], "capac": [154, 220, 271, 896, 1036, 1124], "ffi": [154, 271, 896, 1124], "kb": [154, 271, 896, 1124], "mb": [154, 271, 896, 1124], "gb": [154, 271, 896, 1124], "tb": [154, 271, 896, 1124], "revers": [154, 271, 321, 322, 323, 324, 325, 464, 497, 583, 679, 788, 837, 838, 839, 840, 1124], "1_000_000": [154, 271, 896, 1124], "25888898": [154, 271], "689577102661133": [154, 271], "long": [155, 193, 240, 271, 708, 734, 788], "letter": [155, 255, 265, 271, 380, 547, 630, 679, 708, 774, 784, 788, 791, 1056], "onlin": [156, 271, 797, 902, 1124], "rerun": [156, 271, 797, 902, 1124], "conveni": [156, 271, 797, 902, 1124], "evalu": [157, 159, 186, 271, 282, 296, 326, 398, 421, 422, 455, 466, 492, 600, 602, 606, 610, 623, 624, 626, 627, 629, 638, 639, 652, 655, 661, 666, 667, 669, 670, 679, 712, 722, 724, 725, 788, 808, 841, 944, 945, 1115, 1124], "Not": [157, 271, 409, 411, 466, 679, 710, 788], "fillnullstrategi": [158, 271, 385, 679, 711, 788, 905, 1124], "matches_supertyp": [158, 271, 711, 788], "forward": [158, 186, 271, 354, 385, 391, 679, 711, 725, 788, 874, 905, 1124], "consecut": [158, 271, 302, 385, 391, 538, 679, 711, 788, 905, 1047, 1124], "fill_nan": [158, 271, 679, 788, 1124], "OR": [159, 271, 602, 603, 712, 788, 791], "reduct": [162, 271], "supercast": [162, 271], "parent": [162, 271], "rule": [162, 271], "arithmet": [162, 271], "zip_with": [162, 271, 1124], "foo11": [162, 271], "bar22": [162, 271], "null_equ": [163, 271, 1028, 1124], "retriev": [164, 271, 423, 424, 580, 946, 947, 1089], "max_items_per_column": [166, 271], "max_colname_length": [166, 271], "return_as_str": [166, 271, 478], "preview": [166, 271], "cleanli": [166, 271], "few": [166, 271], "exce": [166, 271], "trail": [166, 271, 559, 565, 566, 567, 1068, 1074, 1075, 1076], "ellipsi": [166, 271], "head": [166, 188, 225, 271, 284, 420, 679, 728, 788, 942, 1095, 1124], "tail": [166, 174, 271, 284, 532, 679, 788, 912, 1041, 1124], "more_bi": [167, 170, 199, 222, 271, 535, 679, 715, 718, 753, 788], "groupbi": [167, 271, 285, 465, 467, 604, 644, 679, 788], "consist": [167, 170, 199, 271, 571, 715, 718, 788, 797, 902, 1080, 1124], "regardless": [167, 170, 271, 550, 669, 1059], "agg": [167, 168, 169, 171, 271, 279, 386, 388, 467, 534, 535, 586, 598, 616, 644, 679, 700, 701, 707, 709, 715, 716, 717, 719, 720, 739, 747, 751, 788, 791], "Or": [167, 168, 169, 186, 222, 242, 250, 271, 493, 535, 623, 624, 626, 627, 666, 667, 669, 675, 679, 715, 716, 717, 725, 753, 769, 788], "index_column": [168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "timedelta": [168, 169, 171, 172, 186, 242, 271, 339, 358, 359, 362, 369, 371, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 725, 788, 791, 863, 865, 870, 878, 882, 889, 995, 996, 1124], "period": [168, 169, 171, 172, 218, 219, 271, 362, 369, 377, 378, 379, 448, 494, 525, 526, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 749, 750, 788, 882, 889, 897, 898, 899, 971, 1000, 1033, 1034, 1124], "include_boundari": [168, 171, 271, 716, 719, 788], "closedinterv": [168, 169, 171, 172, 271, 400, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 788, 917, 1124], "start_bi": [168, 171, 271, 716, 719, 788], "startbi": [168, 171, 271, 716, 719, 788], "window": [168, 169, 171, 172, 271, 326, 362, 369, 377, 378, 379, 465, 467, 493, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 613, 656, 657, 679, 716, 717, 719, 720, 788, 841, 882, 889, 897, 898, 899, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1124], "check_sort": [168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "dynamicgroupbi": [168, 171, 271], "member": [168, 271, 716, 788, 925, 1124], "seen": [168, 271, 302, 391, 679, 716, 788], "roll": [168, 169, 172, 271, 354, 355, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 613, 656, 657, 679, 716, 717, 720, 788, 874, 875, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1124], "slot": [168, 271, 326, 329, 429, 679, 716, 788, 841, 844, 952, 1124], "interv": [168, 169, 171, 172, 242, 271, 327, 362, 369, 400, 499, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 719, 720, 788, 842, 855, 858, 859, 866, 868, 871, 873, 876, 879, 880, 882, 887, 889, 890, 917, 1004, 1124], "1n": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "1u": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "microsecond": [168, 169, 183, 186, 210, 211, 229, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 625, 626, 627, 628, 665, 666, 667, 679, 716, 717, 725, 739, 788, 791, 878, 882, 889], "1m": [168, 169, 186, 242, 271, 347, 348, 350, 357, 358, 362, 364, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 867, 869, 877, 878, 882, 884, 889], "minut": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 625, 626, 627, 628, 665, 666, 667, 679, 716, 717, 725, 788, 791, 878, 882, 889], "1h": [168, 169, 186, 242, 271, 341, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 857, 859, 878, 882, 889], "hour": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 625, 626, 627, 628, 665, 666, 667, 679, 716, 717, 725, 788, 791, 878, 882, 889], "1d": [168, 169, 186, 242, 271, 334, 344, 352, 358, 362, 369, 372, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 641, 666, 667, 679, 716, 717, 725, 788, 791, 850, 858, 860, 865, 872, 878, 882, 887, 889], "1w": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "week": [168, 169, 171, 186, 242, 271, 358, 362, 369, 371, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 719, 725, 788, 791, 878, 882, 889, 891], "1mo": [168, 169, 186, 242, 271, 336, 340, 354, 355, 358, 361, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 852, 856, 873, 874, 875, 878, 879, 880, 881, 882, 889, 890], "month": [168, 169, 186, 242, 271, 339, 354, 355, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 622, 623, 624, 625, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 855, 874, 875, 878, 882, 889], "1q": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "quarter": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "1y": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "1i": [168, 169, 186, 242, 271, 358, 512, 513, 514, 515, 516, 518, 519, 520, 679, 716, 717, 725, 788, 878], "3d12h4m25": [168, 169, 186, 242, 271, 362, 369, 623, 624, 626, 627, 666, 667, 716, 717, 725, 788, 882, 889], "suffix": [168, 169, 185, 186, 214, 242, 246, 250, 271, 280, 306, 358, 362, 369, 409, 411, 412, 413, 464, 493, 497, 507, 512, 513, 514, 515, 516, 518, 519, 520, 544, 570, 623, 624, 626, 627, 666, 667, 679, 716, 717, 724, 725, 745, 764, 766, 769, 788, 791, 817, 878, 882, 889, 1053, 1079], "_satur": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "satur": [168, 169, 186, 242, 271, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 882, 889], "28": [168, 169, 186, 228, 242, 271, 278, 358, 361, 362, 369, 372, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 878, 881, 882, 889, 892, 1132], "correspond": [168, 169, 186, 232, 242, 271, 346, 358, 362, 369, 467, 502, 509, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 666, 667, 679, 716, 717, 725, 788, 862, 878, 882, 889, 1006, 1013, 1124], "daylight": [168, 169, 186, 242, 271, 333, 341, 358, 362, 369, 512, 513, 514, 515, 516, 518, 519, 520, 623, 624, 626, 627, 628, 666, 667, 679, 716, 717, 725, 788, 857, 878, 882, 889], "10i": [168, 169, 271, 716, 717, 788], "ascend": [168, 169, 171, 172, 271, 513, 514, 515, 516, 518, 520, 679, 716, 717, 719, 720, 788], "dynam": [168, 171, 271, 455, 512, 513, 514, 515, 516, 518, 519, 520, 679, 716, 719, 788, 978], "matter": [168, 169, 171, 172, 183, 210, 211, 229, 271, 716, 717, 719, 720, 788], "_lower_bound": [168, 171, 271, 716, 719, 788], "_upper_bound": [168, 171, 271, 716, 719, 788], "harder": [168, 171, 271, 716, 719, 788], "inclus": [168, 169, 171, 172, 271, 400, 512, 513, 514, 515, 516, 518, 519, 520, 561, 562, 606, 623, 624, 626, 627, 638, 639, 666, 667, 679, 716, 717, 719, 720, 788, 917, 1070, 1071, 1124], "datapoint": [168, 171, 271, 716, 719, 788], "mondai": [168, 171, 271, 369, 371, 716, 719, 788, 889, 891], "tuesdai": [168, 171, 271, 716, 719, 788], "wednesdai": [168, 171, 271, 716, 719, 788], "thursdai": [168, 171, 271, 716, 719, 788], "fridai": [168, 171, 271, 716, 719, 788], "saturdai": [168, 171, 271, 716, 719, 788], "sundai": [168, 171, 271, 371, 716, 719, 788, 891], "weekli": [168, 171, 271, 369, 716, 719, 788, 889], "sorted": [168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "metadata": [168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "verifi": [168, 169, 171, 172, 271, 716, 717, 719, 720, 788], "incorrectli": [168, 169, 171, 172, 271, 455, 716, 717, 719, 720, 788], "incorrect": [168, 169, 171, 172, 271, 372, 524, 679, 716, 717, 719, 720, 771, 776, 788, 892, 1031, 1124], "re": [168, 232, 271, 354, 355, 716, 788, 874, 875, 1131], "come": [168, 271, 354, 355, 416, 679, 691, 716, 787, 788, 874, 875, 940, 1124], "set_index": [168, 271, 716, 788], "resampl": [168, 271, 716, 788], "reset_index": [168, 271, 716, 788], "though": [168, 271, 675, 716, 788], "evenli": [168, 271, 716, 788], "upsampl": [168, 271, 716, 788], "datetime_rang": [168, 271, 334, 336, 340, 344, 347, 348, 350, 352, 354, 355, 357, 358, 361, 362, 364, 369, 372, 512, 513, 515, 518, 519, 520, 623, 679, 716, 788, 849, 850, 852, 856, 857, 858, 859, 860, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 881, 882, 884, 887, 889], "30m": [168, 271, 362, 369, 716, 788, 882, 889], "time_min": [168, 271, 716, 788], "time_max": [168, 271, 716, 788], "23": [168, 169, 271, 335, 339, 343, 351, 359, 362, 371, 512, 513, 515, 518, 519, 520, 625, 628, 665, 666, 667, 679, 716, 717, 788, 791, 851, 859, 1132], "boundari": [168, 271, 315, 316, 317, 369, 679, 716, 788, 831, 832, 833, 889, 913, 1124], "time_count": [168, 271, 716, 788], "_lower_boundari": [168, 271, 716, 788], "_upper_boundari": [168, 271, 716, 788], "lower_bound": [168, 271, 315, 317, 400, 679, 716, 788, 831, 833, 917, 1111, 1124], "upper_bound": [168, 271, 315, 316, 400, 455, 679, 716, 788, 831, 832, 917, 984, 1124], "time_agg_list": [168, 271, 716, 788], "bys": [168, 271, 716, 788], "int_rang": [168, 240, 257, 271, 606, 716, 730, 776, 788], "2i": [168, 271, 716, 788], "3i": [168, 271, 716, 788], "a_agg_list": [168, 271, 716, 788], "rollinggroupbi": [169, 172, 271], "group_by_dynam": [169, 171, 271, 717, 719, 788], "t_0": [169, 271, 512, 513, 514, 515, 516, 518, 519, 520, 679, 717, 788], "t_1": [169, 271, 512, 513, 514, 515, 516, 518, 519, 520, 679, 717, 788], "t_n": [169, 271, 512, 513, 514, 515, 516, 518, 519, 520, 679, 717, 788], "43": [169, 271, 325, 519, 679, 717, 788], "strptime": [169, 271, 361, 717, 788, 881], "set_sort": [169, 186, 242, 271, 679, 717, 725, 788, 1124], "2d": [169, 232, 271, 358, 641, 717, 788, 849, 855], "sum_a": [169, 271, 717, 788], "min_a": [169, 271, 717, 788], "max_a": [169, 271, 717, 788], "group_bi": [170, 197, 270, 271, 279, 386, 388, 467, 534, 535, 586, 598, 616, 644, 679, 700, 701, 707, 709, 718, 739, 751, 787, 788, 791], "group_by_rol": [172, 271, 512, 513, 514, 515, 516, 518, 519, 520, 679, 716, 720, 788], "seed_1": [173, 271, 395, 679, 911, 1124], "seed_2": [173, 271, 395, 679, 911, 1124], "seed_3": [173, 271, 395, 679, 911, 1124], "hash": [173, 271, 679, 1124], "u64": [173, 271, 395, 504, 679, 739, 788, 911, 1124], "10783150408545073287": [173, 271], "1438741209321515184": [173, 271], "10047419486152048166": [173, 271], "2047317070637311557": [173, 271], "ab": [174, 188, 225, 246, 271, 580, 581, 679, 764, 788, 912, 942, 1095, 1124], "grown": [176, 271], "intermedi": [178, 271, 723, 788, 1132], "linear": [178, 203, 263, 271, 399, 425, 470, 500, 516, 613, 614, 653, 679, 723, 740, 782, 788, 916, 948, 1005, 1020, 1124], "mask": [179, 181, 271, 304, 401, 403, 404, 407, 408, 414, 539, 542, 679, 815, 906, 917, 919, 922, 923, 928, 929, 937, 1001, 1002, 1029, 1048, 1051, 1115, 1124], "visual": [179, 181, 271], "scalar": [182, 189, 209, 271, 523, 604, 641, 644, 679, 939, 1027, 1124], "With": [182, 271, 512, 513, 514, 515, 516, 518, 519, 520, 679, 939, 1124], "buffer_s": [183, 271], "veri": [183, 237, 271, 467, 679, 699, 776, 788, 834, 1124], "fit": [183, 220, 240, 271, 527, 655, 679, 1035, 1036, 1124], "signific": [183, 189, 271, 285, 467, 679, 986, 1124], "4x": [183, 271], "materialis": [183, 184, 209, 210, 211, 271], "rows_by_kei": [183, 210, 271], "awar": [183, 210, 211, 229, 271, 709, 788, 1082], "iter_row": [184, 209, 210, 211, 271], "17_500": [184, 271], "klmnoopqrstuvwxyz": [184, 271], "__name__": [184, 271], "7500": [184, 271], "15_000": [184, 271], "record_batch": [184, 271], "to_arrow": [184, 271, 1124], "to_batch": [184, 271], "date32": [184, 271], "large_str": [184, 227, 233, 271], "15000": [184, 271], "2500": [184, 271], "left_on": [185, 186, 271, 724, 725, 788], "right_on": [185, 186, 271, 724, 725, 788], "_right": [185, 186, 271, 724, 725, 788], "joinvalid": [185, 271, 724, 788], "semi": [185, 271, 724, 788], "anti": [185, 271, 724, 776, 788, 1029, 1030, 1124], "cross": [185, 271, 369, 724, 788, 889], "many_to_mani": [185, 271, 724, 788], "one_to_on": [185, 271, 724, 788], "one_to_mani": [185, 271, 724, 788], "many_to_on": [185, 271, 724, 788], "join_asof": [185, 271, 724, 788], "stringcach": [185, 271, 690, 823, 825], "other_df": [185, 271], "by_left": [186, 271, 725, 788], "by_right": [186, 271, 725, 788], "asofjoinstrategi": [186, 271, 725, 788], "allow_parallel": [186, 271, 724, 725, 788], "force_parallel": [186, 271, 724, 725, 788], "asof": [186, 271, 725, 788], "rather": [186, 271, 478, 499, 509, 579, 679, 725, 788, 1004, 1013, 1088, 1124], "asof_join": [186, 271], "distanc": [186, 271, 725, 788, 913, 1124], "plan": [186, 187, 271, 696, 703, 707, 714, 724, 725, 741, 747, 751, 768, 788], "forc": [186, 189, 257, 271, 724, 725, 776, 788, 986, 1124], "gdp": [186, 271, 725, 788], "2016": [186, 271, 725, 788], "2017": [186, 271, 725, 788], "2018": [186, 271, 361, 725, 788, 881], "2019": [186, 271, 725, 788], "jan": [186, 271, 725, 788], "1st": [186, 271, 725, 788], "4164": [186, 271, 725, 788], "4411": [186, 271, 725, 788], "4566": [186, 271, 725, 788], "4696": [186, 271, 725, 788], "popul": [186, 271, 725, 788], "12th": [186, 271, 725, 788], "82": [186, 271, 725, 788], "66": [186, 271, 519, 599, 679, 725, 788, 1020, 1124], "83": [186, 271, 725, 788], "52": [186, 246, 271, 370, 521, 679, 725, 764, 788], "request": [187, 271], "describe_plan": [187, 271], "unoptim": [187, 271], "describe_optimized_plan": [187, 271], "show_graph": [187, 271, 788], "un": [187, 271], "graphviz": [187, 271, 751, 788], "much": [189, 240, 257, 271, 326, 454, 467, 644, 679, 776, 841, 977, 986, 1124], "_significantly_": [189, 257, 271, 986, 1124], "intens": [189, 257, 271, 493, 679, 986, 1124], "materi": [189, 257, 271, 739, 776, 788, 791, 986, 1124], "parallelis": [189, 257, 271, 986, 1124], "achiev": [189, 257, 271, 467, 679, 842, 986, 1004, 1124], "best": [189, 257, 271, 467, 679, 986, 1124], "arbitrarili": [189, 271], "rearrang": [189, 271], "transform": [189, 271, 465, 575, 577, 578, 679], "lru_cach": [189, 271, 467, 679, 986, 1124], "column_1": [189, 237, 271], "axi": [190, 191, 193, 195, 224, 271, 607, 608, 734, 788], "null_strategi": [191, 224, 271], "nullstrategi": [191, 224, 271], "propag": [191, 224, 271, 376, 486, 487, 489, 679, 995, 996, 1124], "spam": [191, 271, 547, 1056], "id_var": [193, 271, 734, 788], "value_var": [193, 271, 734, 788], "variable_nam": [193, 271, 734, 788], "value_nam": [193, 271, 734, 788], "unpivot": [193, 271, 734, 788], "leav": [193, 271, 455, 734, 788], "massag": [193, 271, 734, 788], "measur": [193, 271, 734, 788], "merg": [194, 271, 735, 788], "caller": [194, 271, 455, 730, 735, 771, 776, 788], "respons": [194, 271, 735, 788], "steve": [194, 271, 735, 788], "elis": [194, 271, 735, 788], "bob": [194, 271, 735, 788], "ag": [194, 271, 735, 788], "anna": [194, 271, 735, 788], "megan": [194, 271, 735, 788], "thoma": [194, 271, 735, 788], "21": [194, 224, 271, 512, 513, 515, 518, 519, 520, 634, 679, 735, 788, 791], "what": [197, 271, 1105, 1114, 1124], "pack": [197, 271], "expr_unique_subset": [197, 271], "df_nuniqu": [197, 271], "df_agg_nuniqu": [197, 271], "include_kei": [199, 211, 271], "offer": [200, 271, 495, 679, 738, 788], "fulli": [200, 212, 271], "cast_str_to_int": [200, 271, 738, 788], "col_nam": [200, 271, 738, 788], "tdf": [200, 271, 738, 788], "aggregate_funct": [201, 271], "pivotagg": [201, 271], "sort_column": [201, 271], "predefin": [201, 271], "median": [201, 271, 385, 514, 679, 766, 788, 1018, 1124], "predict": [201, 204, 242, 271], "transpos": [201, 271], "discoveri": [201, 271], "col1": [201, 237, 271, 788, 1132], "col2": [201, 237, 271, 788, 1132], "col3": [201, 271, 1132], "tanh": [201, 271, 679, 1124], "998347": [201, 271], "964028": [201, 271], "999954": [201, 271], "interpol": [203, 263, 271, 385, 470, 500, 516, 653, 679, 740, 782, 788, 1005, 1020, 1124], "rollinginterpolationmethod": [203, 263, 271, 500, 516, 653, 679, 740, 782, 788, 1005, 1020, 1124], "midpoint": [203, 263, 271, 500, 516, 653, 679, 740, 782, 788, 1005, 1020, 1124], "by_pred": [209, 271], "accord": [209, 271, 466, 499, 623, 624, 626, 627, 666, 667, 679, 862, 1004, 1124], "mutual": [209, 271], "exclus": [209, 271, 599, 606, 638, 639, 679], "addition": [209, 271], "clariti": [209, 271], "toomanyrowsreturnederror": [209, 271, 690], "norowsreturnederror": [209, 271, 690], "inherit": [209, 271], "rowserror": [209, 271, 690], "high": [211, 271, 499, 679, 1004, 1124], "cost": [211, 271], "reoconstruct": [211, 271], "defaultdict": [211, 271], "assum": [211, 271, 729, 730, 771, 776, 788], "with_replac": [212, 271, 522, 679, 1026, 1124], "named_expr": [214, 215, 246, 247, 271, 658, 661, 745, 746, 764, 765, 788], "threshold": [214, 271, 745, 788], "set_auto_structifi": [214, 246, 271, 745, 764, 788], "auto_structifi": [214, 246, 271, 745, 764, 788], "is_odd": [214, 271, 745, 788], "_is_odd": [214, 271, 745, 788], "sequenti": [215, 247, 271, 746, 765, 788], "shift_and_fil": [218, 271, 679, 788, 1124], "fill_valu": [219, 240, 271, 526, 679, 750, 788, 1034, 1124], "shift": [219, 271, 329, 429, 494, 526, 613, 679, 750, 788, 844, 952, 1000, 1034, 1124], "shrink": [220, 271, 527, 679, 1035, 1036, 1124], "hold": [220, 271], "ddof": [223, 243, 271, 518, 520, 537, 597, 615, 656, 657, 660, 668, 679, 754, 762, 788, 1022, 1024, 1045, 1113, 1124], "deviat": [223, 271, 378, 518, 537, 660, 679, 754, 788, 898, 1045, 1124], "degre": [223, 243, 271, 501, 518, 520, 537, 597, 608, 615, 656, 657, 660, 668, 679, 754, 762, 788, 1022, 1024, 1045, 1113, 1124], "freedom": [223, 243, 271, 518, 520, 537, 597, 615, 656, 657, 660, 668, 679, 754, 762, 788, 1022, 1024, 1045, 1113, 1124], "divisor": [223, 243, 271, 518, 520, 537, 597, 615, 656, 657, 660, 668, 679, 754, 762, 788, 1022, 1024, 1045, 1113, 1124], "816497": [223, 271], "16a": [224, 271], "27b": [224, 271], "38c": [224, 271], "nth": [226, 271, 563, 587, 679, 757, 788, 1072, 1097, 1124], "mostli": [227, 271, 386, 679], "categoricaltyp": [227, 271], "as_seri": [228, 271, 842, 1004, 1124], "fruit": [228, 271, 507, 544, 564, 679, 1053, 1073], "car": [228, 271, 507, 679], "beetl": [228, 271, 507, 679], "audi": [228, 271, 507, 679], "300": [228, 271, 1016, 1017, 1019, 1124], "drop_first": [230, 271], "dummi": [230, 271, 1101, 1124], "foo_1": [230, 271], "foo_2": [230, 271], "bar_3": [230, 271], "bar_4": [230, 271], "ham_a": [230, 271], "ham_b": [230, 271], "instantiat": [231, 271, 1103, 1124], "from_repr": [231, 271, 1103, 1124], "df_from_str_repr": [231, 271], "eval": [231, 271, 629, 1103, 1124], "indexord": [232, 271], "fortran": [232, 271], "downstream": [232, 271, 524, 679, 1031, 1124], "applic": [232, 271, 467, 512, 513, 514, 515, 516, 518, 519, 520, 679], "prevent": [232, 271, 280, 324, 325, 415, 584, 679, 788, 839, 840, 1094, 1124], "reshap": [232, 271, 432, 679, 955, 1124], "ll": [232, 271], "u1": [232, 271], "f4": [232, 271], "view": [232, 271, 467, 679, 1105, 1124], "recarrai": [232, 271], "rec": [232, 271], "use_pyarrow_extension_arrai": [233, 271, 1106, 1124], "trigger": [233, 271, 1106, 1124], "sent": [233, 271, 1105, 1106, 1124], "pandas_df1": [233, 271], "pandas_df2": [233, 271], "pandas_df2_pa": [233, 271], "na": [233, 271, 564, 1106, 1124], "four": [235, 271], "five": [235, 271, 1132], "bottom_k": [236, 271, 591, 679, 758, 788, 1108, 1124], "include_head": [237, 271], "header_nam": [237, 271], "column_nam": [237, 271], "perhap": [237, 271], "column_2": [237, 271], "name_gener": [237, 271], "base_nam": [237, 271], "my_column_": [237, 271], "my_column_0": [237, 271], "my_column_1": [237, 271], "my_column_2": [237, 271], "new_id": [237, 271], "uniquekeepstrategi": [238, 271, 759, 788], "kept": [238, 271, 759, 788], "decompos": [239, 271, 760, 788], "t_a": [239, 271, 760, 788], "t_b": [239, 271, 760, 788], "t_c": [239, 271, 760, 788], "t_d": [239, 271, 760, 788], "womp": [239, 271, 760, 788], "t_": [239, 271, 760, 788], "t_struct": [239, 271, 760, 788], "step": [240, 271, 606, 638, 639], "unstackdirect": [240, 271], "pivot": [240, 271], "phase": [240, 271], "subject": [240, 271], "ascii_uppercas": [240, 271], "h": [240, 271, 278, 365, 368, 527, 571, 573, 576, 679, 1080, 1082, 1085], "x_0": [240, 271, 377, 378, 379, 679, 897, 898, 899, 1124], "x_1": [240, 271], "y_0": [240, 271, 377, 378, 379, 679, 897, 898, 899, 1124], "y_1": [240, 271], "z_0": [240, 271], "z_1": [240, 271], "syntact": [241, 271, 600, 602, 620, 630, 631, 635, 640, 645, 649, 652, 653, 658, 662, 670, 761, 788, 1044, 1124], "sugar": [241, 271, 600, 602, 620, 630, 631, 635, 640, 645, 649, 652, 653, 658, 662, 670, 761, 788, 1044, 1124], "coalesc": [241, 271, 571, 761, 788, 1080], "400": [241, 271, 761, 788, 1016, 1017, 1019, 1124], "600": [241, 271, 761, 788, 791], "700": [241, 271, 761, 788], "new_df": [241, 271, 761, 788], "time_column": [242, 271], "frequenc": [242, 271], "date_rang": [242, 271, 339, 342, 359, 367, 371, 855, 873, 879, 880, 890, 891], "forward_fil": [242, 271, 322, 325, 679], "varianc": [243, 271, 379, 416, 520, 597, 668, 679, 762, 788, 899, 940, 1024, 1113, 1124], "grow": [244, 271], "not_": [246, 271, 410, 679, 764, 788, 1124], "not_c": [246, 271, 764, 788], "diff": [246, 271, 340, 344, 348, 350, 352, 357, 364, 444, 679, 764, 788, 856, 860, 867, 869, 872, 877, 884, 967, 1124], "_diff": [246, 271, 764, 788], "row_nr": [248, 271, 466, 512, 513, 515, 518, 519, 520, 679, 767, 788, 1030, 1124], "named_agg": [250, 769], "_sum": [250, 769], "_mean_squar": [250, 769], "b_sum": [250, 769], "c_mean_squar": [250, 769], "sub": [252, 257, 298, 299, 300, 679, 810, 811, 812], "map_group": [252, 604, 771], "deem": [253, 320, 616, 679, 772], "nr": [255, 265, 774, 784], "triangl": [257, 776], "group_df": [257, 776], "maxim": [258, 293, 679, 777, 805, 1124], "833333": [259, 778], "minim": [261, 294, 424, 527, 535, 679, 780, 806, 947, 990, 1035, 1124], "overview": [271, 679, 690, 788, 1124, 1132], "frameinittyp": [271, 788], "entri": [271, 788, 1131], "mydatafram": 271, "df4": 271, "df5": 271, "df6": 271, "approx_uniqu": [271, 788], "corr": 271, "drop_in_plac": 271, "drop_nul": [271, 331, 679, 788, 846, 1124], "estimated_s": [271, 1124], "explod": [271, 388, 493, 506, 679, 788, 1010, 1124], "find_idx_by_nam": 271, "fold": [271, 476, 612, 618, 619, 654], "frame_equ": [271, 369], "groupby_dynam": [271, 788], "groupby_rol": [271, 788], "hash_row": 271, "hstack": 271, "insert_at_idx": 271, "is_dupl": [271, 679, 1124], "is_empti": [271, 1124], "is_uniqu": [271, 679, 1124], "iter_slic": 271, "melt": [271, 788], "merge_sort": [271, 788], "n_uniqu": [271, 679, 1124], "pipe": [271, 679, 788], "quantil": [271, 499, 516, 679, 788, 1004, 1020, 1124], "replace_at_idx": 271, "select_seq": [271, 788], "shrink_to_fit": [271, 1124], "take_everi": [271, 679, 788, 1124], "to_dummi": [271, 1124], "to_numpi": [271, 465, 679, 1124], "to_panda": [271, 1124], "to_struct": [271, 547], "unnest": [271, 327, 499, 508, 547, 548, 562, 563, 581, 679, 788, 842, 978, 1004, 1012, 1071, 1072, 1124], "unstack": 271, "with_columns_seq": [271, 788], "write_avro": 271, "write_databas": 271, "write_delta": 271, "write_excel": 271, "write_ipc_stream": 271, "write_json": [271, 788], "write_parquet": 271, "cumprod": [278, 679, 1124], "ghi": [278, 547, 679, 791, 1056], "94": [279, 679], "map_alia": [280, 679], "to_uppercas": [280, 548, 679], "ignore_nul": [281, 283, 377, 378, 379, 600, 602, 679, 795, 796, 897, 898, 899, 1114, 1124], "confus": [281, 409, 411, 679], "kleen": [281, 283, 600, 602, 679, 795, 796, 1124], "bitwis": [282, 492, 599, 600, 601, 602, 603, 679], "upcast": [284, 679], "skip_nul": [285, 467, 679, 798, 986, 1124], "pass_nam": [285, 467, 679], "mapelementsstrategi": [285, 467, 679], "thread_loc": [285, 467, 679], "map_el": [285, 465, 599, 679, 798, 1124], "unknown": [285, 466, 467, 546, 641, 679, 1055], "stage": [285, 679], "code": [285, 303, 305, 306, 307, 467, 524, 679, 709, 727, 788, 1031, 1124], "amount": [285, 467, 628, 679], "gil": [285, 467, 679], "invers": [287, 288, 289, 290, 291, 292, 679, 799, 800, 801, 802, 803, 804, 1124], "cosin": [287, 288, 318, 319, 465, 679, 799, 800, 835, 836, 1124], "570796": [287, 289, 679, 799, 801, 1124], "hyperbol": [288, 290, 292, 319, 531, 589, 679, 800, 802, 804, 836, 1040, 1099, 1124], "sine": [289, 290, 465, 530, 531, 679, 801, 802, 1039, 1040, 1124], "881374": [290, 679, 802, 1124], "tangent": [291, 292, 588, 589, 679, 803, 804, 1098, 1099, 1124], "785398": [291, 607, 608, 679, 803, 1124], "arg_wher": [296, 679], "substr": [303, 306, 307, 539, 544, 556, 557, 561, 562, 563, 564, 791, 814, 817, 818, 1048, 1053, 1065, 1066, 1070, 1071, 1072, 1073], "look": [303, 455, 465, 679, 814], "ends_with": [303, 307, 539, 564, 791, 1073], "x00": [303, 305, 306, 307], "xff": [303, 305, 306, 307], "contains_with_lit": 303, "contains_with_expr": 303, "transferencod": [304, 305, 542, 543, 815, 816, 1051, 1052], "hex": [304, 305, 542, 543, 555, 815, 816, 1051, 1052, 1064], "base64": [304, 305, 542, 543, 815, 816, 1051, 1052], "code_encoded_hex": 305, "000000": 305, "ffff00": 305, "0000ff": 305, "anywher": [306, 307, 571, 572, 573, 1080, 1081, 1082], "ends_with_lit": 306, "ends_with_expr": 306, "starts_with_lit": 307, "starts_with_expr": 307, "complex": [308, 326, 591, 679, 819, 841, 1108, 1124], "frac": [308, 377, 378, 379, 532, 591, 679, 819, 897, 898, 899, 1041, 1108, 1124], "supersed": [309, 679], "to_fram": [311, 342, 362, 367, 369, 571, 842, 1004, 1029, 1030, 1071, 1072, 1080, 1124], "categoricalord": [312, 824], "lexic": [312, 791, 824, 826], "259921": [313, 679, 827, 1124], "587401": [313, 679], "foo_clip": [315, 316, 317, 679], "clip": [316, 317, 679, 832, 833, 1124], "543081": [319, 679, 836, 1124], "cumul": [321, 322, 323, 324, 325, 618, 619, 620, 621, 679, 837, 838, 839, 840, 1124], "a_revers": [321, 322, 323, 324, 325, 464, 507, 583, 679], "value_cummax": [322, 679], "value_cummax_all_fil": [322, 679], "value_cumsum": [325, 679], "value_cumsum_all_fil": [325, 679], "min_period": [326, 377, 378, 379, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 656, 657, 679, 841, 897, 898, 899, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1124], "slide": [326, 679, 841, 1124], "realli": [326, 679, 841, 1124], "visit": [326, 679, 841, 1124], "label": [327, 499, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 679, 739, 788, 842, 1004, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1124], "left_clos": [327, 499, 679, 842, 1004, 1124], "include_break": [327, 499, 679, 842, 1004, 1124], "bin": [327, 499, 555, 599, 672, 679, 842, 913, 1004, 1064, 1118, 1124], "discret": [327, 329, 374, 429, 444, 499, 679, 842, 844, 895, 913, 952, 967, 1004, 1124], "plu": [327, 460, 679, 842, 983, 1004, 1124], "endpoint": [327, 499, 512, 513, 514, 515, 516, 518, 519, 520, 679, 842, 1004, 1124], "observ": [327, 377, 378, 379, 499, 679, 842, 897, 898, 899, 1004, 1124], "fall": [327, 499, 509, 679, 842, 917, 1004, 1013, 1124], "qcut": [327, 679, 842, 1124], "breakpoint": [327, 499, 679, 842, 1004, 1124], "brk": [327, 499, 679], "foo_bin": [327, 499, 679], "radian": [328, 607, 679], "pi": [328, 679, 835, 1039, 1098, 1124], "720": [328, 501, 679], "540": [328, 501, 679], "360": [328, 501, 679], "180": [328, 501, 679], "null_behavior": [329, 429, 679, 844, 952, 1124], "nullbehavior": [329, 429, 679, 844, 952, 1124], "th": [329, 429, 444, 532, 679, 844, 952, 967, 1041, 1124], "drop_nan": [332, 679, 847, 1124], "utc": [333, 336, 341, 361, 571, 573, 791, 849, 852, 857, 881, 1080, 1082], "usual": [333, 849], "vari": [333, 849, 1132], "rare": [333, 849], "countri": [333, 849], "switch": [333, 849], "samoa": [333, 849], "apia": [333, 849], "did": [333, 849], "2011": [333, 849], "dst_offset": [333, 369, 849, 889], "2012": [333, 849], "replace_time_zon": [333, 341, 853, 854, 886], "pacif": [333, 849], "11h": [333, 849], "13h": [333, 849], "lose": [334, 850], "2001": [334, 339, 342, 343, 345, 351, 353, 358, 359, 360, 362, 367, 369, 370, 371, 372, 512, 513, 515, 518, 519, 520, 571, 679, 791, 850, 855, 858, 859, 861, 863, 864, 865, 866, 868, 870, 871, 873, 876, 878, 879, 880, 882, 887, 889, 890, 891, 892, 893, 1080], "time_unit_m": [334, 850], "time_unit_n": [334, 850], "naiv": [335, 851, 1082], "compon": [335, 363, 571, 573, 628, 851, 883, 1080, 1082], "resolv": 335, "tm": [335, 791], "456000": [335, 851], "101000": 335, "456": [335, 791, 851, 1102, 1124], "07": [335, 361, 362, 369, 571, 623, 626, 634, 791, 851, 881, 1080], "101": [335, 555, 1064, 1132], "d1": 335, "d2": 335, "d3": 335, "europ": [336, 341, 361, 369, 852, 857, 881, 889], "london": [336, 341, 361, 369, 852, 857, 881, 889], "gmt": [336, 341, 361, 369, 852, 857, 881, 889], "bst": [336, 341, 361, 369, 852, 857, 881, 889], "weekdai": [339, 359], "ordinal_dai": [339, 371], "day_of_month": [339, 359, 371], "day_of_year": [339, 359, 371], "356": [339, 359, 371], "357": [339, 359, 371], "358": [339, 359, 371], "359": [339, 359, 371], "days_diff": 340, "base_utc_offset": [341, 857], "26": [341, 370, 857], "0m": [341, 857], "epochtimeunit": [342, 634, 858], "unix": [342, 634, 858], "epoch_n": [342, 858], "epoch_": [342, 858], "978307200000000": [342, 367, 858, 887], "978307200": [342, 858], "978393600000000": [342, 367, 858, 887], "978393600": [342, 858], "978480000000000": [342, 367, 858, 887], "978480000": [342, 858], "2010": [343, 351, 791], "hours_diff": 344, "leap": [345, 358, 861, 878], "2002": [345, 358, 861, 878, 893], "iso": [346, 370, 371, 862, 890, 891], "1977": [346, 373], "1978": [346, 373], "1979": [346, 373], "calendar_year": [346, 373], "1976": [346, 373], "1_001": [347, 348, 350, 357], "002": [347, 348, 350, 357, 628, 867, 869, 877], "003": [347, 348, 350, 357], "3000": 347, "997": [347, 348, 350, 357], "997000": 347, "998": [347, 348, 350, 357], "998000": 347, "999": [347, 348, 350, 357, 791, 1132], "999000": [347, 791], "microseconds_diff": 348, "milliseconds_diff": 350, "minutes_diff": 352, "1440": [352, 872], "think": [354, 355, 874, 875], "vectoris": [354, 355, 874, 875], "tseri": [354, 355, 874, 875], "monthend": [354, 874], "rollforward": [354, 874], "monthbegin": [355, 875], "rollback": [355, 875], "nanoseconds_diff": 357, "1000000": [357, 579, 877], "minu": [358, 878], "dictat": [358, 878], "2005": [358, 878], "date_plus_1i": [358, 878], "1y2mo": [358, 878], "date_min": 358, "1998": [358, 878], "1999": [358, 791, 878], "2003": [358, 634, 878], "2004": [358, 878], "2006": [358, 878], "new_dat": 358, "ordin": [359, 502, 679, 879, 1006, 1124], "366": [359, 879], "use_earliest": [361, 369, 571, 573, 625, 881, 889, 1080, 1082], "ambigu": [361, 369, 571, 573, 625, 881, 889, 1080, 1082], "convert_time_zon": [361, 881], "earliest": [361, 369, 571, 573, 625, 881, 889, 1080, 1082], "london_timezon": [361, 881], "amsterdam": [361, 881], "london_to_amsterdam": [361, 881], "cet": [361, 881], "cest": [361, 881], "ts_local": [361, 881], "brussel": [361, 881], "half": [362, 377, 378, 379, 679, 882, 897, 898, 899, 1124], "225": [362, 369], "10m": [362, 369, 882, 889], "milli": [363, 883], "micro": [363, 883], "456789": [363, 791, 883], "111110": [363, 883], "765431": [363, 883], "11111": [363, 883], "seconds_diff": 364, "to_str": [365, 885], "datetime_str": [365, 368], "timestamp_n": [367, 887], "timestamp_m": 367, "978307200000": 367, "978393600000": 367, "978480000000": 367, "strftime": [368, 888], "offset_bi": [369, 628, 889], "15m": [369, 889], "ambiguous_map": 369, "map_dict": [369, 465, 679, 889, 1124], "53": [370, 890], "time_unit_u": 372, "32971": [372, 892], "32974": [372, 892], "32976": [372, 892], "iso_year": 373, "718281828459045": [374, 458, 679, 895, 981, 1124], "pk": [374, 679, 895, 1124], "probabl": [374, 499, 679, 895, 1004, 1124], "459148": [374, 679], "754888": [374, 679], "eq": [376, 679, 1124], "span": [377, 378, 379, 679, 897, 898, 899, 1124], "half_lif": [377, 378, 379, 679, 897, 898, 899, 1124], "adjust": [377, 378, 379, 532, 679, 897, 898, 899, 1041, 1124], "exponenti": [377, 378, 379, 381, 496, 679, 897, 898, 899, 900, 1124], "weight": [377, 378, 379, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 532, 679, 897, 898, 899, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1041, 1124], "decai": [377, 378, 379, 679, 897, 898, 899, 1124], "term": [377, 378, 379, 551, 554, 679, 897, 898, 899, 1060, 1063, 1124], "mass": [377, 378, 379, 679, 897, 898, 899, 1124], "gamma": [377, 378, 379, 679, 897, 898, 899, 1124], "foral": [377, 378, 379, 679, 897, 898, 899, 1124], "geq": [377, 378, 379, 679, 897, 898, 899, 1124], "theta": [377, 378, 379, 679, 897, 898, 899, 1124], "life": [377, 378, 379, 679, 897, 898, 899, 1124], "exp": [377, 378, 379, 679, 897, 898, 899, 1124], "ln": [377, 378, 379, 679, 897, 898, 899, 1124], "smooth": [377, 378, 379, 679, 897, 898, 899, 1124], "factor": [377, 378, 379, 590, 679, 897, 898, 899, 1107, 1124], "leq": [377, 378, 379, 679, 897, 898, 899, 1124], "imbal": [377, 378, 379, 679, 897, 898, 899, 1124], "ew": [377, 378, 379, 679, 897, 898, 899, 1124], "w_i": [377, 378, 379, 679, 897, 898, 899, 1124], "recurs": [377, 378, 379, 679, 897, 898, 899, 1124], "y_t": [377, 378, 379, 679, 897, 898, 899, 1124], "y_": [377, 378, 379, 679, 897, 898, 899, 1124], "x_t": [377, 378, 379, 679, 897, 898, 899, 1124], "x_2": [377, 378, 379, 679, 897, 898, 899, 1124], "428571": [377, 679], "bia": [378, 379, 416, 517, 532, 679, 898, 899, 940, 1021, 1041, 1124], "unbias": [378, 379, 679, 898, 899, 1124], "963624": [378, 679, 898, 1124], "928571": [379, 679, 899, 1124], "wildcard": [380, 618, 619, 632, 654, 675, 679], "regex": [380, 473, 539, 540, 541, 544, 546, 547, 548, 556, 557, 564, 630, 679, 791, 1048, 1049, 1050, 1053, 1055, 1056, 1057, 1065, 1066, 1073], "aa": [380, 539, 630, 679, 1048], "ba": [380, 564, 630, 679, 791], "cc": [380, 630, 679], "718282": [381, 679], "389056": [381, 679], "54": [381, 679, 1132], "59815": [381, 679], "expand": [382, 472, 473, 505, 679, 791, 901, 1124], "pythonliter": [383, 679, 903, 987, 990, 1124], "extrem": [383, 511, 679, 903, 1015, 1124], "group_col": [386, 598, 679], "g1": [386, 598, 679], "g2": [386, 598, 679], "lt": [386, 598, 679, 1124], "gte": [386, 598, 679], "exprlistnamespac": [388, 679], "divis": [390, 592, 679], "truediv": [390, 679], "9774092659964970114": [395, 679], "13614470193936745724": [395, 679], "1101441246220388612": [395, 679], "11638928888656214026": [395, 679], "13382926553367784577": [395, 679], "cumsum": [398, 582, 621, 679, 722, 788, 939, 1124], "interpolationmethod": [399, 679, 916, 1124], "regrid": [399, 679], "grid": [399, 679], "df_original_grid": [399, 679], "grid_point": [399, 679], "df_new_grid": [399, 679], "conflat": [400, 679], "finit": [402, 592, 615, 679, 921, 1124], "occurr": [403, 404, 407, 408, 596, 679, 913, 922, 923, 928, 929, 1112, 1124], "is_first_distinct": [403, 679, 922, 1124], "optional_memb": [405, 679, 925, 1124], "infinit": [406, 592, 679, 926, 1124], "is_last_distinct": [407, 679, 928, 1124], "_isnan": [409, 679], "b_isnan": [409, 679], "negat": [410, 490, 679, 998, 1124], "_is_not_nan": [411, 679], "b_is_not_nan": [411, 679], "_not_nul": [412, 679], "a_not_nul": [412, 679], "b_not_nul": [412, 679], "_isnul": [413, 679], "a_isnul": [413, 679], "b_isnul": [413, 679], "constraint": [415, 497, 583, 679], "chain": [415, 497, 583, 669, 679], "undo": [415, 479, 497, 583, 679], "333333": [415, 679, 1000, 1024, 1124], "fisher": [416, 532, 679, 940, 1041, 1124], "fourth": [416, 679, 940, 1124], "subtract": [416, 582, 679, 940, 1124], "distribut": [416, 532, 679, 940, 1041, 1124], "elimin": [416, 679, 940, 1124], "bias": [416, 532, 679, 940, 1041, 1124], "scipi": [416, 532, 679, 940, 1041, 1124], "stat": [416, 532, 679, 940, 1041, 1124], "153061": [416, 679], "sublist": [423, 424, 426, 429, 433, 434, 435, 437, 438, 444, 449, 453, 454, 455, 925, 946, 947, 949, 952, 956, 957, 958, 960, 961, 967, 972, 976, 977, 978, 1124], "membership": [426, 949], "listcol": 428, "number_of_two": 428, "set_differ": [430, 953], "blindli": [431, 954], "worth": [431, 954], "enough": [431, 532, 679, 954, 1041, 1124], "concat_list": [431, 629, 954], "rank": [431, 615, 629, 679, 954, 1124], "exprnamespac": 432, "flat": [432, 506, 679, 955, 1010, 1124], "set_intersect": [436, 959], "symmetr": [446, 452, 969, 975], "sdiff": 446, "taken": [449, 560, 972, 1069], "set_symmetric_differ": [452, 975], "null_on_oob": [454, 977], "cheaper": [454, 977], "n_field_strategi": [455, 978], "tostructstrategi": [455, 978], "first_non_nul": [455, 978], "max_width": [455, 978], "field_0": [455, 978], "field_1": [455, 978], "field_n": [455, 978], "pre": [455, 467, 499, 652, 655, 670, 679, 1004, 1124], "n0": 455, "n1": 455, "set_union": [456, 979], "logarithm": [458, 459, 460, 679, 981, 982, 983, 1124], "584963": [458, 679], "30103": [459, 679], "60206": [459, 679], "natur": [460, 679, 983, 1124], "693147": [460, 679], "098612": [460, 679], "386294": [460, 679], "lowest": [461, 679], "9223372036854775808": [461, 679], "agg_list": [463, 465, 679], "map_batch": [463, 642, 679, 729, 788], "b_revers": [464, 507, 583, 679], "rstrip": [464, 679], "_revers": [464, 507, 583, 679], "whole": [465, 534, 535, 546, 679, 776, 788, 1055], "elementwis": [465, 510, 511, 512, 513, 515, 519, 679, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1124], "third": [465, 679], "parti": [465, 679], "book": [465, 679], "bug": [465, 467, 679, 729, 730, 771, 776, 788, 986, 1124], "func": [465, 679], "argmax": [465, 679], "remap": [466, 679, 985, 1124], "lookup": [466, 675, 679, 985, 1124], "country_code_dict": [466, 679], "ca": [466, 679], "canada": [466, 679], "de": [466, 679], "germani": [466, 679], "fr": [466, 679], "franc": [466, 679], "country_cod": [466, 679], "rest": [466, 679], "discourag": [467, 679], "loop": [467, 679], "a_times_2": [467, 679], "tip": [467, 679], "again": [467, 679], "behav": [467, 679, 797, 1124], "exprmetanamespac": [471, 474], "foo_bar2": [471, 474], "computeerror": [475, 555, 690, 1064], "e_filt": [475, 477], "e_sum_ov": [475, 477], "e_sum_slic": [475, 477], "e_count": 475, "tree": 478, "keep_nam": [479, 679], "modulu": [482, 679], "xlog2": [484, 496, 679], "poison": [486, 487, 679, 995, 996, 1124], "nanmax": [486, 487, 679, 995, 996, 1124], "inequ": [488, 679], "ne": [489, 679, 1124], "more_expr": [493, 609, 612, 613, 614, 679], "mapping_strategi": [493, 679], "windowmappingstrategi": [493, 679], "group_to_row": [493, 679], "outcom": [493, 679], "group_dtyp": [493, 679], "warn": [493, 679], "flatten": [493, 679], "_max": [493, 679], "c_max": [493, 679], "_min": [493, 679], "c_min": [493, 679], "percent": [494, 679, 1000, 1124], "090909": [494, 679], "extract_numb": [495, 679], "digit": [495, 521, 547, 579, 679, 1025, 1050, 1056, 1088, 1124, 1132], "scale_negative_even": [495, 679], "expon": [496, 679, 1124], "reverse_": [497, 679], "reverse_a": [497, 679], "reverse_b": [497, 679], "allow_dupl": [499, 679, 1004, 1124], "duplicateerror": [499, 679, 690, 1004, 1124], "happen": [499, 679, 1004, 1124], "cut": [499, 679, 1004, 1124], "566371": [501, 679], "424778": [501, 679], "283185": [501, 679], "141593": [501, 679, 799, 1124], "rankmethod": [502, 679, 1006, 1124], "ti": [502, 679, 1006, 1124], "competit": [502, 679, 1006, 1124], "highest": [502, 595, 615, 679, 788, 1006, 1124], "immedi": [502, 606, 610, 623, 624, 626, 627, 638, 639, 652, 655, 661, 666, 667, 670, 679, 1006, 1124], "64bit": [504, 679, 1008, 1124], "safe": [504, 679, 1008, 1082, 1105, 1124], "fruits_revers": [507, 679], "cars_revers": [507, 679], "rle": [509, 679, 1013, 1124], "themselv": [509, 679, 1013, 1124], "a_r": [509, 679], "ab_r": [509, 679], "window_s": [510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 656, 657, 679, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1124], "rolling_map": [510, 679, 1014, 1124], "multipli": [510, 511, 512, 513, 515, 518, 519, 520, 679, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1124], "rolling_sum": [511, 679, 1015, 1124], "nansum": [511, 679, 1015, 1124], "travers": [512, 513, 515, 519, 679, 1016, 1017, 1019, 1022, 1023, 1024, 1124], "vector": [512, 513, 515, 519, 679, 1016, 1017, 1019, 1022, 1023, 1024, 1124], "5h": [512, 513, 514, 515, 516, 518, 519, 520, 679], "df_tempor": [512, 513, 515, 518, 519, 520, 679], "closur": [512, 513, 518, 519, 520, 679], "rolling_row_max": [512, 679], "2h": [512, 513, 515, 518, 519, 520, 679], "rolling_row_mean": [513, 679], "rolling_row_min": [515, 679], "625": [516, 679], "skew": [517, 679, 1021, 1124], "381802": [517, 679, 1021, 1124], "47033": [517, 679, 1021, 1124], "38180177416060584": [517, 679, 1021, 1124], "47033046033698594": [517, 679, 1021, 1124], "433013": [518, 679, 754, 788], "rolling_row_std": [518, 679], "rolling_row_sum": [519, 679], "39": [519, 634, 679], "63": [519, 679], "69": [519, 679], "1875": [520, 679, 762, 788], "rolling_row_var": [520, 679], "searchsortedsid": [523, 679, 1027, 1124], "leftmost": [523, 679, 1027, 1124], "rightmost": [523, 679, 1027, 1124], "six": [523, 679], "extrema": [527, 679, 1035, 1124], "112": [527, 679, 1132], "129": [527, 679], "i8": [527, 652, 655, 670, 679, 844, 1011, 1111, 1124], "8589934592": [527, 679], "1073741824": [527, 679], "content": [528, 679, 1037, 1124], "175201": [531, 679, 1040, 1124], "unimod": [532, 679, 1041, 1124], "skewtest": [532, 679, 1041, 1124], "speak": [532, 679, 1041, 1124], "g_1": [532, 679, 1041, 1124], "m_3": [532, 679, 1041, 1124], "m_2": [532, 679, 1041, 1124], "m_i": [532, 679, 1041, 1124], "sum_": [532, 679, 1041, 1124], "texttt": [532, 679, 1041, 1124], "k_3": [532, 679, 1041, 1124], "k_2": [532, 679, 1041, 1124], "sqrt": [532, 607, 608, 679, 1041, 1124], "343622": [532, 679], "value1": [535, 679], "value2": [535, 679], "attain": [535, 679], "414214": [536, 679, 1044, 1124], "sensit": [539, 547, 556, 1048, 1056, 1065], "ilmsuxu": [539, 546, 547, 556, 1048, 1055, 1056, 1065], "default_match": 539, "insensitive_match": 539, "section": [539, 546, 547, 556, 623, 624, 626, 627, 666, 667, 1048, 1055, 1056, 1065], "crab": [539, 1048], "dog": [539, 575, 578, 614, 1048, 1084, 1087], "rab": [539, 1048], "success": [540, 541, 547, 1049, 1050, 1056], "overlap": [540, 541, 547, 1049, 1050, 1056], "123": [541, 547, 557, 791, 1050, 1056, 1066, 1102, 1124], "bla": [541, 547, 1050, 1056], "asd": [541, 547, 1050, 1056], "678": [541, 547, 1050, 1056], "910t": [541, 547, 1050, 1056], "count_digit": 541, "dbc": [541, 1050], "3xy": [541, 1050], "1zy3": [541, 1050], "666f6f": [543, 1052], "626172": [543, 1052], "mango": [544, 564, 1053, 1073], "go": [544, 1053], "has_suffix": 544, "le": [544, 679, 1124], "nu": 544, "group_index": [546, 1055], "captur": [546, 548, 1055, 1057], "nthose": [546, 1055], "nodd": [546, 1055], "nthe": [546, 1055], "vote": [546, 548, 1055, 1057], "ballon_dor": [546, 548, 1055, 1057], "404": [546, 548, 1055, 1057], "ref": [546, 548, 1055, 1057], "candid": [546, 548, 1055, 1057], "messi": [546, 548, 1055, 1057], "ronaldo": [546, 1055], "haystack": [547, 1056], "email": [547, 1056], "real": [547, 1056], "some_account": [547, 1056], "somewher": [547, 1056], "net": [547, 1056], "jkl": [547, 1056], "uvw": [547, 1056], "co": [547, 679, 1056, 1124], "uk": [547, 1056], "address": 547, "xi": [547, 1056], "insensit": [547, 556, 791, 1048, 1056, 1065], "quantifi": [547, 1056], "email_part": [547, 1056], "extracted_nr": 547, "910": [547, 1056], "unnam": [548, 1057], "weghorst": [548, 1057], "candi": 548, "json_path_match": [549, 1058], "jsonpath": [549, 550, 1058, 1059], "json_path": [550, 1059], "json_val": [550, 1059], "n_char": [551, 1060], "caf\u00e9": [551, 554, 1060, 1063], "345": [551, 554, 1060, 1063], "\u6771\u4eac": [551, 554, 1060, 1063], "nchar": [551, 554], "fill_char": [552, 558, 1061, 1067], "justifi": [552, 558, 1061, 1067], "pad": [552, 558, 579, 1061, 1067, 1088], "cow": [552, 558, 1061, 1067], "monkei": [552, 558, 1061, 1067], "hippopotamu": [552, 558, 1061, 1067], "strip_chars_start": [553, 1062], "strip": [553, 559, 566, 567, 568, 569, 570, 1062, 1068, 1075, 1076, 1077], "radix": [555, 1064], "parseerror": [555, 1064], "becom": [555, 1064], "silent": [555, 1064], "110": [555, 1064], "010": [555, 1064], "fa1e": [555, 1064], "ff00": [555, 1064], "cafe": [555, 1064], "64030": [555, 1064], "65280": [555, 1064], "51966": [555, 1064], "replace_al": [556, 1065], "citi": 556, "philadelphia": 556, "season": 556, "spring": 556, "summer": 556, "autumn": 556, "winter": 556, "weather": [556, 1065], "raini": [556, 1065], "sunni": [556, 1065], "cloudi": 556, "snowi": 556, "foggi": [556, 1065], "123abc": [556, 1065], "abc456": [556, 1065], "abcabc": [557, 1066], "123a123": [557, 1066], "bc": [557, 662, 1066], "strip_chars_end": [559, 1068], "subslic": [560, 1069], "pear": [560, 1069], "papaya": [560, 1069], "dragonfruit": [560, 1069], "s_slice": 560, "ear": [560, 1069], "aya": [560, 1069], "uit": [560, 1069], "ya": [560, 1069], "onf": [560, 1069], "foo_bar_baz": 561, "split_inclus": 561, "foo_": [561, 633], "bar_": 561, "a_1": [562, 1071, 1101, 1124], "d_4": [562, 1071], "rename_field": [562, 563, 842, 1004, 1071, 1072, 1124], "first_part": [562, 563, 1071, 1072], "second_part": [562, 563, 1071, 1072], "remaind": [563, 1072], "app": [564, 1073], "has_prefix": 564, "strip_char": [565, 1074], "nworld": 566, "ow": 566, "hell": [566, 1075], "rld": [566, 568, 1077], "oldw": 567, "he": 567, "tworld": [568, 1075, 1077], "wod": [568, 1077], "foobar": [569, 570, 1078, 1079], "foofoobar": [569, 1078], "foobarbar": [570, 1079], "polarstemporaltyp": [571, 1080], "introduc": [571, 572, 573, 1080, 1081, 1082], "penalti": [571, 572, 573, 1080, 1081, 1082], "clean": [571, 572, 573, 1080, 1081, 1082], "beforehand": [571, 572, 573, 1080, 1081, 1082], "certainli": [571, 572, 573, 1080, 1081, 1082], "3f": [571, 573, 1080, 1082], "00z": [571, 573, 1080, 1082], "sun": [571, 1080], "jul": [571, 1080], "34": [571, 1080], "inference_length": [574, 1083], "3420": [574, 1083], "120134": [574, 1083], "3212": [574, 1083], "143": [574, 1083, 1132], "lowercas": [575, 1084], "variant": [575, 577, 578], "titlecas": [577, 1086], "sing": [577, 1086], "welcom": [577, 1086], "THERE": [577, 1086], "NO": [577, 791, 1086], "There": [577, 1086], "uppercas": [578, 1087], "100000": 579, "0010": 579, "0001": 579, "00000": 579, "00001": 579, "cd": [580, 581], "struct_col": [580, 581], "www": 581, "xxx": 581, "yyi": 581, "zzz": 581, "obvious": 581, "structfieldnotfounderror": [581, 690], "761594": [589, 679, 1099, 1124], "replic": [590, 679, 1107, 1124], "vals_phys": [590, 679], "floordiv": [592, 679], "ieee": [592, 679], "754": [592, 679], "mathemat": [592, 629, 679], "undefin": [592, 679], "On": [592, 679], "operand": [592, 679], "infin": [592, 679], "value_count": [594, 679, 1124], "9223372036854775807": [595, 679], "binary_str": [599, 679], "zfill": [599, 679], "250": [599, 679, 1017, 1124, 1132], "bin_x": [599, 679], "bin_i": [599, 679], "xor_xi": [599, 679], "bin_xor_xi": [599, 679], "00001010": [599, 679], "00000001": [599, 679], "00001011": [599, 679], "00001000": [599, 679], "00000010": [599, 679], "11111010": [599, 679], "00000011": [599, 679], "249": [599, 679], "11111001": [599, 679], "01000010": [599, 679], "00000100": [599, 679], "70": [599, 679], "01000110": [599, 679], "AND": [600, 601, 791, 1105, 1124], "any_horizont": 602, "returns_scalar": [604, 644], "polarsintegertyp": [606, 638, 639], "arctan": [607, 608, 679, 1124], "angl": [607, 608], "plane": [607, 608], "rai": [607, 608], "tworoottwo": [607, 608], "arctan2d": 607, "atan2d": [607, 608], "atan2": [607, 608], "135": [607, 608], "356194": [607, 608], "arctan2": 608, "arg_tru": [610, 679, 1124], "lag": 613, "mimic": 613, "a_lag_": 613, "a_rol": 613, "swim": 614, "walk": 614, "full_sent": 614, "correlationmethod": 615, "propagate_nan": 615, "spearman": 615, "544705": 615, "covari": [617, 657], "acc": [618, 619, 632, 654], "include_init": 618, "accumul": [618, 619, 632, 654], "fn": [618, 619, 632, 654], "new_valu": [618, 619, 632, 654], "cumreduc": 618, "cumsum_horizont": 620, "month_end": 623, "granular": 623, "finer": 623, "permut": 623, "1985": [623, 626], "999999": [625, 665, 666, 667, 791], "america": 626, "new_york": 626, "est": 626, "contrast": 628, "sometim": [628, 678], "tbl_width_char": 628, "120": 628, "add_week": 628, "add_dai": 628, "add_second": 628, "add_milli": 628, "add_hour": 628, "add_calendar_dai": 628, "add_calendar_month": 628, "mo": 628, "add_calendar_year": 628, "2024": [628, 791], "a_b_doubl": 629, "f_string": 633, "placehold": 633, "hello_": 633, "_world": 633, "_bar_": 633, "foo_a_bar_1": 633, "foo_b_bar_2": 633, "foo_c_bar_3": 633, "epoch": 634, "timestep": 634, "1666683077": 634, "1666683099": 634, "12345": [634, 828, 908, 1025, 1124], "12346": 634, "agg_group": [635, 679], "allow_object": 641, "valueexcept": 641, "test_func": 643, "list_of_seri": 644, "my_custom_aggreg": 644, "understood": 644, "max_horizont": 645, "min_horizont": [649, 658], "power": [659, 1124], "a_a": 659, "a_txt": 659, "605551": 660, "605551275463989": 660, "my_struct": 661, "thens": 669, "elif": 669, "pick": 669, "afterward": 669, "own": [669, 1132], "isn": 669, "arr": [671, 1105, 1116, 1124], "technic": 675, "further": [675, 1106, 1124], "columnfactori": 675, "helper": 675, "__call__": 675, "__getattr__": 675, "idiomat": [675, 776], "quick": [675, 843, 1124, 1132], "prototyp": 675, "keystrok": 675, "drawback": 675, "readabl": 675, "more_nam": 675, "hamburg": 675, "modul": [678, 791, 1132], "and_": 679, "arcco": [679, 1124], "arccosh": [679, 1124], "arcsin": [679, 1124], "arcsinh": [679, 1124], "arctanh": [679, 1124], "arg_max": [679, 1124], "arg_min": [679, 1124], "arg_sort": [679, 1124], "arg_uniqu": [679, 1124], "backward_fil": 679, "cbrt": [679, 1124], "clip_max": [679, 1124], "clip_min": [679, 1124], "cosh": [679, 1124], "cumcount": 679, "cummax": [679, 1124], "cummin": [679, 1124], "cumulative_ev": [679, 1124], "entropi": [679, 1124], "eq_miss": [679, 1124], "ewm_mean": [679, 1124], "ewm_std": [679, 1124], "ewm_var": [679, 1124], "extend_const": [679, 1124], "from_json": [679, 788], "ge": [679, 1124], "gt": [679, 1124], "implod": [679, 1124], "inspect": [679, 788], "is_between": [679, 1124], "is_finit": [679, 1124], "is_first": [679, 1124], "is_in": [679, 1124], "is_infinit": [679, 1124], "is_last": [679, 1124], "is_nan": [679, 1124], "is_not": 679, "is_not_nan": [679, 1124], "is_not_nul": [679, 1124], "kurtosi": [679, 1124], "log10": [679, 1124], "log1p": [679, 1124], "mod": 679, "mul": 679, "nan_max": [679, 1124], "nan_min": [679, 1124], "ne_miss": [679, 1124], "or_": 679, "pct_chang": [679, 1124], "pow": [679, 1124], "reinterpret": [679, 1124], "repeat_bi": 679, "rle_id": [679, 1124], "rolling_appli": [679, 1124], "rolling_max": [679, 1124], "rolling_mean": [679, 1124], "rolling_median": [679, 1124], "rolling_min": [679, 1124], "rolling_quantil": [679, 1124], "rolling_skew": [679, 1124], "rolling_std": [679, 1124], "rolling_var": [679, 1124], "search_sort": [679, 1124], "shrink_dtyp": [679, 1124], "sin": [679, 1124], "sinh": [679, 1124], "sort_bi": 679, "tan": [679, 1124], "to_phys": [679, 825, 1124], "unique_count": [679, 1124], "xor": 679, "expos": 690, "miscellan": 690, "arrowerror": 690, "columnnotfounderror": 690, "invalidoperationerror": 690, "polarspanicerror": 690, "schemaerror": 690, "schemafieldnotfounderror": 690, "shapeerror": 690, "parametr": 690, "build_info": 690, "get_index_typ": 690, "show_vers": 690, "threadpool_s": 690, "sqlcontext": [690, 1131], "hit": [696, 788], "node": [696, 722, 729, 730, 734, 739, 742, 788], "huge": [700, 788], "saver": [700, 788], "collect_all_async": [701, 788], "async": [701, 788], "stringio": [703, 714, 747, 788], "snippet": [705, 788], "purpos": [709, 788], "Be": [709, 788], "suscept": [709, 788], "deseri": [714, 741, 747, 788], "lazygroupbi": [715, 716, 717, 718, 719, 720, 788], "dynamic_group_bi": [717, 788], "other_lf": [724, 788], "validate_output_schema": [729, 730, 788], "streamabl": [729, 730, 734, 788], "past": [729, 730, 788], "paramount": [729, 730, 788], "elig": [729, 730, 788], "invari": [730, 788], "upheld": [730, 788], "prune": [730, 788], "100_000": [730, 788], "200000": [730, 788], "199998": [730, 788], "199996": [730, 788], "199994": [730, 788], "199992": [730, 788], "show_plot": [739, 788], "truncate_nod": [739, 788], "figsiz": [739, 751, 788], "gantt": [739, 788], "plot": [739, 751, 788], "group_by_partit": [739, 788], "470": [739, 788], "475": [739, 788], "1964": [739, 788], "swap": [742, 788], "dataframescan": [747, 788], "output_schema": [747, 788], "run_parallel": [747, 788], "duplicate_check": [747, 788], "later": [747, 788], "output_path": [751, 788], "raw_output": [751, 788], "figur": [751, 788], "290994": [754, 788], "118034": [754, 788], "extern": [766, 788], "lf_other": [766, 788], "afoo": [766, 788], "cfoo": [766, 788], "train_lf": [766, 788], "feature_0": [766, 788], "feature_1": [766, 788], "test_lf": [766, 788], "_train": [766, 788], "feature_0_train": [766, 788], "opaqu": 776, "my_column": 776, "lf5": 788, "lf6": 788, "explain": 788, "read_json": 788, "sink_csv": 788, "sink_ipc": 788, "sink_parquet": 788, "with_context": 788, "intuit": 791, "broadcast": 791, "emploi": 791, "complement": 791, "plenti": 791, "cde": 791, "fgg": 791, "jjk": 791, "lmn": 791, "opp": 791, "qqr": 791, "by_dtyp": 791, "as_expr": 791, "dispatch": 791, "1_234_500": 791, "5_000_555": 791, "1234500": 791, "5000555": 791, "by_nam": 791, "4_500_000": 791, "4500000": 791, "3265500": 791, "zap": 791, "2031": 791, "tstamp_tokyo": 791, "987654": 791, "123465": 791, "tstamp_utc": 791, "2025": 791, "666000": 791, "tstamp": 791, "600000": 791, "123000": 791, "666": 791, "td1": 791, "123456": 791, "987000": 791, "td2": 791, "td3": 791, "2m": [791, 871], "456m": 791, "7d": 791, "456789\u00b5": 791, "18d": 791, "999999\u00b5": 791, "23h": 791, "987m": 791, "14d": 791, "16h": 791, "39m": 791, "21d": 791, "456001\u00b5": 791, "expand_selector": 791, "789": 791, "colz": [791, 1132], "everyth": 791, "signed_integ": 791, "unsigned_integ": 791, "is_selector": 791, "obj": 791, "include_categor": 791, "set_ord": [791, 826], "2345": 791, "3456": 791, "append_chunk": [797, 1124], "super": [797, 1124], "292432": [800, 1124], "549306": [804, 1124], "catnamespac": 821, "56789": [828, 908, 1025, 1124], "901234": [828, 908, 1025, 1124], "1232e": [835, 1124], "break_point_label": [842, 1004, 1124], "break_point": [842, 913, 1004, 1124], "category_label": [842, 1004, 1124], "series_num": [843, 1124], "581139": [843, 1124], "series_str": [843, 1124], "datetimeindex": [845, 1124], "datetimenamespac": 848, "ser": [853, 854, 886], "kathmandu": [853, 854, 886], "0545": [853, 854, 886], "500m": [866, 868, 876], "500000": 866, "500000000": 876, "date_minus_1y_2mon": 878, "165": [882, 889], "series_equ": [882, 1124], "timestamp_u": 887, "978307200000000000": 887, "978393600000000000": 887, "978480000000000000": 887, "005": [895, 1124], "06293300616044681": [895, 1124], "65": [895, 1124], "8568409950394724": [895, 1124], "4000000": [896, 1124], "814697265625": [896, 1124], "bitmask": [910, 1124], "swiftli": [910, 1124], "10734580197236529959": [911, 1124], "3022416320763508302": [911, 1124], "13756996518000038261": [911, 1124], "bin_count": [913, 1124], "a_count": [913, 1124], "listnamespac": 943, "field_2": 978, "n00": 978, "n01": 978, "n02": 978, "2147483648": [984, 1124], "iso3166": [985, 1124], "tur": [985, 1086, 1124], "jpn": [985, 1124], "nld": [985, 1124], "country_lookup": [985, 1124], "japan": [985, 1124], "t\u00fcrkiy": [985, 1124], "netherland": [985, 1124], "unrecognis": [985, 1124], "unspecifi": [985, 1124], "country_nam": [985, 1124], "166667": [1000, 1124], "142857": [1000, 1124], "peak": [1001, 1002, 1124], "200": [1016, 1017, 1019, 1124], "150": [1017, 1124], "350": [1017, 1124], "450": [1017, 1124], "dev": [1022, 1124], "527525": [1022, 1124], "57": [1025, 1124, 1132], "frequent": [1029, 1030, 1124], "mutat": [1030, 1124], "2246e": [1039, 1098, 1124], "stringnamespac": 1046, "orld": 1076, "6331e16": [1098, 1124], "lib": [1100, 1124], "int64arrai": [1100, 1124], "a_2": [1101, 1124], "a_3": [1101, 1124], "s_from_str_repr": [1103, 1124], "zero_copy_onli": [1105, 1124], "writabl": [1105, 1124], "presenc": [1105, 1124], "immut": [1105, 1124], "127": [1111, 1124], "seriesview": [1114, 1124], "arraylik": 1124, "dtype_if_empti": 1124, "position": 1124, "scenario": 1124, "chunk_length": 1124, "333": 1124, "get_chunk": 1124, "has_valid": 1124, "hist": 1124, "is_boolean": 1124, "is_float": 1124, "is_integ": 1124, "is_numer": [1124, 1132], "is_sort": 1124, "is_tempor": 1124, "is_utf8": 1124, "new_from_index": 1124, "peak_max": 1124, "peak_min": 1124, "set_at_idx": 1124, "two_a": 1131, "__enter__": 1131, "__exit__": 1131, "exc_typ": 1131, "baseexcept": 1131, "exc_val": 1131, "exc_tb": 1131, "tracebacktyp": 1131, "primari": 1132, "assert_frame_equ": 1132, "assert_series_equ": 1132, "guid": 1132, "machin": 1132, "xdist": 1132, "significantli": 1132, "hardwar": 1132, "setup": 1132, "sec": 1132, "numeric_dtyp": 1132, "null_probabililti": 1132, "test_numer": 1132, "col0": 1132, "col4": 1132, "29096": 1132, "485": 1132, "2147483647": 1132, "8257e14": 1132, "7508": 1132, "37338": 1132, "7264": 1132, "321": 1132, "16996": 1132, "121": 1132, "361": 1132, "63204": 1132, "1443e235": 1132, "conform": 1132, "ascii_lett": 1132, "id_char": 1132, "alphabet": 1132, "price": 1132, "min_valu": 1132, "max_valu": 1132, "test_price_calcul": 1132, "a101": 1132, "8nin": 1132, "qhoo": 1132, "714": 1132, "544": 1132, "i0e0": 1132, "0000": 1132, "test_miscellan": 1132, "235": 1132, "87": 1132, "186": 1132, "174": 1132, "179": 1132, "213": 1132, "221": 1132, "86": 1132, "255": 1132}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [37, 0, 1, "", "DataType"], [38, 0, 1, "", "Date"], [39, 0, 1, "", "Datetime"], [40, 0, 1, "", "Decimal"], [41, 0, 1, "", "Duration"], [42, 0, 1, "", "Float32"], [43, 0, 1, "", "Float64"], [44, 0, 1, "", "Int16"], [45, 0, 1, "", "Int32"], [46, 0, 1, "", "Int64"], [47, 0, 1, "", "Int8"], [51, 0, 1, "", "List"], [52, 0, 1, "", "Null"], [53, 0, 1, "", "Object"], [1131, 0, 1, "", "SQLContext"], [60, 0, 1, "", "StringCache"], [61, 0, 1, "", "Struct"], [62, 0, 1, "", "Time"], [63, 0, 1, "", "UInt16"], [64, 0, 1, "", "UInt32"], [65, 0, 1, "", "UInt64"], [66, 0, 1, "", "UInt8"], [67, 0, 1, "", "Unknown"], [68, 0, 1, "", "Utf8"], [69, 4, 1, "", "align_frames"], [600, 4, 1, "", "all"], [601, 4, 1, "", "all_horizontal"], [602, 4, 1, "", "any"], [603, 4, 1, "", "any_horizontal"], [604, 4, 1, "", "apply"], [605, 4, 1, "", "approx_n_unique"], [606, 4, 1, "", "arange"], [607, 4, 1, "", "arctan2"], [608, 4, 1, "", "arctan2d"], [609, 4, 1, "", "arg_sort_by"], [610, 4, 1, "", "arg_where"], [611, 4, 1, "", "avg"], [74, 4, 1, "", "build_info"], [612, 4, 1, "", "coalesce"], [75, 4, 1, "", "collect_all"], [76, 4, 1, "", "collect_all_async"], [77, 4, 1, "", "concat"], [613, 4, 1, "", "concat_list"], [614, 4, 1, "", "concat_str"], [615, 4, 1, "", "corr"], [616, 4, 1, "", "count"], [617, 4, 1, "", "cov"], [618, 4, 1, "", "cumfold"], [619, 4, 1, "", "cumreduce"], [620, 4, 1, "", "cumsum"], [621, 4, 1, "", "cumsum_horizontal"], [622, 4, 1, "", "date"], [623, 4, 1, "", "date_range"], [624, 4, 1, "", "date_ranges"], [625, 4, 1, "", "datetime"], [626, 4, 1, "", "datetime_range"], [627, 4, 1, "", "datetime_ranges"], [628, 4, 1, "", "duration"], [629, 4, 1, "", "element"], [78, 4, 1, "", "enable_string_cache"], [630, 4, 1, "", "exclude"], [631, 4, 1, "", "first"], [632, 4, 1, "", "fold"], [633, 4, 1, "", "format"], [93, 4, 1, "", "from_arrow"], [94, 4, 1, "", "from_dataframe"], [95, 4, 1, "", "from_dict"], [96, 4, 1, "", "from_dicts"], [634, 4, 1, "", "from_epoch"], [97, 4, 1, "", "from_numpy"], [98, 4, 1, "", "from_pandas"], [99, 4, 1, "", "from_records"], [100, 4, 1, "", "from_repr"], [101, 4, 1, "", "get_index_type"], [635, 4, 1, "", "groups"], [636, 4, 1, "", "head"], [637, 4, 1, "", "implode"], [638, 4, 1, "", "int_range"], [639, 4, 1, "", "int_ranges"], [640, 4, 1, "", "last"], [641, 4, 1, "", "lit"], [642, 4, 1, "", "map"], [643, 4, 1, "", "map_batches"], [644, 4, 1, "", "map_groups"], [645, 4, 1, "", "max"], [646, 4, 1, "", "max_horizontal"], [647, 4, 1, "", "mean"], [648, 4, 1, "", "median"], [649, 4, 1, "", "min"], [650, 4, 1, "", "min_horizontal"], [651, 4, 1, "", "n_unique"], [652, 4, 1, "", "ones"], [653, 4, 1, "", "quantile"], [103, 4, 1, "", "read_avro"], [104, 4, 1, "", "read_csv"], [105, 4, 1, "", "read_csv_batched"], [106, 4, 1, "", "read_database"], [107, 4, 1, "", "read_database_uri"], [108, 4, 1, "", "read_delta"], [109, 4, 1, "", "read_excel"], [110, 4, 1, "", "read_ipc"], [111, 4, 1, "", "read_ipc_schema"], [112, 4, 1, "", "read_ipc_stream"], [113, 4, 1, "", "read_json"], [114, 4, 1, "", "read_ndjson"], [115, 4, 1, "", "read_ods"], [116, 4, 1, "", "read_parquet"], [117, 4, 1, "", "read_parquet_schema"], [654, 4, 1, "", "reduce"], [655, 4, 1, "", "repeat"], [656, 4, 1, "", "rolling_corr"], [657, 4, 1, "", "rolling_cov"], [118, 4, 1, "", "scan_csv"], [119, 4, 1, "", "scan_delta"], [120, 4, 1, "", "scan_ipc"], [121, 4, 1, "", "scan_ndjson"], [122, 4, 1, "", "scan_parquet"], [123, 4, 1, "", "scan_pyarrow_dataset"], [658, 4, 1, "", "select"], [791, 6, 0, "-", "selectors"], [124, 4, 1, "", "set_random_seed"], [125, 4, 1, "", "show_versions"], [659, 4, 1, "", "sql_expr"], [660, 4, 1, "", "std"], [661, 4, 1, "", "struct"], [662, 4, 1, "", "sum"], [663, 4, 1, "", "sum_horizontal"], [664, 4, 1, "", "tail"], [135, 4, 1, "", "threadpool_size"], [665, 4, 1, "", "time"], [666, 4, 1, "", "time_range"], [667, 4, 1, "", "time_ranges"], [136, 4, 1, "", "using_string_cache"], [668, 4, 1, "", "var"], [669, 4, 1, "", "when"], [670, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[139, 1, 1, "", "__dataframe__"], [140, 1, 1, "", "apply"], [141, 1, 1, "", "approx_n_unique"], [142, 1, 1, "", "approx_unique"], [143, 1, 1, "", "bottom_k"], [144, 1, 1, "", "cast"], [145, 1, 1, "", "clear"], [146, 1, 1, "", "clone"], [147, 2, 1, "", "columns"], [148, 1, 1, "", "corr"], [149, 1, 1, "", "describe"], [150, 1, 1, "", "drop"], [151, 1, 1, "", "drop_in_place"], [152, 1, 1, "", "drop_nulls"], [153, 2, 1, "", "dtypes"], [154, 1, 1, "", "estimated_size"], [155, 1, 1, "", "explode"], [156, 1, 1, "", "extend"], [157, 1, 1, "", "fill_nan"], [158, 1, 1, "", "fill_null"], [159, 1, 1, "", "filter"], [160, 1, 1, "", "find_idx_by_name"], [161, 2, 1, "", "flags"], [162, 1, 1, "", "fold"], [163, 1, 1, "", "frame_equal"], [164, 1, 1, "", "get_column"], [165, 1, 1, "", "get_columns"], [166, 1, 1, "", "glimpse"], [167, 1, 1, "", "group_by"], [168, 1, 1, "", "group_by_dynamic"], [169, 1, 1, "", "group_by_rolling"], [170, 1, 1, "", "groupby"], [171, 1, 1, "", "groupby_dynamic"], [172, 1, 1, "", "groupby_rolling"], [173, 1, 1, "", "hash_rows"], [174, 1, 1, "", "head"], [175, 2, 1, "", "height"], [176, 1, 1, "", "hstack"], [177, 1, 1, "", "insert_at_idx"], [178, 1, 1, "", "interpolate"], [179, 1, 1, "", "is_duplicated"], [180, 1, 1, "", "is_empty"], [181, 1, 1, "", "is_unique"], [182, 1, 1, "", "item"], [183, 1, 1, "", "iter_rows"], [184, 1, 1, "", "iter_slices"], [185, 1, 1, "", "join"], [186, 1, 1, "", "join_asof"], [187, 1, 1, "", "lazy"], [188, 1, 1, "", "limit"], [189, 1, 1, "", "map_rows"], [190, 1, 1, "", "max"], [191, 1, 1, "", "mean"], [192, 1, 1, "", "median"], [193, 1, 1, "", "melt"], [194, 1, 1, "", "merge_sorted"], [195, 1, 1, "", "min"], [196, 1, 1, "", "n_chunks"], [197, 1, 1, "", "n_unique"], [198, 1, 1, "", "null_count"], [199, 1, 1, "", "partition_by"], [200, 1, 1, "", "pipe"], [201, 1, 1, "", "pivot"], [202, 1, 1, "", "product"], [203, 1, 1, "", "quantile"], [204, 1, 1, "", "rechunk"], [205, 1, 1, "", "rename"], [206, 1, 1, "", "replace"], [207, 1, 1, "", "replace_at_idx"], [208, 1, 1, "", "reverse"], [209, 1, 1, "", "row"], [210, 1, 1, "", "rows"], [211, 1, 1, "", "rows_by_key"], [212, 1, 1, "", "sample"], [213, 2, 1, "", "schema"], [214, 1, 1, "", "select"], [215, 1, 1, "", "select_seq"], [216, 1, 1, "", "set_sorted"], [217, 2, 1, "", "shape"], [218, 1, 1, "", "shift"], [219, 1, 1, "", "shift_and_fill"], [220, 1, 1, "", "shrink_to_fit"], [221, 1, 1, "", "slice"], [222, 1, 1, "", "sort"], [223, 1, 1, "", "std"], [224, 1, 1, "", "sum"], [225, 1, 1, "", "tail"], [226, 1, 1, "", "take_every"], [227, 1, 1, "", "to_arrow"], [228, 1, 1, "", "to_dict"], [229, 1, 1, "", "to_dicts"], [230, 1, 1, "", "to_dummies"], [231, 1, 1, "", "to_init_repr"], [232, 1, 1, "", "to_numpy"], [233, 1, 1, "", "to_pandas"], [234, 1, 1, "", "to_series"], [235, 1, 1, "", "to_struct"], [236, 1, 1, "", "top_k"], [237, 1, 1, "", "transpose"], [238, 1, 1, "", "unique"], [239, 1, 1, "", "unnest"], [240, 1, 1, "", "unstack"], [241, 1, 1, "", "update"], [242, 1, 1, "", "upsample"], [243, 1, 1, "", "var"], [244, 1, 1, "", "vstack"], [245, 2, 1, "", "width"], [246, 1, 1, "", "with_columns"], [247, 1, 1, "", "with_columns_seq"], [248, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_ipc_stream"], [34, 1, 1, "", "write_json"], [35, 1, 1, "", "write_ndjson"], [36, 1, 1, "", "write_parquet"]], "polars.DataType": [[37, 1, 1, "", "__init__"]], "polars.Date": [[38, 1, 1, "", "__init__"]], "polars.Datetime": [[39, 1, 1, "", "__init__"]], "polars.Decimal": [[40, 1, 1, "", "__init__"]], "polars.Duration": [[41, 1, 1, "", "__init__"]], "polars.Expr": [[277, 1, 1, "", "abs"], [278, 1, 1, "", "add"], [279, 1, 1, "", "agg_groups"], [280, 1, 1, "", "alias"], [281, 1, 1, "", "all"], [282, 1, 1, "", "and_"], [283, 1, 1, "", "any"], [284, 1, 1, "", "append"], [285, 1, 1, "", "apply"], [286, 1, 1, "", "approx_n_unique"], [287, 1, 1, "", "arccos"], [288, 1, 1, "", "arccosh"], [289, 1, 1, "", "arcsin"], [290, 1, 1, "", "arcsinh"], [291, 1, 1, "", "arctan"], [292, 1, 1, "", "arctanh"], [293, 1, 1, "", "arg_max"], [294, 1, 1, "", "arg_min"], [295, 1, 1, "", "arg_sort"], [296, 1, 1, "", "arg_true"], [297, 1, 1, "", "arg_unique"], [302, 1, 1, "", "backward_fill"], [308, 1, 1, "", "bottom_k"], [309, 1, 1, "", "cache"], [310, 1, 1, "", "cast"], [313, 1, 1, "", "cbrt"], [314, 1, 1, "", "ceil"], [315, 1, 1, "", "clip"], [316, 1, 1, "", "clip_max"], [317, 1, 1, "", "clip_min"], [318, 1, 1, "", "cos"], [319, 1, 1, "", "cosh"], [320, 1, 1, "", "count"], [321, 1, 1, "", "cumcount"], [322, 1, 1, "", "cummax"], [323, 1, 1, "", "cummin"], [324, 1, 1, "", "cumprod"], [325, 1, 1, "", "cumsum"], [326, 1, 1, "", "cumulative_eval"], [327, 1, 1, "", "cut"], [328, 1, 1, "", "degrees"], [329, 1, 1, "", "diff"], [330, 1, 1, "", "dot"], [331, 1, 1, "", "drop_nans"], [332, 1, 1, "", "drop_nulls"], [374, 1, 1, "", "entropy"], [375, 1, 1, "", "eq"], [376, 1, 1, "", "eq_missing"], [377, 1, 1, "", "ewm_mean"], [378, 1, 1, "", "ewm_std"], [379, 1, 1, "", "ewm_var"], [380, 1, 1, "", "exclude"], [381, 1, 1, "", "exp"], [382, 1, 1, "", "explode"], [383, 1, 1, "", "extend_constant"], [384, 1, 1, "", "fill_nan"], [385, 1, 1, "", "fill_null"], [386, 1, 1, "", "filter"], [387, 1, 1, "", "first"], [388, 1, 1, "", "flatten"], [389, 1, 1, "", "floor"], [390, 1, 1, "", "floordiv"], [391, 1, 1, "", "forward_fill"], [392, 1, 1, "", "from_json"], [393, 1, 1, "", "ge"], [394, 1, 1, "", "gt"], [395, 1, 1, "", "hash"], [396, 1, 1, "", "head"], [397, 1, 1, "", "implode"], [398, 1, 1, "", "inspect"], [399, 1, 1, "", "interpolate"], [400, 1, 1, "", "is_between"], [401, 1, 1, "", "is_duplicated"], [402, 1, 1, "", "is_finite"], [403, 1, 1, "", "is_first"], [404, 1, 1, "", "is_first_distinct"], [405, 1, 1, "", "is_in"], [406, 1, 1, "", "is_infinite"], [407, 1, 1, "", "is_last"], [408, 1, 1, "", "is_last_distinct"], [409, 1, 1, "", "is_nan"], [410, 1, 1, "", "is_not"], [411, 1, 1, "", "is_not_nan"], [412, 1, 1, "", "is_not_null"], [413, 1, 1, "", "is_null"], [414, 1, 1, "", "is_unique"], [415, 1, 1, "", "keep_name"], [416, 1, 1, "", "kurtosis"], [417, 1, 1, "", "last"], [418, 1, 1, "", "le"], [419, 1, 1, "", "len"], [420, 1, 1, "", "limit"], [458, 1, 1, "", "log"], [459, 1, 1, "", "log10"], [460, 1, 1, "", "log1p"], [461, 1, 1, "", "lower_bound"], [462, 1, 1, "", "lt"], [463, 1, 1, "", "map"], [464, 1, 1, "", "map_alias"], [465, 1, 1, "", "map_batches"], [466, 1, 1, "", "map_dict"], [467, 1, 1, "", "map_elements"], [468, 1, 1, "", "max"], [469, 1, 1, "", "mean"], [470, 1, 1, "", "median"], [481, 1, 1, "", "min"], [482, 1, 1, "", "mod"], [483, 1, 1, "", "mode"], [484, 1, 1, "", "mul"], [485, 1, 1, "", "n_unique"], [486, 1, 1, "", "nan_max"], [487, 1, 1, "", "nan_min"], [488, 1, 1, "", "ne"], [489, 1, 1, "", "ne_missing"], [490, 1, 1, "", "not_"], [491, 1, 1, "", "null_count"], [492, 1, 1, "", "or_"], [493, 1, 1, "", "over"], [494, 1, 1, "", "pct_change"], [495, 1, 1, "", "pipe"], [496, 1, 1, "", "pow"], [497, 1, 1, "", "prefix"], [498, 1, 1, "", "product"], [499, 1, 1, "", "qcut"], [500, 1, 1, "", "quantile"], [501, 1, 1, "", "radians"], [502, 1, 1, "", "rank"], [503, 1, 1, "", "rechunk"], [504, 1, 1, "", "reinterpret"], [505, 1, 1, "", "repeat_by"], [506, 1, 1, "", "reshape"], [507, 1, 1, "", "reverse"], [508, 1, 1, "", "rle"], [509, 1, 1, "", "rle_id"], [510, 1, 1, "", "rolling_apply"], [511, 1, 1, "", "rolling_map"], [512, 1, 1, "", "rolling_max"], [513, 1, 1, "", "rolling_mean"], [514, 1, 1, "", "rolling_median"], [515, 1, 1, "", "rolling_min"], [516, 1, 1, "", "rolling_quantile"], [517, 1, 1, "", "rolling_skew"], [518, 1, 1, "", "rolling_std"], [519, 1, 1, "", "rolling_sum"], [520, 1, 1, "", "rolling_var"], [521, 1, 1, "", "round"], [522, 1, 1, "", "sample"], [523, 1, 1, "", "search_sorted"], [524, 1, 1, "", "set_sorted"], [525, 1, 1, "", "shift"], [526, 1, 1, "", "shift_and_fill"], [527, 1, 1, "", "shrink_dtype"], [528, 1, 1, "", "shuffle"], [529, 1, 1, "", "sign"], [530, 1, 1, "", "sin"], [531, 1, 1, "", "sinh"], [532, 1, 1, "", "skew"], [533, 1, 1, "", "slice"], [534, 1, 1, "", "sort"], [535, 1, 1, "", "sort_by"], [536, 1, 1, "", "sqrt"], [537, 1, 1, "", "std"], [582, 1, 1, "", "sub"], [583, 1, 1, "", "suffix"], [584, 1, 1, "", "sum"], [585, 1, 1, "", "tail"], [586, 1, 1, "", "take"], [587, 1, 1, "", "take_every"], [588, 1, 1, "", "tan"], [589, 1, 1, "", "tanh"], [590, 1, 1, "", "to_physical"], [591, 1, 1, "", "top_k"], [592, 1, 1, "", "truediv"], [593, 1, 1, "", "unique"], [594, 1, 1, "", "unique_counts"], [595, 1, 1, "", "upper_bound"], [596, 1, 1, "", "value_counts"], [597, 1, 1, "", "var"], [598, 1, 1, "", "where"], [599, 1, 1, "", "xor"]], "polars.Expr.arr": [[298, 1, 1, "", "max"], [299, 1, 1, "", "min"], [300, 1, 1, "", "sum"], [301, 1, 1, "", "unique"]], "polars.Expr.bin": [[303, 1, 1, "", "contains"], [304, 1, 1, "", "decode"], [305, 1, 1, "", "encode"], [306, 1, 1, "", "ends_with"], [307, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[311, 1, 1, "", "get_categories"], [312, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[333, 1, 1, "", "base_utc_offset"], [334, 1, 1, "", "cast_time_unit"], [335, 1, 1, "", "combine"], [336, 1, 1, "", "convert_time_zone"], [337, 1, 1, "", "date"], [338, 1, 1, "", "datetime"], [339, 1, 1, "", "day"], [340, 1, 1, "", "days"], [341, 1, 1, "", "dst_offset"], [342, 1, 1, "", "epoch"], [343, 1, 1, "", "hour"], [344, 1, 1, "", "hours"], [345, 1, 1, "", "is_leap_year"], [346, 1, 1, "", "iso_year"], [347, 1, 1, "", "microsecond"], [348, 1, 1, "", "microseconds"], [349, 1, 1, "", "millisecond"], [350, 1, 1, "", "milliseconds"], [351, 1, 1, "", "minute"], [352, 1, 1, "", "minutes"], [353, 1, 1, "", "month"], [354, 1, 1, "", "month_end"], [355, 1, 1, "", "month_start"], [356, 1, 1, "", "nanosecond"], [357, 1, 1, "", "nanoseconds"], [358, 1, 1, "", "offset_by"], [359, 1, 1, "", "ordinal_day"], [360, 1, 1, "", "quarter"], [361, 1, 1, "", "replace_time_zone"], [362, 1, 1, "", "round"], [363, 1, 1, "", "second"], [364, 1, 1, "", "seconds"], [365, 1, 1, "", "strftime"], [366, 1, 1, "", "time"], [367, 1, 1, "", "timestamp"], [368, 1, 1, "", "to_string"], [369, 1, 1, "", "truncate"], [370, 1, 1, "", "week"], [371, 1, 1, "", "weekday"], [372, 1, 1, "", "with_time_unit"], [373, 1, 1, "", "year"]], "polars.Expr.list": [[421, 1, 1, "", "all"], [422, 1, 1, "", "any"], [423, 1, 1, "", "arg_max"], [424, 1, 1, "", "arg_min"], [425, 1, 1, "", "concat"], [426, 1, 1, "", "contains"], [427, 1, 1, "", "count_match"], [428, 1, 1, "", "count_matches"], [429, 1, 1, "", "diff"], [430, 1, 1, "", "difference"], [431, 1, 1, "", "eval"], [432, 1, 1, "", "explode"], [433, 1, 1, "", "first"], [434, 1, 1, "", "get"], [435, 1, 1, "", "head"], [436, 1, 1, "", "intersection"], [437, 1, 1, "", "join"], [438, 1, 1, "", "last"], [439, 1, 1, "", "lengths"], [440, 1, 1, "", "max"], [441, 1, 1, "", "mean"], [442, 1, 1, "", "min"], [443, 1, 1, "", "reverse"], [444, 1, 1, "", "set_difference"], [445, 1, 1, "", "set_intersection"], [446, 1, 1, "", "set_symmetric_difference"], [447, 1, 1, "", "set_union"], [448, 1, 1, "", "shift"], [449, 1, 1, "", "slice"], [450, 1, 1, "", "sort"], [451, 1, 1, "", "sum"], [452, 1, 1, "", "symmetric_difference"], [453, 1, 1, "", "tail"], [454, 1, 1, "", "take"], [455, 1, 1, "", "to_struct"], [456, 1, 1, "", "union"], [457, 1, 1, "", "unique"]], "polars.Expr.meta": [[471, 1, 1, "", "eq"], [472, 1, 1, "", "has_multiple_outputs"], [473, 1, 1, "", "is_regex_projection"], [474, 1, 1, "", "ne"], [475, 1, 1, "", "output_name"], [476, 1, 1, "", "pop"], [477, 1, 1, "", "root_names"], [478, 1, 1, "", "tree_format"], [479, 1, 1, "", "undo_aliases"], [480, 1, 1, "", "write_json"]], "polars.Expr.str": [[538, 1, 1, "", "concat"], [539, 1, 1, "", "contains"], [540, 1, 1, "", "count_match"], [541, 1, 1, "", "count_matches"], [542, 1, 1, "", "decode"], [543, 1, 1, "", "encode"], [544, 1, 1, "", "ends_with"], [545, 1, 1, "", "explode"], [546, 1, 1, "", "extract"], [547, 1, 1, "", "extract_all"], [548, 1, 1, "", "extract_groups"], [549, 1, 1, "", "json_extract"], [550, 1, 1, "", "json_path_match"], [551, 1, 1, "", "lengths"], [552, 1, 1, "", "ljust"], [553, 1, 1, "", "lstrip"], [554, 1, 1, "", "n_chars"], [555, 1, 1, "", "parse_int"], [556, 1, 1, "", "replace"], [557, 1, 1, "", "replace_all"], [558, 1, 1, "", "rjust"], [559, 1, 1, "", "rstrip"], [560, 1, 1, "", "slice"], [561, 1, 1, "", "split"], [562, 1, 1, "", "split_exact"], [563, 1, 1, "", "splitn"], [564, 1, 1, "", "starts_with"], [565, 1, 1, "", "strip"], [566, 1, 1, "", "strip_chars"], [567, 1, 1, "", "strip_chars_end"], [568, 1, 1, "", "strip_chars_start"], [569, 1, 1, "", "strip_prefix"], [570, 1, 1, "", "strip_suffix"], [571, 1, 1, "", "strptime"], [572, 1, 1, "", "to_date"], [573, 1, 1, "", "to_datetime"], [574, 1, 1, "", "to_decimal"], [575, 1, 1, "", "to_lowercase"], [576, 1, 1, "", "to_time"], [577, 1, 1, "", "to_titlecase"], [578, 1, 1, "", "to_uppercase"], [579, 1, 1, "", "zfill"]], "polars.Expr.struct": [[580, 1, 1, "", "field"], [581, 1, 1, "", "rename_fields"]], "polars.Float32": [[42, 1, 1, "", "__init__"]], "polars.Float64": [[43, 1, 1, "", "__init__"]], "polars.Int16": [[44, 1, 1, "", "__init__"]], "polars.Int32": [[45, 1, 1, "", "__init__"]], "polars.Int64": [[46, 1, 1, "", "__init__"]], "polars.Int8": [[47, 1, 1, "", "__init__"]], "polars.LazyFrame": [[693, 1, 1, "", "approx_n_unique"], [694, 1, 1, "", "approx_unique"], [695, 1, 1, "", "bottom_k"], [696, 1, 1, "", "cache"], [697, 1, 1, "", "cast"], [698, 1, 1, "", "clear"], [699, 1, 1, "", "clone"], [700, 1, 1, "", "collect"], [701, 1, 1, "", "collect_async"], [702, 2, 1, "", "columns"], [703, 1, 1, "", "deserialize"], [704, 1, 1, "", "drop"], [705, 1, 1, "", "drop_nulls"], [706, 2, 1, "", "dtypes"], [707, 1, 1, "", "explain"], [708, 1, 1, "", "explode"], [709, 1, 1, "", "fetch"], [710, 1, 1, "", "fill_nan"], [711, 1, 1, "", "fill_null"], [712, 1, 1, "", "filter"], [713, 1, 1, "", "first"], [714, 1, 1, "", "from_json"], [715, 1, 1, "", "group_by"], [716, 1, 1, "", "group_by_dynamic"], [717, 1, 1, "", "group_by_rolling"], [718, 1, 1, "", "groupby"], [719, 1, 1, "", "groupby_dynamic"], [720, 1, 1, "", "groupby_rolling"], [721, 1, 1, "", "head"], [722, 1, 1, "", "inspect"], [723, 1, 1, "", "interpolate"], [724, 1, 1, "", "join"], [725, 1, 1, "", "join_asof"], [726, 1, 1, "", "last"], [727, 1, 1, "", "lazy"], [728, 1, 1, "", "limit"], [729, 1, 1, "", "map"], [730, 1, 1, "", "map_batches"], [731, 1, 1, "", "max"], [732, 1, 1, "", "mean"], [733, 1, 1, "", "median"], [734, 1, 1, "", "melt"], [735, 1, 1, "", "merge_sorted"], [736, 1, 1, "", "min"], [737, 1, 1, "", "null_count"], [738, 1, 1, "", "pipe"], [739, 1, 1, "", "profile"], [740, 1, 1, "", "quantile"], [741, 1, 1, "", "read_json"], [742, 1, 1, "", "rename"], [743, 1, 1, "", "reverse"], [744, 2, 1, "", "schema"], [745, 1, 1, "", "select"], [746, 1, 1, "", "select_seq"], [747, 1, 1, "", "serialize"], [748, 1, 1, "", "set_sorted"], [749, 1, 1, "", "shift"], [750, 1, 1, "", "shift_and_fill"], [751, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_parquet"], [752, 1, 1, "", "slice"], [753, 1, 1, "", "sort"], [754, 1, 1, "", "std"], [755, 1, 1, "", "sum"], [756, 1, 1, "", "tail"], [757, 1, 1, "", "take_every"], [758, 1, 1, "", "top_k"], [759, 1, 1, "", "unique"], [760, 1, 1, "", "unnest"], [761, 1, 1, "", "update"], [762, 1, 1, "", "var"], [763, 2, 1, "", "width"], [764, 1, 1, "", "with_columns"], [765, 1, 1, "", "with_columns_seq"], [766, 1, 1, "", "with_context"], [767, 1, 1, "", "with_row_count"], [768, 1, 1, "", "write_json"]], "polars.List": [[51, 1, 1, "", "__init__"]], "polars.Null": [[52, 1, 1, "", "__init__"]], "polars.Object": [[53, 1, 1, "", "__init__"]], "polars.SQLContext": [[1131, 1, 1, "", "__enter__"], [1131, 1, 1, "", "__exit__"], [1131, 1, 1, "", "__init__"], [54, 1, 1, "", "execute"], [55, 1, 1, "", "register"], [56, 1, 1, "", "register_globals"], [57, 1, 1, "", "register_many"], [58, 1, 1, "", "tables"], [59, 1, 1, "", "unregister"]], "polars.Series": [[793, 1, 1, "", "abs"], [794, 1, 1, "", "alias"], [795, 1, 1, "", "all"], [796, 1, 1, "", "any"], [797, 1, 1, "", "append"], [798, 1, 1, "", "apply"], [799, 1, 1, "", "arccos"], [800, 1, 1, "", "arccosh"], [801, 1, 1, "", "arcsin"], [802, 1, 1, "", "arcsinh"], [803, 1, 1, "", "arctan"], [804, 1, 1, "", "arctanh"], [805, 1, 1, "", "arg_max"], [806, 1, 1, "", "arg_min"], [807, 1, 1, "", "arg_sort"], [808, 1, 1, "", "arg_true"], [809, 1, 1, "", "arg_unique"], [819, 1, 1, "", "bottom_k"], [820, 1, 1, "", "cast"], [821, 3, 1, "", "cat"], [827, 1, 1, "", "cbrt"], [828, 1, 1, "", "ceil"], [829, 1, 1, "", "chunk_lengths"], [830, 1, 1, "", "clear"], [831, 1, 1, "", "clip"], [832, 1, 1, "", "clip_max"], [833, 1, 1, "", "clip_min"], [834, 1, 1, "", "clone"], [835, 1, 1, "", "cos"], [836, 1, 1, "", "cosh"], [837, 1, 1, "", "cummax"], [838, 1, 1, "", "cummin"], [839, 1, 1, "", "cumprod"], [840, 1, 1, "", "cumsum"], [841, 1, 1, "", "cumulative_eval"], [842, 1, 1, "", "cut"], [843, 1, 1, "", "describe"], [844, 1, 1, "", "diff"], [845, 1, 1, "", "dot"], [846, 1, 1, "", "drop_nans"], [847, 1, 1, "", "drop_nulls"], [848, 3, 1, "", "dt"], [894, 3, 1, "", "dtype"], [895, 1, 1, "", "entropy"], [896, 1, 1, "", "estimated_size"], [897, 1, 1, "", "ewm_mean"], [898, 1, 1, "", "ewm_std"], [899, 1, 1, "", "ewm_var"], [900, 1, 1, "", "exp"], [901, 1, 1, "", "explode"], [902, 1, 1, "", "extend"], [903, 1, 1, "", "extend_constant"], [904, 1, 1, "", "fill_nan"], [905, 1, 1, "", "fill_null"], [906, 1, 1, "", "filter"], [907, 3, 1, "", "flags"], [908, 1, 1, "", "floor"], [909, 1, 1, "", "get_chunks"], [910, 1, 1, "", "has_validity"], [911, 1, 1, "", "hash"], [912, 1, 1, "", "head"], [913, 1, 1, "", "hist"], [914, 1, 1, "", "implode"], [915, 3, 1, "", "inner_dtype"], [916, 1, 1, "", "interpolate"], [917, 1, 1, "", "is_between"], [918, 1, 1, "", "is_boolean"], [919, 1, 1, "", "is_duplicated"], [920, 1, 1, "", "is_empty"], [921, 1, 1, "", "is_finite"], [922, 1, 1, "", "is_first"], [923, 1, 1, "", "is_first_distinct"], [924, 1, 1, "", "is_float"], [925, 1, 1, "", "is_in"], [926, 1, 1, "", "is_infinite"], [927, 1, 1, "", "is_integer"], [928, 1, 1, "", "is_last"], [929, 1, 1, "", "is_last_distinct"], [930, 1, 1, "", "is_nan"], [931, 1, 1, "", "is_not_nan"], [932, 1, 1, "", "is_not_null"], [933, 1, 1, "", "is_null"], [934, 1, 1, "", "is_numeric"], [935, 1, 1, "", "is_sorted"], [936, 1, 1, "", "is_temporal"], [937, 1, 1, "", "is_unique"], [938, 1, 1, "", "is_utf8"], [939, 1, 1, "", "item"], [940, 1, 1, "", "kurtosis"], [941, 1, 1, "", "len"], [942, 1, 1, "", "limit"], [943, 3, 1, "", "list"], [981, 1, 1, "", "log"], [982, 1, 1, "", "log10"], [983, 1, 1, "", "log1p"], [984, 1, 1, "", "lower_bound"], [985, 1, 1, "", "map_dict"], [986, 1, 1, "", "map_elements"], [987, 1, 1, "", "max"], [988, 1, 1, "", "mean"], [989, 1, 1, "", "median"], [990, 1, 1, "", "min"], [991, 1, 1, "", "mode"], [992, 1, 1, "", "n_chunks"], [993, 1, 1, "", "n_unique"], [994, 3, 1, "", "name"], [995, 1, 1, "", "nan_max"], [996, 1, 1, "", "nan_min"], [997, 1, 1, "", "new_from_index"], [998, 1, 1, "", "not_"], [999, 1, 1, "", "null_count"], [1000, 1, 1, "", "pct_change"], [1001, 1, 1, "", "peak_max"], [1002, 1, 1, "", "peak_min"], [1003, 1, 1, "", "product"], [1004, 1, 1, "", "qcut"], [1005, 1, 1, "", "quantile"], [1006, 1, 1, "", "rank"], [1007, 1, 1, "", "rechunk"], [1008, 1, 1, "", "reinterpret"], [1009, 1, 1, "", "rename"], [1010, 1, 1, "", "reshape"], [1011, 1, 1, "", "reverse"], [1012, 1, 1, "", "rle"], [1013, 1, 1, "", "rle_id"], [1014, 1, 1, "", "rolling_apply"], [1015, 1, 1, "", "rolling_map"], [1016, 1, 1, "", "rolling_max"], [1017, 1, 1, "", "rolling_mean"], [1018, 1, 1, "", "rolling_median"], [1019, 1, 1, "", "rolling_min"], [1020, 1, 1, "", "rolling_quantile"], [1021, 1, 1, "", "rolling_skew"], [1022, 1, 1, "", "rolling_std"], [1023, 1, 1, "", "rolling_sum"], [1024, 1, 1, "", "rolling_var"], [1025, 1, 1, "", "round"], [1026, 1, 1, "", "sample"], [1027, 1, 1, "", "search_sorted"], [1028, 1, 1, "", "series_equal"], [1029, 1, 1, "", "set"], [1030, 1, 1, "", "set_at_idx"], [1031, 1, 1, "", "set_sorted"], [1032, 3, 1, "", "shape"], [1033, 1, 1, "", "shift"], [1034, 1, 1, "", "shift_and_fill"], [1035, 1, 1, "", "shrink_dtype"], [1036, 1, 1, "", "shrink_to_fit"], [1037, 1, 1, "", "shuffle"], [1038, 1, 1, "", "sign"], [1039, 1, 1, "", "sin"], [1040, 1, 1, "", "sinh"], [1041, 1, 1, "", "skew"], [1042, 1, 1, "", "slice"], [1043, 1, 1, "", "sort"], [1044, 1, 1, "", "sqrt"], [1045, 1, 1, "", "std"], [1046, 3, 1, "", "str"], [1094, 1, 1, "", "sum"], [1095, 1, 1, "", "tail"], [1096, 1, 1, "", "take"], [1097, 1, 1, "", "take_every"], [1098, 1, 1, "", "tan"], [1099, 1, 1, "", "tanh"], [1100, 1, 1, "", "to_arrow"], [1101, 1, 1, "", "to_dummies"], [1102, 1, 1, "", "to_frame"], [1103, 1, 1, "", "to_init_repr"], [1104, 1, 1, "", "to_list"], [1105, 1, 1, "", "to_numpy"], [1106, 1, 1, "", "to_pandas"], [1107, 1, 1, "", "to_physical"], [1108, 1, 1, "", "top_k"], [1109, 1, 1, "", "unique"], [1110, 1, 1, "", "unique_counts"], [1111, 1, 1, "", "upper_bound"], [1112, 1, 1, "", "value_counts"], [1113, 1, 1, "", "var"], [1114, 1, 1, "", "view"], [1115, 1, 1, "", "zip_with"]], "polars.Series.arr": [[810, 1, 1, "", "max"], [811, 1, 1, "", "min"], [812, 1, 1, "", "sum"], [813, 1, 1, "", "unique"]], "polars.Series.bin": [[814, 1, 1, "", "contains"], [815, 1, 1, "", "decode"], [816, 1, 1, "", "encode"], [817, 1, 1, "", "ends_with"], [818, 1, 1, "", "starts_with"]], "polars.Series.cat": [[822, 1, 1, "", "get_categories"], [823, 1, 1, "", "is_local"], [824, 1, 1, "", "set_ordering"], [825, 1, 1, "", "to_local"], [826, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[849, 1, 1, "", "base_utc_offset"], [850, 1, 1, "", "cast_time_unit"], [851, 1, 1, "", "combine"], [852, 1, 1, "", "convert_time_zone"], [853, 1, 1, "", "date"], [854, 1, 1, "", "datetime"], [855, 1, 1, "", "day"], [856, 1, 1, "", "days"], [857, 1, 1, "", "dst_offset"], [858, 1, 1, "", "epoch"], [859, 1, 1, "", "hour"], [860, 1, 1, "", "hours"], [861, 1, 1, "", "is_leap_year"], [862, 1, 1, "", "iso_year"], [863, 1, 1, "", "max"], [864, 1, 1, "", "mean"], [865, 1, 1, "", "median"], [866, 1, 1, "", "microsecond"], [867, 1, 1, "", "microseconds"], [868, 1, 1, "", "millisecond"], [869, 1, 1, "", "milliseconds"], [870, 1, 1, "", "min"], [871, 1, 1, "", "minute"], [872, 1, 1, "", "minutes"], [873, 1, 1, "", "month"], [874, 1, 1, "", "month_end"], [875, 1, 1, "", "month_start"], [876, 1, 1, "", "nanosecond"], [877, 1, 1, "", "nanoseconds"], [878, 1, 1, "", "offset_by"], [879, 1, 1, "", "ordinal_day"], [880, 1, 1, "", "quarter"], [881, 1, 1, "", "replace_time_zone"], [882, 1, 1, "", "round"], [883, 1, 1, "", "second"], [884, 1, 1, "", "seconds"], [885, 1, 1, "", "strftime"], [886, 1, 1, "", "time"], [887, 1, 1, "", "timestamp"], [888, 1, 1, "", "to_string"], [889, 1, 1, "", "truncate"], [890, 1, 1, "", "week"], [891, 1, 1, "", "weekday"], [892, 1, 1, "", "with_time_unit"], [893, 1, 1, "", "year"]], "polars.Series.list": [[944, 1, 1, "", "all"], [945, 1, 1, "", "any"], [946, 1, 1, "", "arg_max"], [947, 1, 1, "", "arg_min"], [948, 1, 1, "", "concat"], [949, 1, 1, "", "contains"], [950, 1, 1, "", "count_match"], [951, 1, 1, "", "count_matches"], [952, 1, 1, "", "diff"], [953, 1, 1, "", "difference"], [954, 1, 1, "", "eval"], [955, 1, 1, "", "explode"], [956, 1, 1, "", "first"], [957, 1, 1, "", "get"], [958, 1, 1, "", "head"], [959, 1, 1, "", "intersection"], [960, 1, 1, "", "join"], [961, 1, 1, "", "last"], [962, 1, 1, "", "lengths"], [963, 1, 1, "", "max"], [964, 1, 1, "", "mean"], [965, 1, 1, "", "min"], [966, 1, 1, "", "reverse"], [967, 1, 1, "", "set_difference"], [968, 1, 1, "", "set_intersection"], [969, 1, 1, "", "set_symmetric_difference"], [970, 1, 1, "", "set_union"], [971, 1, 1, "", "shift"], [972, 1, 1, "", "slice"], [973, 1, 1, "", "sort"], [974, 1, 1, "", "sum"], [975, 1, 1, "", "symmetric_difference"], [976, 1, 1, "", "tail"], [977, 1, 1, "", "take"], [978, 1, 1, "", "to_struct"], [979, 1, 1, "", "union"], [980, 1, 1, "", "unique"]], "polars.Series.str": [[1047, 1, 1, "", "concat"], [1048, 1, 1, "", "contains"], [1049, 1, 1, "", "count_match"], [1050, 1, 1, "", "count_matches"], [1051, 1, 1, "", "decode"], [1052, 1, 1, "", "encode"], [1053, 1, 1, "", "ends_with"], [1054, 1, 1, "", "explode"], [1055, 1, 1, "", "extract"], [1056, 1, 1, "", "extract_all"], [1057, 1, 1, "", "extract_groups"], [1058, 1, 1, "", "json_extract"], [1059, 1, 1, "", "json_path_match"], [1060, 1, 1, "", "lengths"], [1061, 1, 1, "", "ljust"], [1062, 1, 1, "", "lstrip"], [1063, 1, 1, "", "n_chars"], [1064, 1, 1, "", "parse_int"], [1065, 1, 1, "", "replace"], [1066, 1, 1, "", "replace_all"], [1067, 1, 1, "", "rjust"], [1068, 1, 1, "", "rstrip"], [1069, 1, 1, "", "slice"], [1070, 1, 1, "", "split"], [1071, 1, 1, "", "split_exact"], [1072, 1, 1, "", "splitn"], [1073, 1, 1, "", "starts_with"], [1074, 1, 1, "", "strip"], [1075, 1, 1, "", "strip_chars"], [1076, 1, 1, "", "strip_chars_end"], [1077, 1, 1, "", "strip_chars_start"], [1078, 1, 1, "", "strip_prefix"], [1079, 1, 1, "", "strip_suffix"], [1080, 1, 1, "", "strptime"], [1081, 1, 1, "", "to_date"], [1082, 1, 1, "", "to_datetime"], [1083, 1, 1, "", "to_decimal"], [1084, 1, 1, "", "to_lowercase"], [1085, 1, 1, "", "to_time"], [1086, 1, 1, "", "to_titlecase"], [1087, 1, 1, "", "to_uppercase"], [1088, 1, 1, "", "zfill"]], "polars.Series.struct": [[1089, 1, 1, "", "field"], [1090, 3, 1, "", "fields"], [1091, 1, 1, "", "rename_fields"], [1092, 3, 1, "", "schema"], [1093, 1, 1, "", "unnest"]], "polars.StringCache": [[60, 1, 1, "", "__init__"]], "polars.Struct": [[61, 1, 1, "", "__init__"]], "polars.Time": [[62, 1, 1, "", "__init__"]], "polars.UInt16": [[63, 1, 1, "", "__init__"]], "polars.UInt32": [[64, 1, 1, "", "__init__"]], "polars.UInt64": [[65, 1, 1, "", "__init__"]], "polars.UInt8": [[66, 1, 1, "", "__init__"]], "polars.Unknown": [[67, 1, 1, "", "__init__"]], "polars.Utf8": [[68, 1, 1, "", "__init__"]], "polars.api": [[70, 4, 1, "", "register_dataframe_namespace"], [71, 4, 1, "", "register_expr_namespace"], [72, 4, 1, "", "register_lazyframe_namespace"], [73, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[249, 1, 1, "", "__iter__"], [250, 1, 1, "", "agg"], [251, 1, 1, "", "all"], [252, 1, 1, "", "apply"], [253, 1, 1, "", "count"], [254, 1, 1, "", "first"], [255, 1, 1, "", "head"], [256, 1, 1, "", "last"], [257, 1, 1, "", "map_groups"], [258, 1, 1, "", "max"], [259, 1, 1, "", "mean"], [260, 1, 1, "", "median"], [261, 1, 1, "", "min"], [262, 1, 1, "", "n_unique"], [263, 1, 1, "", "quantile"], [264, 1, 1, "", "sum"], [265, 1, 1, "", "tail"]], "polars.exceptions": [[79, 5, 1, "", "ArrowError"], [80, 5, 1, "", "ColumnNotFoundError"], [81, 5, 1, "", "ComputeError"], [82, 5, 1, "", "DuplicateError"], [83, 5, 1, "", "InvalidOperationError"], [84, 5, 1, "", "NoDataError"], [85, 5, 1, "", "NoRowsReturnedError"], [86, 5, 1, "", "PolarsPanicError"], [87, 5, 1, "", "RowsError"], [88, 5, 1, "", "SchemaError"], [89, 5, 1, "", "SchemaFieldNotFoundError"], [90, 5, 1, "", "ShapeError"], [91, 5, 1, "", "StructFieldNotFoundError"], [92, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[102, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[769, 1, 1, "", "agg"], [770, 1, 1, "", "all"], [771, 1, 1, "", "apply"], [772, 1, 1, "", "count"], [773, 1, 1, "", "first"], [774, 1, 1, "", "head"], [775, 1, 1, "", "last"], [776, 1, 1, "", "map_groups"], [777, 1, 1, "", "max"], [778, 1, 1, "", "mean"], [779, 1, 1, "", "median"], [780, 1, 1, "", "min"], [781, 1, 1, "", "n_unique"], [782, 1, 1, "", "quantile"], [783, 1, 1, "", "sum"], [784, 1, 1, "", "tail"]], "polars.selectors": [[791, 4, 1, "", "all"], [791, 4, 1, "", "by_dtype"], [791, 4, 1, "", "by_name"], [791, 4, 1, "", "categorical"], [791, 4, 1, "", "contains"], [791, 4, 1, "", "date"], [791, 4, 1, "", "datetime"], [791, 4, 1, "", "duration"], [791, 4, 1, "", "ends_with"], [791, 4, 1, "", "expand_selector"], [791, 4, 1, "", "first"], [791, 4, 1, "", "float"], [791, 4, 1, "", "integer"], [791, 4, 1, "", "is_selector"], [791, 4, 1, "", "last"], [791, 4, 1, "", "matches"], [791, 4, 1, "", "numeric"], [791, 4, 1, "", "starts_with"], [791, 4, 1, "", "string"], [791, 4, 1, "", "temporal"], [791, 4, 1, "", "time"]], "polars.testing": [[126, 4, 1, "", "assert_frame_equal"], [127, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[128, 0, 1, "", "column"], [129, 4, 1, "", "columns"], [130, 4, 1, "", "create_list_strategy"], [131, 4, 1, "", "dataframes"], [132, 4, 1, "", "load_profile"], [133, 4, 1, "", "series"], [134, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[128, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 156, 902], "api": [1, 70, 71, 72, 73, 690], "provid": 1, "new": 1, "function": [1, 137, 678, 689, 791], "avail": 1, "registr": 1, "exampl": [1, 791, 1132], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1132], "arrai": [2, 671, 1116], "binari": [3, 672, 684, 1118], "boolean": [4, 673, 1119], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 137], "activate_decim": 6, "load": [7, 137], "restore_default": 8, "save": [9, 137], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 137], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_ipc_stream": 33, "write_json": [34, 480, 768], "write_ndjson": 35, "write_parquet": 36, "datatyp": 37, "date": [38, 337, 622, 853], "datetim": [39, 338, 625, 854], "decim": 40, "durat": [41, 628], "float32": 42, "float64": 43, "int16": 44, "int32": 45, "int64": 46, "int8": 47, "lazyfram": [48, 49, 50, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788], "sink_csv": 48, "sink_ipc": 49, "sink_parquet": 50, "list": [51, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 680, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1125], "null": 52, "object": 53, "sqlcontext": [54, 55, 56, 57, 58, 59], "execut": 54, "regist": 55, "register_glob": 56, "register_mani": 57, "tabl": 58, "unregist": 59, "stringcach": [60, 689], "struct": [61, 580, 581, 661, 686, 1089, 1090, 1091, 1092, 1093, 1129], "time": [62, 366, 665, 886], "uint16": 63, "uint32": 64, "uint64": 65, "uint8": 66, "unknown": 67, "utf8": 68, "align_fram": 69, "register_dataframe_namespac": 70, "register_expr_namespac": 71, "register_lazyframe_namespac": 72, "register_series_namespac": 73, "build_info": 74, "collect_al": 75, "collect_all_async": 76, "concat": [77, 425, 538, 948, 1047], "enable_string_cach": 78, "except": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 275], "arrowerror": 79, "columnnotfounderror": 80, "computeerror": 81, "duplicateerror": 82, "invalidoperationerror": 83, "nodataerror": 84, "norowsreturnederror": 85, "polarspanicerror": 86, "rowserror": 87, "schemaerror": 88, "schemafieldnotfounderror": 89, "shapeerror": 90, "structfieldnotfounderror": 91, "toomanyrowsreturnederror": 92, "from_arrow": 93, "from_datafram": 94, "from_dict": [95, 96], "from_numpi": 97, "from_panda": 98, "from_record": 99, "from_repr": 100, "get_index_typ": 101, "io": 102, "csv": [102, 691], "batched_read": 102, "batchedcsvread": [102, 691], "next_batch": 102, "read_avro": 103, "read_csv": 104, "read_csv_batch": 105, "read_databas": 106, "read_database_uri": 107, "read_delta": 108, "read_excel": 109, "read_ipc": 110, "read_ipc_schema": 111, "read_ipc_stream": 112, "read_json": [113, 741], "read_ndjson": 114, "read_od": 115, "read_parquet": 116, "read_parquet_schema": 117, "scan_csv": 118, "scan_delta": 119, "scan_ipc": 120, "scan_ndjson": 121, "scan_parquet": 122, "scan_pyarrow_dataset": 123, "set_random_se": 124, "show_vers": 125, "test": [126, 127, 128, 129, 130, 131, 132, 133, 134, 1132], "assert_frame_equ": 126, "assert_series_equ": 127, "parametr": [128, 129, 130, 131, 132, 133, 134, 1132], "column": [128, 129, 147, 676, 702], "create_list_strategi": 130, "load_profil": 132, "seri": [133, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124], "set_profil": 134, "threadpool_s": 135, "using_string_cach": 136, "option": 137, "current": 137, "us": 137, "context": 137, "manag": 137, "decor": 137, "aggreg": [138, 276, 692, 792], "__dataframe__": 139, "appli": [140, 252, 285, 604, 771, 798], "approx_n_uniqu": [141, 286, 605, 693], "approx_uniqu": [142, 694], "bottom_k": [143, 308, 695, 819], "cast": [144, 310, 697, 820], "clear": [145, 698, 830], "clone": [146, 699, 834], "corr": [148, 615], "describ": [149, 843], "drop": [150, 704], "drop_in_plac": 151, "drop_nul": [152, 332, 705, 847], "dtype": [153, 706, 894], "estimated_s": [154, 896], "explod": [155, 382, 432, 545, 708, 901, 955, 1054], "fill_nan": [157, 384, 710, 904], "fill_nul": [158, 385, 711, 905], "filter": [159, 386, 712, 906], "find_idx_by_nam": 160, "flag": [161, 907], "fold": [162, 632], "frame_equ": 163, "get_column": [164, 165], "glimps": 166, "group_bi": [167, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 715, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "group_by_dynam": [168, 716], "group_by_rol": [169, 717], "groupbi": [170, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 270, 718, 787], "groupby_dynam": [171, 719], "groupby_rol": [172, 720], "hash_row": 173, "head": [174, 255, 396, 435, 636, 721, 774, 912, 958], "height": 175, "hstack": 176, "insert_at_idx": 177, "interpol": [178, 399, 723, 916], "is_dupl": [179, 401, 919], "is_empti": [180, 920], "is_uniqu": [181, 414, 937], "item": [182, 939], "iter_row": 183, "iter_slic": 184, "join": [185, 437, 724, 960], "join_asof": [186, 725], "lazi": [187, 727], "limit": [188, 420, 728, 942], "map_row": 189, "max": [190, 258, 298, 440, 468, 645, 731, 777, 810, 863, 963, 987], "mean": [191, 259, 441, 469, 647, 732, 778, 864, 964, 988], "median": [192, 260, 470, 648, 733, 779, 865, 989], "melt": [193, 734], "merge_sort": [194, 735], "min": [195, 261, 299, 442, 481, 649, 736, 780, 811, 870, 965, 990], "n_chunk": [196, 992], "n_uniqu": [197, 262, 485, 651, 781, 993], "null_count": [198, 491, 737, 999], "partition_bi": 199, "pipe": [200, 495, 738], "pivot": 201, "product": [202, 498, 1003], "quantil": [203, 263, 500, 653, 740, 782, 1005], "rechunk": [204, 503, 1007], "renam": [205, 742, 1009], "replac": [206, 556, 1065], "replace_at_idx": 207, "revers": [208, 443, 507, 743, 966, 1011], "row": [209, 210], "rows_by_kei": 211, "sampl": [212, 522, 1026], "schema": [213, 744, 1092], "select": [214, 273, 658, 683, 745, 790, 1127], "select_seq": [215, 746], "set_sort": [216, 524, 748, 1031], "shape": [217, 1032], "shift": [218, 448, 525, 749, 971, 1033], "shift_and_fil": [219, 526, 750, 1034], "shrink_to_fit": [220, 1036], "slice": [221, 449, 533, 560, 752, 972, 1042, 1069], "sort": [222, 450, 534, 753, 973, 1043], "std": [223, 537, 660, 754, 1045], "sum": [224, 264, 300, 451, 584, 662, 755, 783, 812, 974, 1094], "tail": [225, 265, 453, 585, 664, 756, 784, 976, 1095], "take_everi": [226, 587, 757, 1097], "to_arrow": [227, 1100], "to_dict": [228, 229], "to_dummi": [230, 1101], "to_init_repr": [231, 1103], "to_numpi": [232, 1105], "to_panda": [233, 1106], "to_seri": 234, "to_struct": [235, 455, 978], "top_k": [236, 591, 758, 1108], "transpos": 237, "uniqu": [238, 301, 457, 593, 759, 813, 980, 1109], "unnest": [239, 760, 1093], "unstack": 240, "updat": [241, 761], "upsampl": 242, "var": [243, 597, 668, 762, 1113], "vstack": 244, "width": [245, 763], "with_column": [246, 764], "with_columns_seq": [247, 765], "with_row_count": [248, 767], "__iter__": 249, "agg": [250, 769], "all": [251, 281, 421, 600, 770, 795, 944], "count": [253, 320, 616, 772], "first": [254, 387, 433, 631, 713, 773, 956], "last": [256, 417, 438, 640, 726, 775, 961], "map_group": [257, 644, 776], "attribut": [266, 785, 1117], "comput": [267, 677, 1121], "descript": [268, 786, 1122], "export": [269, 1123], "miscellan": [272, 682, 689, 789, 1126], "manipul": [273, 683, 790, 1127], "data": 274, "type": 274, "numer": [274, 684], "tempor": [274, 687, 1130], "nest": 274, "other": 274, "expr": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "ab": [277, 793], "add": 278, "agg_group": 279, "alia": [280, 794], "and_": 282, "ani": [283, 422, 602, 796, 945], "append": [284, 797], "arcco": [287, 799], "arccosh": [288, 800], "arcsin": [289, 801], "arcsinh": [290, 802], "arctan": [291, 803], "arctanh": [292, 804], "arg_max": [293, 423, 805, 946], "arg_min": [294, 424, 806, 947], "arg_sort": [295, 807], "arg_tru": [296, 808], "arg_uniqu": [297, 809], "arr": [298, 299, 300, 301, 810, 811, 812, 813], "backward_fil": 302, "bin": [303, 304, 305, 306, 307, 814, 815, 816, 817, 818], "contain": [303, 426, 539, 814, 949, 1048], "decod": [304, 542, 815, 1051], "encod": [305, 543, 816, 1052], "ends_with": [306, 544, 817, 1053], "starts_with": [307, 564, 818, 1073], "cach": [309, 696], "cat": [311, 312, 821, 822, 823, 824, 825, 826], "get_categori": [311, 822], "set_ord": [312, 824], "cbrt": [313, 827], "ceil": [314, 828], "clip": [315, 831], "clip_max": [316, 832], "clip_min": [317, 833], "co": [318, 835], "cosh": [319, 836], "cumcount": 321, "cummax": [322, 837], "cummin": [323, 838], "cumprod": [324, 839], "cumsum": [325, 620, 840], "cumulative_ev": [326, 841], "cut": [327, 842], "degre": 328, "diff": [329, 429, 844, 952], "dot": [330, 845], "drop_nan": [331, 846], "dt": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893], "base_utc_offset": [333, 849], "cast_time_unit": [334, 850], "combin": [335, 851], "convert_time_zon": [336, 852], "dai": [339, 340, 855, 856], "dst_offset": [341, 857], "epoch": [342, 858], "hour": [343, 344, 859, 860], "is_leap_year": [345, 861], "iso_year": [346, 862], "microsecond": [347, 348, 866, 867], "millisecond": [349, 350, 868, 869], "minut": [351, 352, 871, 872], "month": [353, 873], "month_end": [354, 874], "month_start": [355, 875], "nanosecond": [356, 357, 876, 877], "offset_bi": [358, 878], "ordinal_dai": [359, 879], "quarter": [360, 880], "replace_time_zon": [361, 881], "round": [362, 521, 882, 1025], "second": [363, 364, 883, 884], "strftime": [365, 885], "timestamp": [367, 887], "to_str": [368, 888], "truncat": [369, 889], "week": [370, 890], "weekdai": [371, 891], "with_time_unit": [372, 892], "year": [373, 893], "entropi": [374, 895], "eq": [375, 471], "eq_miss": 376, "ewm_mean": [377, 897], "ewm_std": [378, 898], "ewm_var": [379, 899], "exclud": [380, 630], "exp": [381, 900], "extend_const": [383, 903], "flatten": 388, "floor": [389, 908], "floordiv": 390, "forward_fil": 391, "from_json": [392, 714], "ge": 393, "gt": 394, "hash": [395, 911], "implod": [397, 637, 914], "inspect": [398, 722], "is_between": [400, 917], "is_finit": [402, 921], "is_first": [403, 922], "is_first_distinct": [404, 923], "is_in": [405, 925], "is_infinit": [406, 926], "is_last": [407, 928], "is_last_distinct": [408, 929], "is_nan": [409, 930], "is_not": 410, "is_not_nan": [411, 931], "is_not_nul": [412, 932], "is_nul": [413, 933], "keep_nam": 415, "kurtosi": [416, 940], "le": 418, "len": [419, 941], "count_match": [427, 428, 540, 541, 950, 951, 1049, 1050], "differ": [430, 953], "eval": [431, 954], "get": [434, 957], "intersect": [436, 959], "length": [439, 551, 962, 1060], "set_differ": [444, 967], "set_intersect": [445, 968], "set_symmetric_differ": [446, 969], "set_union": [447, 970], "symmetric_differ": [452, 975], "take": [454, 586, 977, 1096], "union": [456, 979], "log": [458, 981], "log10": [459, 982], "log1p": [460, 983], "lower_bound": [461, 984], "lt": 462, "map": [463, 642, 729], "map_alia": 464, "map_batch": [465, 643, 730], "map_dict": [466, 985], "map_el": [467, 986], "meta": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 681], "has_multiple_output": 472, "is_regex_project": 473, "ne": [474, 488], "output_nam": 475, "pop": 476, "root_nam": 477, "tree_format": 478, "undo_alias": 479, "mod": 482, "mode": [483, 991], "mul": 484, "nan_max": [486, 995], "nan_min": [487, 996], "ne_miss": 489, "not_": [490, 998], "or_": 492, "over": 493, "pct_chang": [494, 1000], "pow": 496, "prefix": 497, "qcut": [499, 1004], "radian": 501, "rank": [502, 1006], "reinterpret": [504, 1008], "repeat_bi": 505, "reshap": [506, 1010], "rle": [508, 1012], "rle_id": [509, 1013], "rolling_appli": [510, 1014], "rolling_map": [511, 1015], "rolling_max": [512, 1016], "rolling_mean": [513, 1017], "rolling_median": [514, 1018], "rolling_min": [515, 1019], "rolling_quantil": [516, 1020], "rolling_skew": [517, 1021], "rolling_std": [518, 1022], "rolling_sum": [519, 1023], "rolling_var": [520, 1024], "search_sort": [523, 1027], "shrink_dtyp": [527, 1035], "shuffl": [528, 1037], "sign": [529, 1038], "sin": [530, 1039], "sinh": [531, 1040], "skew": [532, 1041], "sort_bi": 535, "sqrt": [536, 1044], "str": [538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088], "extract": [546, 1055], "extract_al": [547, 1056], "extract_group": [548, 1057], "json_extract": [549, 1058], "json_path_match": [550, 1059], "ljust": [552, 1061], "lstrip": [553, 1062], "n_char": [554, 1063], "parse_int": [555, 1064], "replace_al": [557, 1066], "rjust": [558, 1067], "rstrip": [559, 1068], "split": [561, 1070], "split_exact": [562, 1071], "splitn": [563, 1072], "strip": [565, 1074], "strip_char": [566, 1075], "strip_chars_end": [567, 1076], "strip_chars_start": [568, 1077], "strip_prefix": [569, 1078], "strip_suffix": [570, 1079], "strptime": [571, 1080], "to_dat": [572, 1081], "to_datetim": [573, 1082], "to_decim": [574, 1083], "to_lowercas": [575, 1084], "to_tim": [576, 1085], "to_titlecas": [577, 1086], "to_uppercas": [578, 1087], "zfill": [579, 1088], "field": [580, 1089, 1090], "rename_field": [581, 1091], "sub": 582, "suffix": 583, "tan": [588, 1098], "tanh": [589, 1099], "to_phys": [590, 1107], "truediv": 592, "unique_count": [594, 1110], "upper_bound": [595, 1111], "value_count": [596, 1112], "where": 598, "xor": 599, "all_horizont": 601, "any_horizont": 603, "arang": 606, "arctan2": 607, "arctan2d": 608, "arg_sort_bi": 609, "arg_wher": 610, "avg": 611, "coalesc": 612, "concat_list": 613, "concat_str": 614, "cov": 617, "cumfold": 618, "cumreduc": 619, "cumsum_horizont": 621, "date_rang": [623, 624], "datetime_rang": [626, 627], "element": 629, "format": 633, "from_epoch": 634, "group": 635, "int_rang": [638, 639], "lit": 641, "max_horizont": 646, "min_horizont": 650, "ones": 652, "reduc": 654, "repeat": 655, "rolling_corr": 656, "rolling_cov": 657, "sql_expr": 659, "sum_horizont": 663, "time_rang": [666, 667], "when": 669, "zero": 670, "categori": [674, 1120], "col": 675, "name": [676, 994], "express": 679, "oper": [684, 791], "conjunct": 684, "comparison": 684, "string": [685, 1128], "window": 688, "convers": 689, "parallel": 689, "random": 689, "refer": 690, "input": 691, "output": 691, "feather": 691, "ipc": 691, "parquet": 691, "databas": 691, "json": 691, "avro": 691, "spreadsheet": 691, "delta": 691, "lake": 691, "dataset": 691, "collect": 700, "collect_async": 701, "deseri": 703, "explain": 707, "fetch": 709, "profil": [739, 1132], "serial": 747, "show_graph": 751, "with_context": 766, "lazygroupbi": [769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "read": 789, "write": 789, "logic": 789, "plan": 789, "selector": 791, "import": 791, "set": [791, 1029], "is_loc": 823, "to_loc": 825, "uses_lexical_ord": 826, "chunk_length": 829, "get_chunk": 909, "has_valid": 910, "hist": 913, "inner_dtyp": 915, "is_boolean": 918, "is_float": 924, "is_integ": 927, "is_numer": 934, "is_sort": 935, "is_tempor": 936, "is_utf8": 938, "new_from_index": 997, "peak_max": 1001, "peak_min": 1002, "series_equ": 1028, "set_at_idx": 1030, "to_fram": 1102, "to_list": 1104, "view": 1114, "zip_with": 1115, "sql": 1131, "method": 1131, "assert": 1132, "primit": 1132, "strategi": 1132, "helper": 1132, "util": 1133}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.approx_n_unique": [[141, "polars-dataframe-approx-n-unique"]], "polars.exceptions.PolarsPanicError": [[86, "polars-exceptions-polarspanicerror"]], "polars.from_numpy": [[97, "polars-from-numpy"]], "polars.scan_ipc": [[120, "polars-scan-ipc"]], "polars.DataFrame.clone": [[146, "polars-dataframe-clone"]], "polars.concat": [[77, "polars-concat"]], "polars.scan_ndjson": [[121, "polars-scan-ndjson"]], "polars.exceptions.NoDataError": [[84, "polars-exceptions-nodataerror"]], "polars.threadpool_size": [[135, "polars-threadpool-size"]], "polars.read_avro": [[103, "polars-read-avro"]], "polars.DataFrame.describe": [[149, "polars-dataframe-describe"]], "polars.testing.parametric.column": [[128, "polars-testing-parametric-column"]], "polars.exceptions.NoRowsReturnedError": [[85, "polars-exceptions-norowsreturnederror"]], "polars.read_ipc_schema": [[111, "polars-read-ipc-schema"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[102, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "Config": [[137, "config"]], "Config options": [[137, "config-options"]], "Config load, save, and current state": [[137, "config-load-save-and-current-state"]], "Use as a context manager": [[137, "use-as-a-context-manager"]], "Use as a function decorator": [[137, "use-as-a-function-decorator"]], "polars.testing.parametric.load_profile": [[132, "polars-testing-parametric-load-profile"]], "polars.scan_parquet": [[122, "polars-scan-parquet"]], "polars.testing.assert_series_equal": [[127, "polars-testing-assert-series-equal"]], "Aggregation": [[138, "aggregation"], [792, "aggregation"], [692, "aggregation"], [276, "aggregation"]], "polars.exceptions.TooManyRowsReturnedError": [[92, "polars-exceptions-toomanyrowsreturnederror"]], "polars.DataFrame.approx_unique": [[142, "polars-dataframe-approx-unique"]], "polars.exceptions.ColumnNotFoundError": [[80, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ArrowError": [[79, "polars-exceptions-arrowerror"]], "polars.read_ipc_stream": [[112, "polars-read-ipc-stream"]], "polars.read_ndjson": [[114, "polars-read-ndjson"]], "polars.read_database": [[106, "polars-read-database"]], "polars.testing.parametric.set_profile": [[134, "polars-testing-parametric-set-profile"]], "polars.exceptions.StructFieldNotFoundError": [[91, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.corr": [[148, "polars-dataframe-corr"]], "polars.read_database_uri": [[107, "polars-read-database-uri"]], "polars.read_parquet": [[116, "polars-read-parquet"]], "polars.using_string_cache": [[136, "polars-using-string-cache"]], "polars.exceptions.ComputeError": [[81, "polars-exceptions-computeerror"]], "polars.DataFrame.columns": [[147, "polars-dataframe-columns"]], "polars.exceptions.ShapeError": [[90, "polars-exceptions-shapeerror"]], "polars.get_index_type": [[101, "polars-get-index-type"]], "polars.read_excel": [[109, "polars-read-excel"]], "polars.from_pandas": [[98, "polars-from-pandas"]], "polars.from_arrow": [[93, "polars-from-arrow"]], "polars.enable_string_cache": [[78, "polars-enable-string-cache"]], "polars.scan_csv": [[118, "polars-scan-csv"]], "polars.testing.parametric.columns": [[129, "polars-testing-parametric-columns"]], "polars.DataFrame.apply": [[140, "polars-dataframe-apply"]], "polars.exceptions.RowsError": [[87, "polars-exceptions-rowserror"]], "polars.read_json": [[113, "polars-read-json"]], "polars.set_random_seed": [[124, "polars-set-random-seed"]], "polars.show_versions": [[125, "polars-show-versions"]], "polars.DataFrame.bottom_k": [[143, "polars-dataframe-bottom-k"]], "polars.DataFrame.clear": [[145, "polars-dataframe-clear"]], "polars.exceptions.DuplicateError": [[82, "polars-exceptions-duplicateerror"]], "polars.read_parquet_schema": [[117, "polars-read-parquet-schema"]], "polars.DataFrame.cast": [[144, "polars-dataframe-cast"]], "polars.collect_all": [[75, "polars-collect-all"]], "polars.exceptions.InvalidOperationError": [[83, "polars-exceptions-invalidoperationerror"]], "polars.scan_delta": [[119, "polars-scan-delta"]], "polars.scan_pyarrow_dataset": [[123, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.__dataframe__": [[139, "polars-dataframe-dataframe"]], "polars.testing.parametric.dataframes": [[131, "polars-testing-parametric-dataframes"]], "polars.from_dict": [[95, "polars-from-dict"]], "polars.collect_all_async": [[76, "polars-collect-all-async"]], "polars.exceptions.SchemaFieldNotFoundError": [[89, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_dataframe": [[94, "polars-from-dataframe"]], "polars.from_dicts": [[96, "polars-from-dicts"]], "polars.from_repr": [[100, "polars-from-repr"]], "polars.read_ods": [[115, "polars-read-ods"]], "polars.read_csv": [[104, "polars-read-csv"]], "polars.read_csv_batched": [[105, "polars-read-csv-batched"]], "polars.read_ipc": [[110, "polars-read-ipc"]], "polars.exceptions.SchemaError": [[88, "polars-exceptions-schemaerror"]], "polars.testing.assert_frame_equal": [[126, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.create_list_strategy": [[130, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.series": [[133, "polars-testing-parametric-series"]], "polars.read_delta": [[108, "polars-read-delta"]], "polars.from_records": [[99, "polars-from-records"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.LazyFrame.sink_parquet": [[50, "polars-lazyframe-sink-parquet"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.LazyFrame.sink_csv": [[48, "polars-lazyframe-sink-csv"]], "polars.SQLContext.tables": [[58, "polars-sqlcontext-tables"]], "polars.Int32": [[45, "polars-int32"]], "polars.Object": [[53, "polars-object"]], "polars.api.register_dataframe_namespace": [[70, "polars-api-register-dataframe-namespace"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.api.register_series_namespace": [[73, "polars-api-register-series-namespace"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Datetime": [[39, "polars-datetime"]], "polars.Struct": [[61, "polars-struct"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.StringCache": [[60, "polars-stringcache"]], "polars.SQLContext.execute": [[54, "polars-sqlcontext-execute"]], "polars.Date": [[38, "polars-date"]], "polars.UInt16": [[63, "polars-uint16"]], "polars.LazyFrame.sink_ipc": [[49, "polars-lazyframe-sink-ipc"]], "polars.List": [[51, "polars-list"]], "polars.Int8": [[47, "polars-int8"]], "polars.Null": [[52, "polars-null"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1132, "examples"], [791, "examples"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Time": [[62, "polars-time"]], "polars.Float64": [[43, "polars-float64"]], "polars.build_info": [[74, "polars-build-info"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.SQLContext.register_many": [[57, "polars-sqlcontext-register-many"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Unknown": [[67, "polars-unknown"]], "polars.DataFrame.write_ndjson": [[35, "polars-dataframe-write-ndjson"]], "polars.api.register_expr_namespace": [[71, "polars-api-register-expr-namespace"]], "polars.UInt64": [[65, "polars-uint64"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Float32": [[42, "polars-float32"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.UInt8": [[66, "polars-uint8"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Decimal": [[40, "polars-decimal"]], "polars.Utf8": [[68, "polars-utf8"]], "polars.align_frames": [[69, "polars-align-frames"]], "polars.SQLContext.unregister": [[59, "polars-sqlcontext-unregister"]], "polars.SQLContext.register_globals": [[56, "polars-sqlcontext-register-globals"]], "polars.Binary": [[3, "polars-binary"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_json": [[34, "polars-dataframe-write-json"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.SQLContext.register": [[55, "polars-sqlcontext-register"]], "polars.DataFrame.write_parquet": [[36, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Duration": [[41, "polars-duration"]], "polars.Int16": [[44, "polars-int16"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.UInt32": [[64, "polars-uint32"]], "polars.api.register_lazyframe_namespace": [[72, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "Index": [[0, "index"]], "polars.Int64": [[46, "polars-int64"]], "polars.DataFrame.write_ipc_stream": [[33, "polars-dataframe-write-ipc-stream"]], "polars.DataType": [[37, "polars-datatype"]], "Testing": [[1132, "testing"]], "Asserts": [[1132, "asserts"]], "Parametric testing": [[1132, "parametric-testing"]], "Polars primitives": [[1132, "polars-primitives"]], "Strategy helpers": [[1132, "strategy-helpers"]], "Profiles": [[1132, "profiles"]], "Manipulation/selection": [[1127, "manipulation-selection"], [790, "manipulation-selection"], [683, "manipulation-selection"], [273, "manipulation-selection"]], "Utils": [[1133, "utils"]], "String": [[1128, "string"], [685, "string"]], "SQL": [[1131, "sql"]], "Methods": [[1131, "methods"]], "Struct": [[1129, "struct"], [686, "struct"]], "Temporal": [[1130, "temporal"], [687, "temporal"], [274, "temporal"]], "Miscellaneous": [[1126, "miscellaneous"], [789, "miscellaneous"], [682, "miscellaneous"], [689, "miscellaneous"], [272, "miscellaneous"]], "List": [[1125, "list"], [680, "list"]], "polars.Series.log10": [[982, "polars-series-log10"]], "polars.Series.search_sorted": [[1027, "polars-series-search-sorted"]], "polars.Series.shrink_dtype": [[1035, "polars-series-shrink-dtype"]], "polars.Series.n_chunks": [[992, "polars-series-n-chunks"]], "polars.Series.sinh": [[1040, "polars-series-sinh"]], "polars.Series.mode": [[991, "polars-series-mode"]], "polars.Series.quantile": [[1005, "polars-series-quantile"]], "polars.Series.nan_min": [[996, "polars-series-nan-min"]], "polars.Series.str.contains": [[1048, "polars-series-str-contains"]], "polars.Series.sign": [[1038, "polars-series-sign"]], "polars.Series.rolling_max": [[1016, "polars-series-rolling-max"]], "polars.Series.map_elements": [[986, "polars-series-map-elements"]], "polars.Series.std": [[1045, "polars-series-std"]], "polars.Series.sin": [[1039, "polars-series-sin"]], "polars.Series.pct_change": [[1000, "polars-series-pct-change"]], "polars.Series.shrink_to_fit": [[1036, "polars-series-shrink-to-fit"]], "polars.Series.round": [[1025, "polars-series-round"]], "polars.Series.sort": [[1043, "polars-series-sort"]], "polars.Series.list.symmetric_difference": [[975, "polars-series-list-symmetric-difference"]], "polars.Series.qcut": [[1004, "polars-series-qcut"]], "polars.Series.str": [[1046, "polars-series-str"]], "polars.Series.list.take": [[977, "polars-series-list-take"]], "polars.Series.rolling_apply": [[1014, "polars-series-rolling-apply"]], "polars.Series.rolling_skew": [[1021, "polars-series-rolling-skew"]], "polars.Series.list.unique": [[980, "polars-series-list-unique"]], "polars.Series.set_at_idx": [[1030, "polars-series-set-at-idx"]], "polars.Series.set": [[1029, "polars-series-set"]], "polars.Series.list.to_struct": [[978, "polars-series-list-to-struct"]], "polars.Series.rolling_var": [[1024, "polars-series-rolling-var"]], "polars.Series.rolling_mean": [[1017, "polars-series-rolling-mean"]], "polars.Series.rank": [[1006, "polars-series-rank"]], "polars.Series.shift": [[1033, "polars-series-shift"]], "polars.Series.mean": [[988, "polars-series-mean"]], "polars.Series.log1p": [[983, "polars-series-log1p"]], "polars.Series.rolling_std": [[1022, "polars-series-rolling-std"]], "polars.Series.rechunk": [[1007, "polars-series-rechunk"]], "polars.Series.rolling_quantile": [[1020, "polars-series-rolling-quantile"]], "polars.Series.product": [[1003, "polars-series-product"]], "polars.Series.rolling_sum": [[1023, "polars-series-rolling-sum"]], "polars.Series.lower_bound": [[984, "polars-series-lower-bound"]], "polars.Series.log": [[981, "polars-series-log"]], "polars.Series.list.union": [[979, "polars-series-list-union"]], "polars.Series.peak_min": [[1002, "polars-series-peak-min"]], "polars.Series.rename": [[1009, "polars-series-rename"]], "polars.Series.shuffle": [[1037, "polars-series-shuffle"]], "polars.Series.skew": [[1041, "polars-series-skew"]], "polars.Series.str.concat": [[1047, "polars-series-str-concat"]], "polars.Series.rolling_map": [[1015, "polars-series-rolling-map"]], "polars.Series.sample": [[1026, "polars-series-sample"]], "polars.Series.not_": [[998, "polars-series-not"]], "polars.Series.name": [[994, "polars-series-name"]], "polars.Series.rolling_median": [[1018, "polars-series-rolling-median"]], "polars.Series.shift_and_fill": [[1034, "polars-series-shift-and-fill"]], "polars.Series.rle": [[1012, "polars-series-rle"]], "polars.Series.series_equal": [[1028, "polars-series-series-equal"]], "polars.Series.nan_max": [[995, "polars-series-nan-max"]], "polars.Series.str.count_match": [[1049, "polars-series-str-count-match"]], "polars.Series.map_dict": [[985, "polars-series-map-dict"]], "polars.Series.min": [[990, "polars-series-min"]], "polars.Series.reinterpret": [[1008, "polars-series-reinterpret"]], "polars.Series.reverse": [[1011, "polars-series-reverse"]], "polars.Series.median": [[989, "polars-series-median"]], "polars.Series.reshape": [[1010, "polars-series-reshape"]], "polars.Series.shape": [[1032, "polars-series-shape"]], "polars.Series.sqrt": [[1044, "polars-series-sqrt"]], "polars.Series.null_count": [[999, "polars-series-null-count"]], "polars.Series.max": [[987, "polars-series-max"]], "polars.Series.peak_max": [[1001, "polars-series-peak-max"]], "polars.Series.rle_id": [[1013, "polars-series-rle-id"]], "polars.Series.rolling_min": [[1019, "polars-series-rolling-min"]], "polars.Series.slice": [[1042, "polars-series-slice"]], "polars.Series.new_from_index": [[997, "polars-series-new-from-index"]], "polars.Series.n_unique": [[993, "polars-series-n-unique"]], "polars.Series.set_sorted": [[1031, "polars-series-set-sorted"]], "polars.Series.list.tail": [[976, "polars-series-list-tail"]], "polars.Series.list.set_union": [[970, "polars-series-list-set-union"]], "polars.Series.implode": [[914, "polars-series-implode"]], "polars.Series.is_infinite": [[926, "polars-series-is-infinite"]], "polars.Series.list.concat": [[948, "polars-series-list-concat"]], "polars.Series.list.intersection": [[959, "polars-series-list-intersection"]], "polars.Series.is_in": [[925, "polars-series-is-in"]], "polars.Series.hash": [[911, "polars-series-hash"]], "polars.Series.list.diff": [[952, "polars-series-list-diff"]], "polars.Series.list.lengths": [[962, "polars-series-list-lengths"]], "polars.Series.list.min": [[965, "polars-series-list-min"]], "polars.Series.is_finite": [[921, "polars-series-is-finite"]], "polars.Series.list.arg_min": [[947, "polars-series-list-arg-min"]], "polars.Series.is_null": [[933, "polars-series-is-null"]], "polars.Series.list.shift": [[971, "polars-series-list-shift"]], "polars.Series.list.difference": [[953, "polars-series-list-difference"]], "polars.Series.filter": [[906, "polars-series-filter"]], "polars.Series.list.set_intersection": [[968, "polars-series-list-set-intersection"]], "polars.Series.list.contains": [[949, "polars-series-list-contains"]], "polars.Series.inner_dtype": [[915, "polars-series-inner-dtype"]], "polars.Series.list.eval": [[954, "polars-series-list-eval"]], "polars.Series.list.join": [[960, "polars-series-list-join"]], "polars.Series.list.explode": [[955, "polars-series-list-explode"]], "polars.Series.fill_null": [[905, "polars-series-fill-null"]], "polars.Series.list.all": [[944, "polars-series-list-all"]], "polars.Series.is_not_nan": [[931, "polars-series-is-not-nan"]], "polars.Series.interpolate": [[916, "polars-series-interpolate"]], "polars.Series.is_last": [[928, "polars-series-is-last"]], "polars.Series.list.sort": [[973, "polars-series-list-sort"]], "polars.Series.extend_constant": [[903, "polars-series-extend-constant"]], "polars.Series.list": [[943, "polars-series-list"]], "polars.Series.is_numeric": [[934, "polars-series-is-numeric"]], "polars.Series.list.count_match": [[950, "polars-series-list-count-match"]], "polars.Series.is_boolean": [[918, "polars-series-is-boolean"]], "polars.Series.head": [[912, "polars-series-head"]], "polars.Series.is_duplicated": [[919, "polars-series-is-duplicated"]], "polars.Series.is_nan": [[930, "polars-series-is-nan"]], "polars.Series.list.head": [[958, "polars-series-list-head"]], "polars.Series.list.last": [[961, "polars-series-list-last"]], "polars.Series.list.set_symmetric_difference": [[969, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.slice": [[972, "polars-series-list-slice"]], "polars.Series.is_utf8": [[938, "polars-series-is-utf8"]], "polars.Series.is_unique": [[937, "polars-series-is-unique"]], "polars.Series.is_first_distinct": [[923, "polars-series-is-first-distinct"]], "polars.Series.is_last_distinct": [[929, "polars-series-is-last-distinct"]], "polars.Series.list.first": [[956, "polars-series-list-first"]], "polars.Series.list.get": [[957, "polars-series-list-get"]], "polars.Series.is_float": [[924, "polars-series-is-float"]], "polars.Series.fill_nan": [[904, "polars-series-fill-nan"]], "polars.Series.kurtosis": [[940, "polars-series-kurtosis"]], "polars.Series.list.sum": [[974, "polars-series-list-sum"]], "polars.Series.has_validity": [[910, "polars-series-has-validity"]], "polars.Series.is_not_null": [[932, "polars-series-is-not-null"]], "polars.Series.get_chunks": [[909, "polars-series-get-chunks"]], "polars.Series.len": [[941, "polars-series-len"]], "polars.Series.list.any": [[945, "polars-series-list-any"]], "polars.Series.floor": [[908, "polars-series-floor"]], "polars.Series.limit": [[942, "polars-series-limit"]], "polars.Series.list.max": [[963, "polars-series-list-max"]], "polars.Series.exp": [[900, "polars-series-exp"]], "polars.Series.item": [[939, "polars-series-item"]], "polars.Series.is_empty": [[920, "polars-series-is-empty"]], "polars.Series.hist": [[913, "polars-series-hist"]], "polars.Series.list.mean": [[964, "polars-series-list-mean"]], "polars.Series.is_between": [[917, "polars-series-is-between"]], "polars.Series.list.count_matches": [[951, "polars-series-list-count-matches"]], "polars.Series.extend": [[902, "polars-series-extend"]], "polars.Series.list.set_difference": [[967, "polars-series-list-set-difference"]], "polars.Series.explode": [[901, "polars-series-explode"]], "polars.Series.flags": [[907, "polars-series-flags"]], "polars.Series.is_temporal": [[936, "polars-series-is-temporal"]], "polars.Series.list.reverse": [[966, "polars-series-list-reverse"]], "polars.Series.is_first": [[922, "polars-series-is-first"]], "polars.Series.list.arg_max": [[946, "polars-series-list-arg-max"]], "polars.Series.is_integer": [[927, "polars-series-is-integer"]], "polars.Series.is_sorted": [[935, "polars-series-is-sorted"]], "polars.Series.dt.millisecond": [[868, "polars-series-dt-millisecond"]], "polars.Series.dt.hour": [[859, "polars-series-dt-hour"]], "polars.Series.cummax": [[837, "polars-series-cummax"]], "polars.Series.dt.weekday": [[891, "polars-series-dt-weekday"]], "polars.Series.dt.microseconds": [[867, "polars-series-dt-microseconds"]], "polars.Series.dt.month_start": [[875, "polars-series-dt-month-start"]], "polars.Series.dt.base_utc_offset": [[849, "polars-series-dt-base-utc-offset"]], "polars.Series.describe": [[843, "polars-series-describe"]], "polars.Series.dt.timestamp": [[887, "polars-series-dt-timestamp"]], "polars.Series.dt.time": [[886, "polars-series-dt-time"]], "polars.Series.clone": [[834, "polars-series-clone"]], "polars.Series.dt.month_end": [[874, "polars-series-dt-month-end"]], "polars.Series.dt.with_time_unit": [[892, "polars-series-dt-with-time-unit"]], "polars.Series.dot": [[845, "polars-series-dot"]], "polars.Series.dt.to_string": [[888, "polars-series-dt-to-string"]], "polars.Series.cbrt": [[827, "polars-series-cbrt"]], "polars.Series.drop_nans": [[846, "polars-series-drop-nans"]], "polars.Series.cut": [[842, "polars-series-cut"]], "polars.Series.dt.min": [[870, "polars-series-dt-min"]], "polars.Series.dt.convert_time_zone": [[852, "polars-series-dt-convert-time-zone"]], "polars.Series.cumulative_eval": [[841, "polars-series-cumulative-eval"]], "polars.Series.cosh": [[836, "polars-series-cosh"]], "polars.Series.dt.year": [[893, "polars-series-dt-year"]], "polars.Series.cummin": [[838, "polars-series-cummin"]], "polars.Series.dt.dst_offset": [[857, "polars-series-dt-dst-offset"]], "polars.Series.ewm_std": [[898, "polars-series-ewm-std"]], "polars.Series.cat.to_local": [[825, "polars-series-cat-to-local"]], "polars.Series.dt.seconds": [[884, "polars-series-dt-seconds"]], "polars.Series.entropy": [[895, "polars-series-entropy"]], "polars.Series.dtype": [[894, "polars-series-dtype"]], "polars.Series.diff": [[844, "polars-series-diff"]], "polars.Series.cat.uses_lexical_ordering": [[826, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cumsum": [[840, "polars-series-cumsum"]], "polars.Series.cos": [[835, "polars-series-cos"]], "polars.Series.dt.mean": [[864, "polars-series-dt-mean"]], "polars.Series.dt.datetime": [[854, "polars-series-dt-datetime"]], "polars.Series.dt.minute": [[871, "polars-series-dt-minute"]], "polars.Series.dt.strftime": [[885, "polars-series-dt-strftime"]], "polars.Series.chunk_lengths": [[829, "polars-series-chunk-lengths"]], "polars.Series.dt.offset_by": [[878, "polars-series-dt-offset-by"]], "polars.Series.dt.quarter": [[880, "polars-series-dt-quarter"]], "polars.Series.dt.second": [[883, "polars-series-dt-second"]], "polars.Series.dt.month": [[873, "polars-series-dt-month"]], "polars.Series.ewm_mean": [[897, "polars-series-ewm-mean"]], "polars.Series.dt.median": [[865, "polars-series-dt-median"]], "polars.Series.dt.combine": [[851, "polars-series-dt-combine"]], "polars.Series.estimated_size": [[896, "polars-series-estimated-size"]], "polars.Series.clip": [[831, "polars-series-clip"]], "polars.Series.clear": [[830, "polars-series-clear"]], "polars.Series.dt.day": [[855, "polars-series-dt-day"]], "polars.Series.dt.epoch": [[858, "polars-series-dt-epoch"]], "polars.Series.dt.is_leap_year": [[861, "polars-series-dt-is-leap-year"]], "polars.Series.dt.week": [[890, "polars-series-dt-week"]], "polars.Series.dt.days": [[856, "polars-series-dt-days"]], "polars.Series.clip_min": [[833, "polars-series-clip-min"]], "polars.Series.dt.hours": [[860, "polars-series-dt-hours"]], "polars.Series.dt.iso_year": [[862, "polars-series-dt-iso-year"]], "polars.Series.dt.replace_time_zone": [[881, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.nanoseconds": [[877, "polars-series-dt-nanoseconds"]], "polars.Series.dt.max": [[863, "polars-series-dt-max"]], "polars.Series.dt.truncate": [[889, "polars-series-dt-truncate"]], "polars.Series.dt.minutes": [[872, "polars-series-dt-minutes"]], "polars.Series.ceil": [[828, "polars-series-ceil"]], "polars.Series.cumprod": [[839, "polars-series-cumprod"]], "polars.Series.dt": [[848, "polars-series-dt"]], "polars.Series.dt.nanosecond": [[876, "polars-series-dt-nanosecond"]], "polars.Series.dt.round": [[882, "polars-series-dt-round"]], "polars.Series.ewm_var": [[899, "polars-series-ewm-var"]], "polars.Series.dt.milliseconds": [[869, "polars-series-dt-milliseconds"]], "polars.Series.drop_nulls": [[847, "polars-series-drop-nulls"]], "polars.Series.dt.microsecond": [[866, "polars-series-dt-microsecond"]], "polars.Series.clip_max": [[832, "polars-series-clip-max"]], "polars.Series.dt.ordinal_day": [[879, "polars-series-dt-ordinal-day"]], "polars.Series.dt.date": [[853, "polars-series-dt-date"]], "polars.Series.dt.cast_time_unit": [[850, "polars-series-dt-cast-time-unit"]], "polars.Series.take": [[1096, "polars-series-take"]], "polars.Series.str.extract": [[1055, "polars-series-str-extract"]], "polars.Series.struct.unnest": [[1093, "polars-series-struct-unnest"]], "polars.Series.str.starts_with": [[1073, "polars-series-str-starts-with"]], "Categories": [[1120, "categories"], [674, "categories"]], "polars.Series.str.strip_chars": [[1075, "polars-series-str-strip-chars"]], "polars.Series.str.json_extract": [[1058, "polars-series-str-json-extract"]], "polars.Series.str.replace_all": [[1066, "polars-series-str-replace-all"]], "polars.Series.str.strptime": [[1080, "polars-series-str-strptime"]], "polars.Series.to_physical": [[1107, "polars-series-to-physical"]], "polars.Series.str.parse_int": [[1064, "polars-series-str-parse-int"]], "polars.Series.tail": [[1095, "polars-series-tail"]], "polars.Series.str.to_uppercase": [[1087, "polars-series-str-to-uppercase"]], "polars.Series.struct.schema": [[1092, "polars-series-struct-schema"]], "polars.Series.to_frame": [[1102, "polars-series-to-frame"]], "polars.Series.to_dummies": [[1101, "polars-series-to-dummies"]], "polars.Series.str.rjust": [[1067, "polars-series-str-rjust"]], "polars.Series.sum": [[1094, "polars-series-sum"]], "polars.Series.tan": [[1098, "polars-series-tan"]], "polars.Series.str.n_chars": [[1063, "polars-series-str-n-chars"]], "Computation": [[1121, "computation"], [677, "computation"], [267, "computation"]], "polars.Series.str.decode": [[1051, "polars-series-str-decode"]], "Series": [[1124, "series"]], "polars.Series.upper_bound": [[1111, "polars-series-upper-bound"]], "polars.Series.str.slice": [[1069, "polars-series-str-slice"]], "polars.Series.str.explode": [[1054, "polars-series-str-explode"]], "polars.Series.str.strip": [[1074, "polars-series-str-strip"]], "polars.Series.str.zfill": [[1088, "polars-series-str-zfill"]], "polars.Series.str.replace": [[1065, "polars-series-str-replace"]], "polars.Series.str.to_lowercase": [[1084, "polars-series-str-to-lowercase"]], "polars.Series.str.count_matches": [[1050, "polars-series-str-count-matches"]], "polars.Series.str.ends_with": [[1053, "polars-series-str-ends-with"]], "polars.Series.str.to_datetime": [[1082, "polars-series-str-to-datetime"]], "polars.Series.str.lengths": [[1060, "polars-series-str-lengths"]], "polars.Series.value_counts": [[1112, "polars-series-value-counts"]], "Attributes": [[1117, "attributes"], [785, "attributes"], [266, "attributes"]], "polars.Series.str.split_exact": [[1071, "polars-series-str-split-exact"]], "polars.Series.str.extract_groups": [[1057, "polars-series-str-extract-groups"]], "Boolean": [[1119, "boolean"], [673, "boolean"]], "polars.Series.str.ljust": [[1061, "polars-series-str-ljust"]], "polars.Series.to_init_repr": [[1103, "polars-series-to-init-repr"]], "polars.Series.str.strip_chars_end": [[1076, "polars-series-str-strip-chars-end"]], "polars.Series.str.encode": [[1052, "polars-series-str-encode"]], "polars.Series.to_arrow": [[1100, "polars-series-to-arrow"]], "polars.Series.unique": [[1109, "polars-series-unique"]], "polars.Series.str.to_decimal": [[1083, "polars-series-str-to-decimal"]], "polars.Series.take_every": [[1097, "polars-series-take-every"]], "Array": [[1116, "array"], [671, "array"]], "polars.Series.to_list": [[1104, "polars-series-to-list"]], "Binary": [[1118, "binary"], [672, "binary"], [684, "binary"]], "Export": [[1123, "export"], [269, "export"]], "polars.Series.str.to_titlecase": [[1086, "polars-series-str-to-titlecase"]], "polars.Series.zip_with": [[1115, "polars-series-zip-with"]], "polars.Series.struct.fields": [[1090, "polars-series-struct-fields"]], "polars.Series.struct.field": [[1089, "polars-series-struct-field"]], "polars.Series.str.strip_chars_start": [[1077, "polars-series-str-strip-chars-start"]], "polars.Series.str.extract_all": [[1056, "polars-series-str-extract-all"]], "polars.Series.top_k": [[1108, "polars-series-top-k"]], "polars.Series.unique_counts": [[1110, "polars-series-unique-counts"]], "polars.Series.struct.rename_fields": [[1091, "polars-series-struct-rename-fields"]], "polars.Series.var": [[1113, "polars-series-var"]], "polars.Series.str.splitn": [[1072, "polars-series-str-splitn"]], "polars.Series.str.lstrip": [[1062, "polars-series-str-lstrip"]], "polars.Series.str.rstrip": [[1068, "polars-series-str-rstrip"]], "polars.Series.str.strip_suffix": [[1079, "polars-series-str-strip-suffix"]], "polars.Series.tanh": [[1099, "polars-series-tanh"]], "polars.Series.str.to_time": [[1085, "polars-series-str-to-time"]], "polars.Series.str.strip_prefix": [[1078, "polars-series-str-strip-prefix"]], "polars.Series.to_numpy": [[1105, "polars-series-to-numpy"]], "Descriptive": [[1122, "descriptive"], [786, "descriptive"], [268, "descriptive"]], "polars.Series.str.split": [[1070, "polars-series-str-split"]], "polars.Series.to_pandas": [[1106, "polars-series-to-pandas"]], "polars.Series.str.to_date": [[1081, "polars-series-str-to-date"]], "polars.Series.str.json_path_match": [[1059, "polars-series-str-json-path-match"]], "polars.Series.view": [[1114, "polars-series-view"]], "polars.LazyFrame.top_k": [[758, "polars-lazyframe-top-k"]], "polars.Series.cat.set_ordering": [[824, "polars-series-cat-set-ordering"]], "polars.Series.arg_unique": [[809, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[778, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[775, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[769, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.with_columns_seq": [[765, "polars-lazyframe-with-columns-seq"]], "polars.Series.any": [[796, "polars-series-any"]], "polars.Series.bin.ends_with": [[817, "polars-series-bin-ends-with"]], "polars.Series.cat.is_local": [[823, "polars-series-cat-is-local"]], "polars.LazyFrame.show_graph": [[751, "polars-lazyframe-show-graph"]], "polars.Series.abs": [[793, "polars-series-abs"]], "polars.Series.bin.starts_with": [[818, "polars-series-bin-starts-with"]], "polars.LazyFrame.unnest": [[760, "polars-lazyframe-unnest"]], "polars.Series.arctanh": [[804, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[779, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.LazyFrame.update": [[761, "polars-lazyframe-update"]], "polars.Series.bottom_k": [[819, "polars-series-bottom-k"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[770, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arccosh": [[800, "polars-series-arccosh"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[773, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[772, "polars-lazyframe-group-by-lazygroupby-count"]], "Selectors": [[791, "selectors"]], "Importing": [[791, "importing"]], "Set operations": [[791, "set-operations"]], "Functions": [[791, "functions"], [678, "functions"], [689, "functions"]], "polars.Series.append": [[797, "polars-series-append"]], "polars.Series.arr.unique": [[813, "polars-series-arr-unique"]], "polars.Series.arg_min": [[806, "polars-series-arg-min"]], "polars.Series.cast": [[820, "polars-series-cast"]], "polars.LazyFrame.var": [[762, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[774, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arccos": [[799, "polars-series-arccos"]], "Read/write logical plan": [[789, "read-write-logical-plan"]], "polars.LazyFrame.write_json": [[768, "polars-lazyframe-write-json"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[780, "polars-lazyframe-group-by-lazygroupby-min"]], "LazyFrame": [[788, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[781, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.apply": [[798, "polars-series-apply"]], "polars.LazyFrame.take_every": [[757, "polars-lazyframe-take-every"]], "polars.LazyFrame.shift_and_fill": [[750, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.sum": [[755, "polars-lazyframe-sum"]], "polars.LazyFrame.std": [[754, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[784, "polars-lazyframe-group-by-lazygroupby-tail"]], "GroupBy": [[787, "groupby"], [270, "groupby"]], "polars.LazyFrame.sort": [[753, "polars-lazyframe-sort"]], "polars.LazyFrame.with_context": [[766, "polars-lazyframe-with-context"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[771, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Series.arg_max": [[805, "polars-series-arg-max"]], "polars.Series.arr.sum": [[812, "polars-series-arr-sum"]], "polars.Series.bin.decode": [[815, "polars-series-bin-decode"]], "polars.Series.bin.contains": [[814, "polars-series-bin-contains"]], "polars.Series.arg_sort": [[807, "polars-series-arg-sort"]], "polars.Series.arg_true": [[808, "polars-series-arg-true"]], "polars.Series.arctan": [[803, "polars-series-arctan"]], "polars.LazyFrame.with_columns": [[764, "polars-lazyframe-with-columns"]], "polars.LazyFrame.width": [[763, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[776, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arcsin": [[801, "polars-series-arcsin"]], "polars.Series.bin.encode": [[816, "polars-series-bin-encode"]], "polars.Series.arr.min": [[811, "polars-series-arr-min"]], "polars.Series.alias": [[794, "polars-series-alias"]], "polars.LazyFrame.unique": [[759, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[783, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.slice": [[752, "polars-lazyframe-slice"]], "polars.Series.arr.max": [[810, "polars-series-arr-max"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[782, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.with_row_count": [[767, "polars-lazyframe-with-row-count"]], "polars.Series.cat.get_categories": [[822, "polars-series-cat-get-categories"]], "polars.LazyFrame.tail": [[756, "polars-lazyframe-tail"]], "polars.Series.arcsinh": [[802, "polars-series-arcsinh"]], "polars.Series.cat": [[821, "polars-series-cat"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[777, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.all": [[795, "polars-series-all"]], "polars.any": [[602, "polars-any"]], "polars.approx_n_unique": [[605, "polars-approx-n-unique"]], "polars.time": [[665, "polars-time"]], "polars.ones": [[652, "polars-ones"]], "polars.all_horizontal": [[601, "polars-all-horizontal"]], "polars.arctan2d": [[608, "polars-arctan2d"]], "polars.exclude": [[630, "polars-exclude"]], "polars.arg_where": [[610, "polars-arg-where"]], "polars.mean": [[647, "polars-mean"]], "polars.groups": [[635, "polars-groups"]], "polars.date": [[622, "polars-date"]], "polars.lit": [[641, "polars-lit"]], "polars.var": [[668, "polars-var"]], "polars.reduce": [[654, "polars-reduce"]], "polars.median": [[648, "polars-median"]], "polars.int_range": [[638, "polars-int-range"]], "polars.max": [[645, "polars-max"]], "polars.cumreduce": [[619, "polars-cumreduce"]], "polars.select": [[658, "polars-select"]], "polars.int_ranges": [[639, "polars-int-ranges"]], "polars.apply": [[604, "polars-apply"]], "polars.sum": [[662, "polars-sum"]], "polars.fold": [[632, "polars-fold"]], "polars.last": [[640, "polars-last"]], "polars.arange": [[606, "polars-arange"]], "polars.format": [[633, "polars-format"]], "polars.first": [[631, "polars-first"]], "polars.count": [[616, "polars-count"]], "polars.map_batches": [[643, "polars-map-batches"]], "polars.quantile": [[653, "polars-quantile"]], "polars.date_ranges": [[624, "polars-date-ranges"]], "polars.sql_expr": [[659, "polars-sql-expr"]], "polars.zeros": [[670, "polars-zeros"]], "polars.time_range": [[666, "polars-time-range"]], "polars.rolling_corr": [[656, "polars-rolling-corr"]], "polars.arg_sort_by": [[609, "polars-arg-sort-by"]], "polars.avg": [[611, "polars-avg"]], "polars.concat_list": [[613, "polars-concat-list"]], "polars.datetime_range": [[626, "polars-datetime-range"]], "polars.duration": [[628, "polars-duration"]], "polars.all": [[600, "polars-all"]], "polars.from_epoch": [[634, "polars-from-epoch"]], "polars.time_ranges": [[667, "polars-time-ranges"]], "polars.any_horizontal": [[603, "polars-any-horizontal"]], "polars.min": [[649, "polars-min"]], "polars.cumsum_horizontal": [[621, "polars-cumsum-horizontal"]], "polars.min_horizontal": [[650, "polars-min-horizontal"]], "polars.corr": [[615, "polars-corr"]], "polars.cumsum": [[620, "polars-cumsum"]], "polars.date_range": [[623, "polars-date-range"]], "polars.element": [[629, "polars-element"]], "polars.head": [[636, "polars-head"]], "polars.rolling_cov": [[657, "polars-rolling-cov"]], "polars.std": [[660, "polars-std"]], "polars.struct": [[661, "polars-struct"]], "polars.arctan2": [[607, "polars-arctan2"]], "polars.coalesce": [[612, "polars-coalesce"]], "polars.cumfold": [[618, "polars-cumfold"]], "polars.sum_horizontal": [[663, "polars-sum-horizontal"]], "polars.tail": [[664, "polars-tail"]], "polars.max_horizontal": [[646, "polars-max-horizontal"]], "polars.when": [[669, "polars-when"]], "polars.concat_str": [[614, "polars-concat-str"]], "polars.cov": [[617, "polars-cov"]], "polars.n_unique": [[651, "polars-n-unique"]], "polars.datetime_ranges": [[627, "polars-datetime-ranges"]], "polars.map_groups": [[644, "polars-map-groups"]], "polars.repeat": [[655, "polars-repeat"]], "polars.datetime": [[625, "polars-datetime"]], "polars.implode": [[637, "polars-implode"]], "polars.map": [[642, "polars-map"]], "polars.Expr.truediv": [[592, "polars-expr-truediv"]], "polars.Expr.str.parse_int": [[555, "polars-expr-str-parse-int"]], "polars.Expr.str.strip_chars": [[566, "polars-expr-str-strip-chars"]], "polars.Expr.sqrt": [[536, "polars-expr-sqrt"]], "polars.Expr.skew": [[532, "polars-expr-skew"]], "polars.Expr.str.contains": [[539, "polars-expr-str-contains"]], "polars.Expr.shuffle": [[528, "polars-expr-shuffle"]], "polars.Expr.str.extract_all": [[547, "polars-expr-str-extract-all"]], "polars.Expr.tail": [[585, "polars-expr-tail"]], "polars.Expr.take_every": [[587, "polars-expr-take-every"]], "polars.Expr.sinh": [[531, "polars-expr-sinh"]], "polars.Expr.str.ends_with": [[544, "polars-expr-str-ends-with"]], "polars.Expr.str.split": [[561, "polars-expr-str-split"]], "polars.Expr.suffix": [[583, "polars-expr-suffix"]], "polars.Expr.slice": [[533, "polars-expr-slice"]], "polars.Expr.std": [[537, "polars-expr-std"]], "polars.Expr.tanh": [[589, "polars-expr-tanh"]], "polars.Expr.sin": [[530, "polars-expr-sin"]], "polars.Expr.xor": [[599, "polars-expr-xor"]], "polars.Expr.sign": [[529, "polars-expr-sign"]], "polars.Expr.str.split_exact": [[562, "polars-expr-str-split-exact"]], "polars.Expr.sub": [[582, "polars-expr-sub"]], "polars.Expr.str.rstrip": [[559, "polars-expr-str-rstrip"]], "polars.Expr.str.json_path_match": [[550, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_date": [[572, "polars-expr-str-to-date"]], "polars.Expr.str.to_titlecase": [[577, "polars-expr-str-to-titlecase"]], "polars.Expr.str.replace": [[556, "polars-expr-str-replace"]], "polars.Expr.shift_and_fill": [[526, "polars-expr-shift-and-fill"]], "polars.Expr.str.zfill": [[579, "polars-expr-str-zfill"]], "polars.Expr.str.strip_chars_end": [[567, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.ljust": [[552, "polars-expr-str-ljust"]], "polars.Expr.str.extract": [[546, "polars-expr-str-extract"]], "polars.Expr.str.to_decimal": [[574, "polars-expr-str-to-decimal"]], "polars.Expr.str.strptime": [[571, "polars-expr-str-strptime"]], "polars.Expr.str.to_datetime": [[573, "polars-expr-str-to-datetime"]], "polars.Expr.to_physical": [[590, "polars-expr-to-physical"]], "polars.Expr.value_counts": [[596, "polars-expr-value-counts"]], "polars.Expr.str.to_uppercase": [[578, "polars-expr-str-to-uppercase"]], "polars.Expr.str.json_extract": [[549, "polars-expr-str-json-extract"]], "polars.Expr.str.replace_all": [[557, "polars-expr-str-replace-all"]], "polars.Expr.str.decode": [[542, "polars-expr-str-decode"]], "polars.Expr.str.lstrip": [[553, "polars-expr-str-lstrip"]], "polars.Expr.str.to_lowercase": [[575, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[576, "polars-expr-str-to-time"]], "polars.Expr.sort_by": [[535, "polars-expr-sort-by"]], "polars.Expr.str.extract_groups": [[548, "polars-expr-str-extract-groups"]], "polars.Expr.take": [[586, "polars-expr-take"]], "polars.Expr.upper_bound": [[595, "polars-expr-upper-bound"]], "polars.Expr.shift": [[525, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[527, "polars-expr-shrink-dtype"]], "polars.Expr.str.splitn": [[563, "polars-expr-str-splitn"]], "polars.Expr.unique_counts": [[594, "polars-expr-unique-counts"]], "polars.Expr.str.n_chars": [[554, "polars-expr-str-n-chars"]], "polars.Expr.str.strip_suffix": [[570, "polars-expr-str-strip-suffix"]], "polars.Expr.struct.rename_fields": [[581, "polars-expr-struct-rename-fields"]], "polars.Expr.str.rjust": [[558, "polars-expr-str-rjust"]], "polars.Expr.tan": [[588, "polars-expr-tan"]], "polars.Expr.top_k": [[591, "polars-expr-top-k"]], "polars.Expr.str.starts_with": [[564, "polars-expr-str-starts-with"]], "polars.Expr.str.encode": [[543, "polars-expr-str-encode"]], "polars.Expr.struct.field": [[580, "polars-expr-struct-field"]], "polars.Expr.var": [[597, "polars-expr-var"]], "polars.Expr.str.count_match": [[540, "polars-expr-str-count-match"]], "polars.Expr.str.count_matches": [[541, "polars-expr-str-count-matches"]], "polars.Expr.str.slice": [[560, "polars-expr-str-slice"]], "polars.Expr.str.explode": [[545, "polars-expr-str-explode"]], "polars.Expr.str.lengths": [[551, "polars-expr-str-lengths"]], "polars.Expr.str.concat": [[538, "polars-expr-str-concat"]], "polars.Expr.str.strip": [[565, "polars-expr-str-strip"]], "polars.Expr.where": [[598, "polars-expr-where"]], "polars.Expr.str.strip_chars_start": [[568, "polars-expr-str-strip-chars-start"]], "polars.Expr.unique": [[593, "polars-expr-unique"]], "polars.Expr.sort": [[534, "polars-expr-sort"]], "polars.Expr.sum": [[584, "polars-expr-sum"]], "polars.Expr.str.strip_prefix": [[569, "polars-expr-str-strip-prefix"]], "polars.LazyFrame.from_json": [[714, "polars-lazyframe-from-json"]], "Meta": [[681, "meta"]], "polars.LazyFrame.cache": [[696, "polars-lazyframe-cache"]], "polars.LazyFrame.filter": [[712, "polars-lazyframe-filter"]], "polars.LazyFrame.groupby_rolling": [[720, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.limit": [[728, "polars-lazyframe-limit"]], "polars.LazyFrame.rename": [[742, "polars-lazyframe-rename"]], "API reference": [[690, "api-reference"]], "polars.LazyFrame.clear": [[698, "polars-lazyframe-clear"]], "polars.LazyFrame.map": [[729, "polars-lazyframe-map"]], "polars.LazyFrame.cast": [[697, "polars-lazyframe-cast"]], "polars.LazyFrame.fill_nan": [[710, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_dynamic": [[719, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.last": [[726, "polars-lazyframe-last"]], "polars.LazyFrame.merge_sorted": [[735, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.quantile": [[740, "polars-lazyframe-quantile"]], "Window": [[688, "window"]], "polars.LazyFrame.deserialize": [[703, "polars-lazyframe-deserialize"]], "polars.LazyFrame.fetch": [[709, "polars-lazyframe-fetch"]], "polars.LazyFrame.group_by_rolling": [[717, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.select_seq": [[746, "polars-lazyframe-select-seq"]], "Columns / names": [[676, "columns-names"]], "polars.LazyFrame.select": [[745, "polars-lazyframe-select"]], "polars.LazyFrame.serialize": [[747, "polars-lazyframe-serialize"]], "polars.LazyFrame.approx_n_unique": [[693, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.lazy": [[727, "polars-lazyframe-lazy"]], "polars.LazyFrame.profile": [[739, "polars-lazyframe-profile"]], "polars.LazyFrame.approx_unique": [[694, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.map_batches": [[730, "polars-lazyframe-map-batches"]], "polars.LazyFrame.min": [[736, "polars-lazyframe-min"]], "polars.LazyFrame.join": [[724, "polars-lazyframe-join"]], "polars.LazyFrame.groupby": [[718, "polars-lazyframe-groupby"]], "polars.LazyFrame.explain": [[707, "polars-lazyframe-explain"]], "polars.col": [[675, "polars-col"]], "polars.LazyFrame.head": [[721, "polars-lazyframe-head"]], "polars.LazyFrame.read_json": [[741, "polars-lazyframe-read-json"]], "Input/output": [[691, "input-output"]], "CSV": [[691, "csv"]], "Feather/ IPC": [[691, "feather-ipc"]], "Parquet": [[691, "parquet"]], "Database": [[691, "database"]], "JSON": [[691, "json"]], "AVRO": [[691, "avro"]], "Spreadsheet": [[691, "spreadsheet"]], "Delta Lake": [[691, "delta-lake"]], "Datasets": [[691, "datasets"]], "BatchedCsvReader": [[691, "batchedcsvreader"]], "polars.LazyFrame.shift": [[749, "polars-lazyframe-shift"]], "polars.LazyFrame.reverse": [[743, "polars-lazyframe-reverse"]], "polars.LazyFrame.explode": [[708, "polars-lazyframe-explode"]], "polars.LazyFrame.pipe": [[738, "polars-lazyframe-pipe"]], "polars.LazyFrame.drop_nulls": [[705, "polars-lazyframe-drop-nulls"]], "Operators": [[684, "operators"]], "Conjunction": [[684, "conjunction"]], "Comparison": [[684, "comparison"]], "Numeric": [[684, "numeric"], [274, "numeric"]], "polars.LazyFrame.interpolate": [[723, "polars-lazyframe-interpolate"]], "polars.LazyFrame.first": [[713, "polars-lazyframe-first"]], "polars.LazyFrame.collect_async": [[701, "polars-lazyframe-collect-async"]], "polars.LazyFrame.clone": [[699, "polars-lazyframe-clone"]], "polars.LazyFrame.dtypes": [[706, "polars-lazyframe-dtypes"]], "Conversion": [[689, "conversion"]], "Parallelization": [[689, "parallelization"]], "Random": [[689, "random"]], "StringCache": [[689, "stringcache"]], "polars.LazyFrame.columns": [[702, "polars-lazyframe-columns"]], "Expressions": [[679, "expressions"]], "polars.LazyFrame.group_by": [[715, "polars-lazyframe-group-by"]], "polars.LazyFrame.max": [[731, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[732, "polars-lazyframe-mean"]], "polars.LazyFrame.melt": [[734, "polars-lazyframe-melt"]], "polars.LazyFrame.join_asof": [[725, "polars-lazyframe-join-asof"]], "polars.LazyFrame.bottom_k": [[695, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.median": [[733, "polars-lazyframe-median"]], "polars.LazyFrame.fill_null": [[711, "polars-lazyframe-fill-null"]], "polars.LazyFrame.inspect": [[722, "polars-lazyframe-inspect"]], "polars.LazyFrame.collect": [[700, "polars-lazyframe-collect"]], "polars.LazyFrame.group_by_dynamic": [[716, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.null_count": [[737, "polars-lazyframe-null-count"]], "polars.LazyFrame.set_sorted": [[748, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.drop": [[704, "polars-lazyframe-drop"]], "polars.LazyFrame.schema": [[744, "polars-lazyframe-schema"]], "polars.Expr.rolling_mean": [[513, "polars-expr-rolling-mean"]], "polars.Expr.reshape": [[506, "polars-expr-reshape"]], "polars.Expr.set_sorted": [[524, "polars-expr-set-sorted"]], "polars.Expr.meta.pop": [[476, "polars-expr-meta-pop"]], "polars.Expr.list.to_struct": [[455, "polars-expr-list-to-struct"]], "polars.Expr.or_": [[492, "polars-expr-or"]], "polars.Expr.list.take": [[454, "polars-expr-list-take"]], "polars.Expr.list.sort": [[450, "polars-expr-list-sort"]], "polars.Expr.null_count": [[491, "polars-expr-null-count"]], "polars.Expr.n_unique": [[485, "polars-expr-n-unique"]], "polars.Expr.rolling_skew": [[517, "polars-expr-rolling-skew"]], "polars.Expr.meta.output_name": [[475, "polars-expr-meta-output-name"]], "polars.Expr.over": [[493, "polars-expr-over"]], "polars.Expr.list.sum": [[451, "polars-expr-list-sum"]], "polars.Expr.lower_bound": [[461, "polars-expr-lower-bound"]], "polars.Expr.mul": [[484, "polars-expr-mul"]], "polars.Expr.lt": [[462, "polars-expr-lt"]], "polars.Expr.prefix": [[497, "polars-expr-prefix"]], "polars.Expr.ne": [[488, "polars-expr-ne"]], "polars.Expr.mean": [[469, "polars-expr-mean"]], "polars.Expr.qcut": [[499, "polars-expr-qcut"]], "polars.Expr.max": [[468, "polars-expr-max"]], "polars.Expr.reinterpret": [[504, "polars-expr-reinterpret"]], "polars.Expr.log": [[458, "polars-expr-log"]], "polars.Expr.rolling_std": [[518, "polars-expr-rolling-std"]], "polars.Expr.map_elements": [[467, "polars-expr-map-elements"]], "polars.Expr.pipe": [[495, "polars-expr-pipe"]], "polars.Expr.rolling_map": [[511, "polars-expr-rolling-map"]], "polars.Expr.repeat_by": [[505, "polars-expr-repeat-by"]], "polars.Expr.meta.ne": [[474, "polars-expr-meta-ne"]], "polars.Expr.min": [[481, "polars-expr-min"]], "polars.Expr.round": [[521, "polars-expr-round"]], "polars.Expr.rle_id": [[509, "polars-expr-rle-id"]], "polars.Expr.rolling_apply": [[510, "polars-expr-rolling-apply"]], "polars.Expr.rolling_min": [[515, "polars-expr-rolling-min"]], "polars.Expr.list.symmetric_difference": [[452, "polars-expr-list-symmetric-difference"]], "polars.Expr.meta.tree_format": [[478, "polars-expr-meta-tree-format"]], "polars.Expr.product": [[498, "polars-expr-product"]], "polars.Expr.map_dict": [[466, "polars-expr-map-dict"]], "polars.Expr.map_alias": [[464, "polars-expr-map-alias"]], "polars.Expr.list.tail": [[453, "polars-expr-list-tail"]], "polars.Expr.rolling_median": [[514, "polars-expr-rolling-median"]], "polars.Expr.rolling_sum": [[519, "polars-expr-rolling-sum"]], "polars.Expr.list.unique": [[457, "polars-expr-list-unique"]], "polars.Expr.rechunk": [[503, "polars-expr-rechunk"]], "polars.Expr.median": [[470, "polars-expr-median"]], "polars.Expr.reverse": [[507, "polars-expr-reverse"]], "polars.Expr.rolling_quantile": [[516, "polars-expr-rolling-quantile"]], "polars.Expr.map_batches": [[465, "polars-expr-map-batches"]], "polars.Expr.mode": [[483, "polars-expr-mode"]], "polars.Expr.nan_max": [[486, "polars-expr-nan-max"]], "polars.Expr.not_": [[490, "polars-expr-not"]], "polars.Expr.rolling_var": [[520, "polars-expr-rolling-var"]], "polars.Expr.ne_missing": [[489, "polars-expr-ne-missing"]], "polars.Expr.search_sorted": [[523, "polars-expr-search-sorted"]], "polars.Expr.rolling_max": [[512, "polars-expr-rolling-max"]], "polars.Expr.rle": [[508, "polars-expr-rle"]], "polars.Expr.nan_min": [[487, "polars-expr-nan-min"]], "polars.Expr.meta.root_names": [[477, "polars-expr-meta-root-names"]], "polars.Expr.map": [[463, "polars-expr-map"]], "polars.Expr.radians": [[501, "polars-expr-radians"]], "polars.Expr.pct_change": [[494, "polars-expr-pct-change"]], "polars.Expr.meta.write_json": [[480, "polars-expr-meta-write-json"]], "polars.Expr.quantile": [[500, "polars-expr-quantile"]], "polars.Expr.rank": [[502, "polars-expr-rank"]], "polars.Expr.meta.is_regex_projection": [[473, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.union": [[456, "polars-expr-list-union"]], "polars.Expr.log10": [[459, "polars-expr-log10"]], "polars.Expr.sample": [[522, "polars-expr-sample"]], "polars.Expr.meta.undo_aliases": [[479, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.eq": [[471, "polars-expr-meta-eq"]], "polars.Expr.pow": [[496, "polars-expr-pow"]], "polars.Expr.log1p": [[460, "polars-expr-log1p"]], "polars.Expr.meta.has_multiple_outputs": [[472, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.mod": [[482, "polars-expr-mod"]], "polars.Expr.is_between": [[400, "polars-expr-is-between"]], "polars.Expr.is_not": [[410, "polars-expr-is-not"]], "polars.Expr.head": [[396, "polars-expr-head"]], "polars.Expr.is_infinite": [[406, "polars-expr-is-infinite"]], "polars.Expr.list.any": [[422, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[423, "polars-expr-list-arg-max"]], "polars.Expr.list.count_matches": [[428, "polars-expr-list-count-matches"]], "polars.Expr.list.set_difference": [[444, "polars-expr-list-set-difference"]], "polars.Expr.is_first": [[403, "polars-expr-is-first"]], "polars.Expr.list.set_intersection": [[445, "polars-expr-list-set-intersection"]], "polars.Expr.list.slice": [[449, "polars-expr-list-slice"]], "polars.Expr.is_null": [[413, "polars-expr-is-null"]], "polars.Expr.exp": [[381, "polars-expr-exp"]], "polars.Expr.fill_nan": [[384, "polars-expr-fill-nan"]], "polars.Expr.list.contains": [[426, "polars-expr-list-contains"]], "polars.Expr.list.head": [[435, "polars-expr-list-head"]], "polars.Expr.last": [[417, "polars-expr-last"]], "polars.Expr.explode": [[382, "polars-expr-explode"]], "polars.Expr.keep_name": [[415, "polars-expr-keep-name"]], "polars.Expr.floor": [[389, "polars-expr-floor"]], "polars.Expr.list.explode": [[432, "polars-expr-list-explode"]], "polars.Expr.list.reverse": [[443, "polars-expr-list-reverse"]], "polars.Expr.hash": [[395, "polars-expr-hash"]], "polars.Expr.list.intersection": [[436, "polars-expr-list-intersection"]], "polars.Expr.le": [[418, "polars-expr-le"]], "polars.Expr.is_duplicated": [[401, "polars-expr-is-duplicated"]], "polars.Expr.list.difference": [[430, "polars-expr-list-difference"]], "polars.Expr.list.first": [[433, "polars-expr-list-first"]], "polars.Expr.list.shift": [[448, "polars-expr-list-shift"]], "polars.Expr.is_last": [[407, "polars-expr-is-last"]], "polars.Expr.is_in": [[405, "polars-expr-is-in"]], "polars.Expr.extend_constant": [[383, "polars-expr-extend-constant"]], "polars.Expr.list.last": [[438, "polars-expr-list-last"]], "polars.Expr.eq_missing": [[376, "polars-expr-eq-missing"]], "polars.Expr.floordiv": [[390, "polars-expr-floordiv"]], "polars.Expr.first": [[387, "polars-expr-first"]], "polars.Expr.kurtosis": [[416, "polars-expr-kurtosis"]], "polars.Expr.exclude": [[380, "polars-expr-exclude"]], "polars.Expr.len": [[419, "polars-expr-len"]], "polars.Expr.list.arg_min": [[424, "polars-expr-list-arg-min"]], "polars.Expr.implode": [[397, "polars-expr-implode"]], "polars.Expr.list.concat": [[425, "polars-expr-list-concat"]], "polars.Expr.gt": [[394, "polars-expr-gt"]], "polars.Expr.filter": [[386, "polars-expr-filter"]], "polars.Expr.ge": [[393, "polars-expr-ge"]], "polars.Expr.limit": [[420, "polars-expr-limit"]], "polars.Expr.list.min": [[442, "polars-expr-list-min"]], "polars.Expr.is_first_distinct": [[404, "polars-expr-is-first-distinct"]], "polars.Expr.eq": [[375, "polars-expr-eq"]], "polars.Expr.flatten": [[388, "polars-expr-flatten"]], "polars.Expr.ewm_var": [[379, "polars-expr-ewm-var"]], "polars.Expr.is_not_nan": [[411, "polars-expr-is-not-nan"]], "polars.Expr.list.all": [[421, "polars-expr-list-all"]], "polars.Expr.forward_fill": [[391, "polars-expr-forward-fill"]], "polars.Expr.fill_null": [[385, "polars-expr-fill-null"]], "polars.Expr.ewm_std": [[378, "polars-expr-ewm-std"]], "polars.Expr.from_json": [[392, "polars-expr-from-json"]], "polars.Expr.list.set_symmetric_difference": [[446, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[447, "polars-expr-list-set-union"]], "polars.Expr.list.join": [[437, "polars-expr-list-join"]], "polars.Expr.list.diff": [[429, "polars-expr-list-diff"]], "polars.Expr.list.max": [[440, "polars-expr-list-max"]], "polars.Expr.is_last_distinct": [[408, "polars-expr-is-last-distinct"]], "polars.Expr.list.count_match": [[427, "polars-expr-list-count-match"]], "polars.Expr.is_finite": [[402, "polars-expr-is-finite"]], "polars.Expr.list.eval": [[431, "polars-expr-list-eval"]], "polars.Expr.list.lengths": [[439, "polars-expr-list-lengths"]], "polars.Expr.is_not_null": [[412, "polars-expr-is-not-null"]], "polars.Expr.is_unique": [[414, "polars-expr-is-unique"]], "polars.Expr.is_nan": [[409, "polars-expr-is-nan"]], "polars.Expr.list.mean": [[441, "polars-expr-list-mean"]], "polars.Expr.inspect": [[398, "polars-expr-inspect"]], "polars.Expr.ewm_mean": [[377, "polars-expr-ewm-mean"]], "polars.Expr.interpolate": [[399, "polars-expr-interpolate"]], "polars.Expr.list.get": [[434, "polars-expr-list-get"]], "polars.Expr.dt.base_utc_offset": [[333, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cut": [[327, "polars-expr-cut"]], "polars.Expr.dt.month_end": [[354, "polars-expr-dt-month-end"]], "polars.Expr.bottom_k": [[308, "polars-expr-bottom-k"]], "polars.Expr.dt.week": [[370, "polars-expr-dt-week"]], "polars.Expr.dt.millisecond": [[349, "polars-expr-dt-millisecond"]], "polars.Expr.dt.epoch": [[342, "polars-expr-dt-epoch"]], "polars.Expr.cat.get_categories": [[311, "polars-expr-cat-get-categories"]], "polars.Expr.bin.ends_with": [[306, "polars-expr-bin-ends-with"]], "polars.Expr.arr.sum": [[300, "polars-expr-arr-sum"]], "polars.Expr.cumprod": [[324, "polars-expr-cumprod"]], "polars.Expr.dt.minute": [[351, "polars-expr-dt-minute"]], "polars.Expr.dt.minutes": [[352, "polars-expr-dt-minutes"]], "polars.Expr.cache": [[309, "polars-expr-cache"]], "polars.Expr.dt.second": [[363, "polars-expr-dt-second"]], "polars.Expr.dt.seconds": [[364, "polars-expr-dt-seconds"]], "polars.Expr.dt.month": [[353, "polars-expr-dt-month"]], "polars.Expr.dt.is_leap_year": [[345, "polars-expr-dt-is-leap-year"]], "polars.Expr.diff": [[329, "polars-expr-diff"]], "polars.Expr.dot": [[330, "polars-expr-dot"]], "polars.Expr.cumcount": [[321, "polars-expr-cumcount"]], "polars.Expr.dt.truncate": [[369, "polars-expr-dt-truncate"]], "polars.Expr.dt.datetime": [[338, "polars-expr-dt-datetime"]], "polars.Expr.ceil": [[314, "polars-expr-ceil"]], "polars.Expr.dt.ordinal_day": [[359, "polars-expr-dt-ordinal-day"]], "polars.Expr.bin.contains": [[303, "polars-expr-bin-contains"]], "polars.Expr.bin.encode": [[305, "polars-expr-bin-encode"]], "polars.Expr.cat.set_ordering": [[312, "polars-expr-cat-set-ordering"]], "polars.Expr.entropy": [[374, "polars-expr-entropy"]], "polars.Expr.drop_nulls": [[332, "polars-expr-drop-nulls"]], "polars.Expr.dt.replace_time_zone": [[361, "polars-expr-dt-replace-time-zone"]], "polars.Expr.clip": [[315, "polars-expr-clip"]], "polars.Expr.degrees": [[328, "polars-expr-degrees"]], "polars.Expr.dt.quarter": [[360, "polars-expr-dt-quarter"]], "polars.Expr.dt.combine": [[335, "polars-expr-dt-combine"]], "polars.Expr.bin.decode": [[304, "polars-expr-bin-decode"]], "polars.Expr.clip_max": [[316, "polars-expr-clip-max"]], "polars.Expr.dt.convert_time_zone": [[336, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cumsum": [[325, "polars-expr-cumsum"]], "polars.Expr.dt.microsecond": [[347, "polars-expr-dt-microsecond"]], "polars.Expr.dt.strftime": [[365, "polars-expr-dt-strftime"]], "polars.Expr.cast": [[310, "polars-expr-cast"]], "polars.Expr.dt.hours": [[344, "polars-expr-dt-hours"]], "polars.Expr.dt.milliseconds": [[350, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.with_time_unit": [[372, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[373, "polars-expr-dt-year"]], "polars.Expr.drop_nans": [[331, "polars-expr-drop-nans"]], "polars.Expr.cos": [[318, "polars-expr-cos"]], "polars.Expr.dt.timestamp": [[367, "polars-expr-dt-timestamp"]], "polars.Expr.cummin": [[323, "polars-expr-cummin"]], "polars.Expr.dt.round": [[362, "polars-expr-dt-round"]], "polars.Expr.dt.hour": [[343, "polars-expr-dt-hour"]], "polars.Expr.cumulative_eval": [[326, "polars-expr-cumulative-eval"]], "polars.Expr.dt.month_start": [[355, "polars-expr-dt-month-start"]], "polars.Expr.dt.day": [[339, "polars-expr-dt-day"]], "polars.Expr.dt.to_string": [[368, "polars-expr-dt-to-string"]], "polars.Expr.dt.cast_time_unit": [[334, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.date": [[337, "polars-expr-dt-date"]], "polars.Expr.cummax": [[322, "polars-expr-cummax"]], "polars.Expr.clip_min": [[317, "polars-expr-clip-min"]], "polars.Expr.arr.unique": [[301, "polars-expr-arr-unique"]], "polars.Expr.dt.days": [[340, "polars-expr-dt-days"]], "polars.Expr.dt.nanoseconds": [[357, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.nanosecond": [[356, "polars-expr-dt-nanosecond"]], "polars.Expr.cosh": [[319, "polars-expr-cosh"]], "polars.Expr.bin.starts_with": [[307, "polars-expr-bin-starts-with"]], "polars.Expr.count": [[320, "polars-expr-count"]], "polars.Expr.dt.iso_year": [[346, "polars-expr-dt-iso-year"]], "polars.Expr.cbrt": [[313, "polars-expr-cbrt"]], "polars.Expr.dt.time": [[366, "polars-expr-dt-time"]], "polars.Expr.dt.microseconds": [[348, "polars-expr-dt-microseconds"]], "polars.Expr.dt.weekday": [[371, "polars-expr-dt-weekday"]], "polars.Expr.backward_fill": [[302, "polars-expr-backward-fill"]], "polars.Expr.dt.dst_offset": [[341, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.offset_by": [[358, "polars-expr-dt-offset-by"]], "polars.DataFrame.schema": [[213, "polars-dataframe-schema"]], "polars.DataFrame.insert_at_idx": [[177, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.slice": [[221, "polars-dataframe-slice"]], "polars.DataFrame.replace": [[206, "polars-dataframe-replace"]], "polars.DataFrame.sort": [[222, "polars-dataframe-sort"]], "polars.DataFrame.row": [[209, "polars-dataframe-row"]], "polars.DataFrame.reverse": [[208, "polars-dataframe-reverse"]], "polars.DataFrame.head": [[174, "polars-dataframe-head"]], "polars.DataFrame.get_columns": [[165, "polars-dataframe-get-columns"]], "polars.DataFrame.drop_in_place": [[151, "polars-dataframe-drop-in-place"]], "polars.DataFrame.item": [[182, "polars-dataframe-item"]], "polars.DataFrame.get_column": [[164, "polars-dataframe-get-column"]], "polars.DataFrame.n_unique": [[197, "polars-dataframe-n-unique"]], "polars.DataFrame.merge_sorted": [[194, "polars-dataframe-merge-sorted"]], "polars.DataFrame.filter": [[159, "polars-dataframe-filter"]], "polars.DataFrame.quantile": [[203, "polars-dataframe-quantile"]], "polars.DataFrame.group_by_dynamic": [[168, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.melt": [[193, "polars-dataframe-melt"]], "polars.DataFrame.null_count": [[198, "polars-dataframe-null-count"]], "polars.DataFrame.set_sorted": [[216, "polars-dataframe-set-sorted"]], "polars.DataFrame.shift": [[218, "polars-dataframe-shift"]], "polars.DataFrame.rows": [[210, "polars-dataframe-rows"]], "polars.DataFrame.iter_slices": [[184, "polars-dataframe-iter-slices"]], "polars.DataFrame.pivot": [[201, "polars-dataframe-pivot"]], "polars.DataFrame.select": [[214, "polars-dataframe-select"]], "polars.DataFrame.sum": [[224, "polars-dataframe-sum"]], "polars.DataFrame.join_asof": [[186, "polars-dataframe-join-asof"]], "polars.DataFrame.fold": [[162, "polars-dataframe-fold"]], "polars.DataFrame.std": [[223, "polars-dataframe-std"]], "polars.DataFrame.estimated_size": [[154, "polars-dataframe-estimated-size"]], "polars.DataFrame.group_by": [[167, "polars-dataframe-group-by"]], "polars.DataFrame.groupby_rolling": [[172, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.rechunk": [[204, "polars-dataframe-rechunk"]], "polars.DataFrame.flags": [[161, "polars-dataframe-flags"]], "polars.DataFrame.is_empty": [[180, "polars-dataframe-is-empty"]], "polars.DataFrame.drop_nulls": [[152, "polars-dataframe-drop-nulls"]], "polars.DataFrame.shape": [[217, "polars-dataframe-shape"]], "polars.DataFrame.find_idx_by_name": [[160, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.interpolate": [[178, "polars-dataframe-interpolate"]], "polars.DataFrame.explode": [[155, "polars-dataframe-explode"]], "polars.DataFrame.frame_equal": [[163, "polars-dataframe-frame-equal"]], "polars.DataFrame.shift_and_fill": [[219, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.lazy": [[187, "polars-dataframe-lazy"]], "polars.DataFrame.median": [[192, "polars-dataframe-median"]], "polars.DataFrame.product": [[202, "polars-dataframe-product"]], "polars.DataFrame.map_rows": [[189, "polars-dataframe-map-rows"]], "polars.DataFrame.rows_by_key": [[211, "polars-dataframe-rows-by-key"]], "polars.DataFrame.height": [[175, "polars-dataframe-height"]], "polars.DataFrame.is_duplicated": [[179, "polars-dataframe-is-duplicated"]], "polars.DataFrame.partition_by": [[199, "polars-dataframe-partition-by"]], "polars.DataFrame.glimpse": [[166, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby": [[170, "polars-dataframe-groupby"]], "polars.DataFrame.replace_at_idx": [[207, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.is_unique": [[181, "polars-dataframe-is-unique"]], "polars.DataFrame.dtypes": [[153, "polars-dataframe-dtypes"]], "polars.DataFrame.fill_null": [[158, "polars-dataframe-fill-null"]], "polars.DataFrame.n_chunks": [[196, "polars-dataframe-n-chunks"]], "polars.DataFrame.hash_rows": [[173, "polars-dataframe-hash-rows"]], "polars.DataFrame.drop": [[150, "polars-dataframe-drop"]], "polars.DataFrame.groupby_dynamic": [[171, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.hstack": [[176, "polars-dataframe-hstack"]], "polars.DataFrame.group_by_rolling": [[169, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.select_seq": [[215, "polars-dataframe-select-seq"]], "polars.DataFrame.max": [[190, "polars-dataframe-max"]], "polars.DataFrame.extend": [[156, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[157, "polars-dataframe-fill-nan"]], "polars.DataFrame.pipe": [[200, "polars-dataframe-pipe"]], "polars.DataFrame.mean": [[191, "polars-dataframe-mean"]], "polars.DataFrame.iter_rows": [[183, "polars-dataframe-iter-rows"]], "polars.DataFrame.join": [[185, "polars-dataframe-join"]], "polars.DataFrame.limit": [[188, "polars-dataframe-limit"]], "polars.DataFrame.min": [[195, "polars-dataframe-min"]], "polars.DataFrame.rename": [[205, "polars-dataframe-rename"]], "polars.DataFrame.shrink_to_fit": [[220, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sample": [[212, "polars-dataframe-sample"]], "polars.dataframe.group_by.GroupBy.head": [[255, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.to_series": [[234, "polars-dataframe-to-series"]], "polars.Expr.arg_unique": [[297, "polars-expr-arg-unique"]], "polars.Expr.arccosh": [[288, "polars-expr-arccosh"]], "polars.DataFrame.with_columns_seq": [[247, "polars-dataframe-with-columns-seq"]], "polars.dataframe.group_by.GroupBy.tail": [[265, "polars-dataframe-group-by-groupby-tail"]], "Data types": [[274, "data-types"]], "Nested": [[274, "nested"]], "Other": [[274, "other"]], "polars.DataFrame.top_k": [[236, "polars-dataframe-top-k"]], "polars.Expr.approx_n_unique": [[286, "polars-expr-approx-n-unique"]], "polars.Expr.and_": [[282, "polars-expr-and"]], "polars.dataframe.group_by.GroupBy.max": [[258, "polars-dataframe-group-by-groupby-max"]], "polars.DataFrame.tail": [[225, "polars-dataframe-tail"]], "polars.DataFrame.var": [[243, "polars-dataframe-var"]], "polars.DataFrame.to_dict": [[228, "polars-dataframe-to-dict"]], "polars.Expr.arccos": [[287, "polars-expr-arccos"]], "polars.Expr.any": [[283, "polars-expr-any"]], "polars.DataFrame.unstack": [[240, "polars-dataframe-unstack"]], "polars.dataframe.group_by.GroupBy.quantile": [[263, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arg_true": [[296, "polars-expr-arg-true"]], "polars.Expr.add": [[278, "polars-expr-add"]], "polars.Expr.arcsin": [[289, "polars-expr-arcsin"]], "polars.DataFrame.to_numpy": [[232, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_struct": [[235, "polars-dataframe-to-struct"]], "Exceptions": [[275, "exceptions"]], "polars.DataFrame.to_dummies": [[230, "polars-dataframe-to-dummies"]], "polars.DataFrame.transpose": [[237, "polars-dataframe-transpose"]], "polars.DataFrame.update": [[241, "polars-dataframe-update"]], "polars.DataFrame.with_columns": [[246, "polars-dataframe-with-columns"]], "polars.dataframe.group_by.GroupBy.agg": [[250, "polars-dataframe-group-by-groupby-agg"]], "polars.Expr.agg_groups": [[279, "polars-expr-agg-groups"]], "polars.DataFrame.unnest": [[239, "polars-dataframe-unnest"]], "polars.Expr.arr.min": [[299, "polars-expr-arr-min"]], "polars.Expr.append": [[284, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.min": [[261, "polars-dataframe-group-by-groupby-min"]], "polars.DataFrame.vstack": [[244, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.map_groups": [[257, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arctan": [[291, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.mean": [[259, "polars-dataframe-group-by-groupby-mean"]], "DataFrame": [[271, "dataframe"]], "polars.DataFrame.width": [[245, "polars-dataframe-width"]], "polars.Expr.apply": [[285, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.all": [[251, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.to_arrow": [[227, "polars-dataframe-to-arrow"]], "polars.Expr.arg_sort": [[295, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.__iter__": [[249, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.unique": [[238, "polars-dataframe-unique"]], "polars.Expr.arcsinh": [[290, "polars-expr-arcsinh"]], "polars.DataFrame.upsample": [[242, "polars-dataframe-upsample"]], "polars.dataframe.group_by.GroupBy.count": [[253, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.all": [[281, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.n_unique": [[262, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.first": [[254, "polars-dataframe-group-by-groupby-first"]], "polars.DataFrame.take_every": [[226, "polars-dataframe-take-every"]], "polars.DataFrame.to_pandas": [[233, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_init_repr": [[231, "polars-dataframe-to-init-repr"]], "polars.dataframe.group_by.GroupBy.sum": [[264, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.abs": [[277, "polars-expr-abs"]], "polars.DataFrame.with_row_count": [[248, "polars-dataframe-with-row-count"]], "polars.Expr.arctanh": [[292, "polars-expr-arctanh"]], "polars.DataFrame.to_dicts": [[229, "polars-dataframe-to-dicts"]], "polars.dataframe.group_by.GroupBy.apply": [[252, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arr.max": [[298, "polars-expr-arr-max"]], "polars.Expr.arg_max": [[293, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.last": [[256, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.median": [[260, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arg_min": [[294, "polars-expr-arg-min"]], "polars.Expr.alias": [[280, "polars-expr-alias"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[33, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[34, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[35, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[36, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[37, "polars.DataType"]], "__init__() (polars.datatype method)": [[37, "polars.DataType.__init__"]], "date (class in polars)": [[38, "polars.Date"]], "__init__() (polars.date method)": [[38, "polars.Date.__init__"]], "datetime (class in polars)": [[39, "polars.Datetime"]], "__init__() (polars.datetime method)": [[39, "polars.Datetime.__init__"]], "decimal (class in polars)": [[40, "polars.Decimal"]], "__init__() (polars.decimal method)": [[40, "polars.Decimal.__init__"]], "duration (class in polars)": [[41, "polars.Duration"]], "__init__() (polars.duration method)": [[41, "polars.Duration.__init__"]], "float32 (class in polars)": [[42, "polars.Float32"]], "__init__() (polars.float32 method)": [[42, "polars.Float32.__init__"]], "float64 (class in polars)": [[43, "polars.Float64"]], "__init__() (polars.float64 method)": [[43, "polars.Float64.__init__"]], "int16 (class in polars)": [[44, "polars.Int16"]], "__init__() (polars.int16 method)": [[44, "polars.Int16.__init__"]], "int32 (class in polars)": [[45, "polars.Int32"]], "__init__() (polars.int32 method)": [[45, "polars.Int32.__init__"]], "int64 (class in polars)": [[46, "polars.Int64"]], "__init__() (polars.int64 method)": [[46, "polars.Int64.__init__"]], "int8 (class in polars)": [[47, "polars.Int8"]], "__init__() (polars.int8 method)": [[47, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[51, "polars.List"]], "__init__() (polars.list method)": [[51, "polars.List.__init__"]], "null (class in polars)": [[52, "polars.Null"]], "__init__() (polars.null method)": [[52, "polars.Null.__init__"]], "object (class in polars)": [[53, "polars.Object"]], "__init__() (polars.object method)": [[53, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[54, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[55, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[56, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[57, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[58, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[59, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[60, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[60, "polars.StringCache.__init__"]], "struct (class in polars)": [[61, "polars.Struct"]], "__init__() (polars.struct method)": [[61, "polars.Struct.__init__"]], "time (class in polars)": [[62, "polars.Time"]], "__init__() (polars.time method)": [[62, "polars.Time.__init__"]], "uint16 (class in polars)": [[63, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[63, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[64, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[64, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[65, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[65, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[66, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[66, "polars.UInt8.__init__"]], "unknown (class in polars)": [[67, "polars.Unknown"]], "__init__() (polars.unknown method)": [[67, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[68, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[68, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[69, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[70, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[71, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[72, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[73, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[74, "polars.build_info"]], "collect_all() (in module polars)": [[75, "polars.collect_all"]], "collect_all_async() (in module polars)": [[76, "polars.collect_all_async"]], "concat() (in module polars)": [[77, "polars.concat"]], "enable_string_cache() (in module polars)": [[78, "polars.enable_string_cache"]], "arrowerror": [[79, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[80, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[81, "polars.exceptions.ComputeError"]], "duplicateerror": [[82, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[83, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[84, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[85, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[86, "polars.exceptions.PolarsPanicError"]], "rowserror": [[87, "polars.exceptions.RowsError"]], "schemaerror": [[88, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[89, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[90, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[91, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[92, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[93, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[94, "polars.from_dataframe"]], "from_dict() (in module polars)": [[95, "polars.from_dict"]], "from_dicts() (in module polars)": [[96, "polars.from_dicts"]], "from_numpy() (in module polars)": [[97, "polars.from_numpy"]], "from_pandas() (in module polars)": [[98, "polars.from_pandas"]], "from_records() (in module polars)": [[99, "polars.from_records"]], "from_repr() (in module polars)": [[100, "polars.from_repr"]], "get_index_type() (in module polars)": [[101, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[102, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[103, "polars.read_avro"]], "read_csv() (in module polars)": [[104, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[105, "polars.read_csv_batched"]], "read_database() (in module polars)": [[106, "polars.read_database"]], "read_database_uri() (in module polars)": [[107, "polars.read_database_uri"]], "read_delta() (in module polars)": [[108, "polars.read_delta"]], "read_excel() (in module polars)": [[109, "polars.read_excel"]], "read_ipc() (in module polars)": [[110, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[111, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[112, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[113, "polars.read_json"]], "read_ndjson() (in module polars)": [[114, "polars.read_ndjson"]], "read_ods() (in module polars)": [[115, "polars.read_ods"]], "read_parquet() (in module polars)": [[116, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[117, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[118, "polars.scan_csv"]], "scan_delta() (in module polars)": [[119, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[120, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[121, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[122, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[123, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[124, "polars.set_random_seed"]], "show_versions() (in module polars)": [[125, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[126, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[127, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[128, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[128, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[129, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[130, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[131, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[132, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[133, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[134, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[135, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[136, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[139, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[140, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[141, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[142, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[143, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[144, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[145, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[146, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[147, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[148, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[149, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[150, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[151, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[152, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[153, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[154, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[155, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[156, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[157, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[158, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[159, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[160, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[161, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[162, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[163, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[164, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[165, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[166, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[167, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[168, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[169, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[170, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[171, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[172, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[173, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[174, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[175, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[176, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[177, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[178, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[179, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[180, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[181, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[182, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[183, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[184, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[185, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[186, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[187, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[188, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[189, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[190, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[191, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[192, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[193, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[194, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[195, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[196, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[197, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[198, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[199, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[200, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[201, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[202, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[203, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[204, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[205, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[206, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[207, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[208, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[209, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[210, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[211, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[212, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[213, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[214, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[215, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[216, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[217, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[218, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[219, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[220, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[221, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[222, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[223, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[224, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[225, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[226, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[227, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[228, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[229, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[230, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[231, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[232, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[233, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[234, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[235, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[236, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[237, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[238, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[239, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[240, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[241, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[242, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[243, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[244, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[245, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[246, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[247, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[248, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[249, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[250, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[251, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[252, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[253, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[254, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[255, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[256, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[277, "polars.Expr.abs"]], "add() (polars.expr method)": [[278, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[279, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[280, "polars.Expr.alias"]], "all() (polars.expr method)": [[281, "polars.Expr.all"]], "and_() (polars.expr method)": [[282, "polars.Expr.and_"]], "any() (polars.expr method)": [[283, "polars.Expr.any"]], "append() (polars.expr method)": [[284, "polars.Expr.append"]], "apply() (polars.expr method)": [[285, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[286, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[287, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[288, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[289, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[290, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[291, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[292, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[293, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[294, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[295, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[296, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[297, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[298, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[299, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[300, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[301, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[302, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[303, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[304, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[305, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[306, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[307, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[308, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[309, "polars.Expr.cache"]], "cast() (polars.expr method)": [[310, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[311, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[312, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[313, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[314, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[315, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[316, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[317, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[318, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[319, "polars.Expr.cosh"]], "count() (polars.expr method)": [[320, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[321, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[322, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[323, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[324, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[325, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[326, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[327, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[328, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[329, "polars.Expr.diff"]], "dot() (polars.expr method)": [[330, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[331, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[332, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[333, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[334, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[335, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[336, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[337, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[338, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[339, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[340, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[341, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[342, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[343, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[344, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[345, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[346, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[347, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[348, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[349, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[350, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[351, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[352, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[353, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[354, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[355, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[356, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[357, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[358, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[359, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[360, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[361, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[362, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[363, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[364, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[365, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[366, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[367, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[368, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[369, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[370, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[371, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[372, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[373, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[374, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[375, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[376, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[377, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[378, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[379, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[380, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[381, "polars.Expr.exp"]], "explode() (polars.expr method)": [[382, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[383, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[384, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[385, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[386, "polars.Expr.filter"]], "first() (polars.expr method)": [[387, "polars.Expr.first"]], "flatten() (polars.expr method)": [[388, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[389, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[390, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[391, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[392, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[393, "polars.Expr.ge"]], "gt() (polars.expr method)": [[394, "polars.Expr.gt"]], "hash() (polars.expr method)": [[395, "polars.Expr.hash"]], "head() (polars.expr method)": [[396, "polars.Expr.head"]], "implode() (polars.expr method)": [[397, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[398, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[399, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[400, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[401, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[402, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[403, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[404, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[405, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[406, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[407, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[408, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[409, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[410, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[411, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[412, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[413, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[414, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[415, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[416, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[417, "polars.Expr.last"]], "le() (polars.expr method)": [[418, "polars.Expr.le"]], "len() (polars.expr method)": [[419, "polars.Expr.len"]], "limit() (polars.expr method)": [[420, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[421, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[422, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[423, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[424, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[425, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[426, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[427, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[428, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[429, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[430, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[431, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[432, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[433, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[434, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[435, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[436, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[437, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[438, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[439, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[440, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[441, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[442, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[443, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[444, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[445, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[446, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[447, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[448, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[449, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[450, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[451, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[452, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[453, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[454, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[455, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[456, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[457, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[458, "polars.Expr.log"]], "log10() (polars.expr method)": [[459, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[460, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[461, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[462, "polars.Expr.lt"]], "map() (polars.expr method)": [[463, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[464, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[465, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[466, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[467, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[468, "polars.Expr.max"]], "mean() (polars.expr method)": [[469, "polars.Expr.mean"]], "median() (polars.expr method)": [[470, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[471, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[472, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[473, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[474, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[475, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[476, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[477, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[478, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[479, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[480, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[481, "polars.Expr.min"]], "mod() (polars.expr method)": [[482, "polars.Expr.mod"]], "mode() (polars.expr method)": [[483, "polars.Expr.mode"]], "mul() (polars.expr method)": [[484, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[485, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[486, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[487, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[488, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[489, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[490, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[491, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[492, "polars.Expr.or_"]], "over() (polars.expr method)": [[493, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[494, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[495, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[496, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[497, "polars.Expr.prefix"]], "product() (polars.expr method)": [[498, "polars.Expr.product"]], "qcut() (polars.expr method)": [[499, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[500, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[501, "polars.Expr.radians"]], "rank() (polars.expr method)": [[502, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[503, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[504, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[505, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[506, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[507, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[508, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[509, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[510, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[511, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[512, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[513, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[514, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[515, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[516, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[517, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[518, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[519, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[520, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[521, "polars.Expr.round"]], "sample() (polars.expr method)": [[522, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[523, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[524, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[525, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[526, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[527, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[528, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[529, "polars.Expr.sign"]], "sin() (polars.expr method)": [[530, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[531, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[532, "polars.Expr.skew"]], "slice() (polars.expr method)": [[533, "polars.Expr.slice"]], "sort() (polars.expr method)": [[534, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[535, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[536, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[537, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[538, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[539, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[540, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[541, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[542, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[543, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[544, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[545, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[546, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[547, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[548, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[549, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[550, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[551, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[552, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[553, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[554, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[555, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[556, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[557, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[558, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[559, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[560, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[561, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[562, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[563, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[564, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[565, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[566, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[567, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[568, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[569, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[570, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[571, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[572, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[573, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[574, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[575, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[576, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[577, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[578, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[579, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[580, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[581, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[582, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[583, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[584, "polars.Expr.sum"]], "tail() (polars.expr method)": [[585, "polars.Expr.tail"]], "take() (polars.expr method)": [[586, "polars.Expr.take"]], "take_every() (polars.expr method)": [[587, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[588, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[589, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[590, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[591, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[592, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[593, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[594, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[595, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[596, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[597, "polars.Expr.var"]], "where() (polars.expr method)": [[598, "polars.Expr.where"]], "xor() (polars.expr method)": [[599, "polars.Expr.xor"]], "all() (in module polars)": [[600, "polars.all"]], "all_horizontal() (in module polars)": [[601, "polars.all_horizontal"]], "any() (in module polars)": [[602, "polars.any"]], "any_horizontal() (in module polars)": [[603, "polars.any_horizontal"]], "apply() (in module polars)": [[604, "polars.apply"]], "approx_n_unique() (in module polars)": [[605, "polars.approx_n_unique"]], "arange() (in module polars)": [[606, "polars.arange"]], "arctan2() (in module polars)": [[607, "polars.arctan2"]], "arctan2d() (in module polars)": [[608, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[609, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[610, "polars.arg_where"]], "avg() (in module polars)": [[611, "polars.avg"]], "coalesce() (in module polars)": [[612, "polars.coalesce"]], "concat_list() (in module polars)": [[613, "polars.concat_list"]], "concat_str() (in module polars)": [[614, "polars.concat_str"]], "corr() (in module polars)": [[615, "polars.corr"]], "count() (in module polars)": [[616, "polars.count"]], "cov() (in module polars)": [[617, "polars.cov"]], "cumfold() (in module polars)": [[618, "polars.cumfold"]], "cumreduce() (in module polars)": [[619, "polars.cumreduce"]], "cumsum() (in module polars)": [[620, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[621, "polars.cumsum_horizontal"]], "date() (in module polars)": [[622, "polars.date"]], "date_range() (in module polars)": [[623, "polars.date_range"]], "date_ranges() (in module polars)": [[624, "polars.date_ranges"]], "datetime() (in module polars)": [[625, "polars.datetime"]], "datetime_range() (in module polars)": [[626, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[627, "polars.datetime_ranges"]], "duration() (in module polars)": [[628, "polars.duration"]], "element() (in module polars)": [[629, "polars.element"]], "exclude() (in module polars)": [[630, "polars.exclude"]], "first() (in module polars)": [[631, "polars.first"]], "fold() (in module polars)": [[632, "polars.fold"]], "format() (in module polars)": [[633, "polars.format"]], "from_epoch() (in module polars)": [[634, "polars.from_epoch"]], "groups() (in module polars)": [[635, "polars.groups"]], "head() (in module polars)": [[636, "polars.head"]], "implode() (in module polars)": [[637, "polars.implode"]], "int_range() (in module polars)": [[638, "polars.int_range"]], "int_ranges() (in module polars)": [[639, "polars.int_ranges"]], "last() (in module polars)": [[640, "polars.last"]], "lit() (in module polars)": [[641, "polars.lit"]], "map() (in module polars)": [[642, "polars.map"]], "map_batches() (in module polars)": [[643, "polars.map_batches"]], "map_groups() (in module polars)": [[644, "polars.map_groups"]], "max() (in module polars)": [[645, "polars.max"]], "max_horizontal() (in module polars)": [[646, "polars.max_horizontal"]], "mean() (in module polars)": [[647, "polars.mean"]], "median() (in module polars)": [[648, "polars.median"]], "min() (in module polars)": [[649, "polars.min"]], "min_horizontal() (in module polars)": [[650, "polars.min_horizontal"]], "n_unique() (in module polars)": [[651, "polars.n_unique"]], "ones() (in module polars)": [[652, "polars.ones"]], "quantile() (in module polars)": [[653, "polars.quantile"]], "reduce() (in module polars)": [[654, "polars.reduce"]], "repeat() (in module polars)": [[655, "polars.repeat"]], "rolling_corr() (in module polars)": [[656, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[657, "polars.rolling_cov"]], "select() (in module polars)": [[658, "polars.select"]], "sql_expr() (in module polars)": [[659, "polars.sql_expr"]], "std() (in module polars)": [[660, "polars.std"]], "struct() (in module polars)": [[661, "polars.struct"]], "sum() (in module polars)": [[662, "polars.sum"]], "sum_horizontal() (in module polars)": [[663, "polars.sum_horizontal"]], "tail() (in module polars)": [[664, "polars.tail"]], "time() (in module polars)": [[665, "polars.time"]], "time_range() (in module polars)": [[666, "polars.time_range"]], "time_ranges() (in module polars)": [[667, "polars.time_ranges"]], "var() (in module polars)": [[668, "polars.var"]], "when() (in module polars)": [[669, "polars.when"]], "zeros() (in module polars)": [[670, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[693, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[694, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[695, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[696, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[697, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[698, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[699, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[700, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[701, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[702, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[703, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[704, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[705, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[706, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[707, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[708, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[709, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[710, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[711, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[712, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[713, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[714, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[715, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[716, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[717, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[718, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[719, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[720, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[721, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[722, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[723, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[724, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[725, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[726, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[727, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[728, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[729, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[730, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[731, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[732, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[733, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[734, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[735, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[736, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[737, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[738, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[739, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[740, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[741, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[742, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[743, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[744, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[745, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[746, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[747, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[748, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[749, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[750, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[751, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[752, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[753, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[754, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[755, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[756, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[757, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[758, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[759, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[760, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[761, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[762, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[763, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[764, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[765, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[766, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[767, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[768, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[769, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[770, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[771, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[772, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[773, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[774, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[775, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[776, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[777, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[778, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[779, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[780, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[781, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[782, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[783, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[784, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[791, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[791, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[791, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[791, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[791, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[791, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[791, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[791, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[791, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[791, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[791, "polars.selectors.first"]], "float() (in module polars.selectors)": [[791, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[791, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[791, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[791, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[791, "polars.selectors.matches"]], "module": [[791, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[791, "polars.selectors.numeric"]], "polars.selectors": [[791, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[791, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[791, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[791, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[791, "polars.selectors.time"]], "abs() (polars.series method)": [[793, "polars.Series.abs"]], "alias() (polars.series method)": [[794, "polars.Series.alias"]], "all() (polars.series method)": [[795, "polars.Series.all"]], "any() (polars.series method)": [[796, "polars.Series.any"]], "append() (polars.series method)": [[797, "polars.Series.append"]], "apply() (polars.series method)": [[798, "polars.Series.apply"]], "arccos() (polars.series method)": [[799, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[800, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[801, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[802, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[803, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[804, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[805, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[806, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[807, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[808, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[809, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[810, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[811, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[812, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[813, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[814, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[815, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[816, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[817, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[818, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[819, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[820, "polars.Series.cast"]], "cat (polars.series attribute)": [[821, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[822, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[823, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[824, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[825, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[826, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[827, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[828, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[829, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[830, "polars.Series.clear"]], "clip() (polars.series method)": [[831, "polars.Series.clip"]], "clip_max() (polars.series method)": [[832, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[833, "polars.Series.clip_min"]], "clone() (polars.series method)": [[834, "polars.Series.clone"]], "cos() (polars.series method)": [[835, "polars.Series.cos"]], "cosh() (polars.series method)": [[836, "polars.Series.cosh"]], "cummax() (polars.series method)": [[837, "polars.Series.cummax"]], "cummin() (polars.series method)": [[838, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[839, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[840, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[841, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[842, "polars.Series.cut"]], "describe() (polars.series method)": [[843, "polars.Series.describe"]], "diff() (polars.series method)": [[844, "polars.Series.diff"]], "dot() (polars.series method)": [[845, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[846, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[847, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[848, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[849, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[850, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[851, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[852, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[853, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[854, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[855, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[856, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[857, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[858, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[859, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[860, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[861, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[862, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[863, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[864, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[865, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[866, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[867, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[868, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[869, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[870, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[871, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[872, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[873, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[874, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[875, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[876, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[877, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[878, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[879, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[880, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[881, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[882, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[883, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[884, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[885, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[886, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[887, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[888, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[889, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[890, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[891, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[892, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[893, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[894, "polars.Series.dtype"]], "entropy() (polars.series method)": [[895, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[896, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[897, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[898, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[899, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[900, "polars.Series.exp"]], "explode() (polars.series method)": [[901, "polars.Series.explode"]], "extend() (polars.series method)": [[902, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[903, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[904, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[905, "polars.Series.fill_null"]], "filter() (polars.series method)": [[906, "polars.Series.filter"]], "flags (polars.series attribute)": [[907, "polars.Series.flags"]], "floor() (polars.series method)": [[908, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[909, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[910, "polars.Series.has_validity"]], "hash() (polars.series method)": [[911, "polars.Series.hash"]], "head() (polars.series method)": [[912, "polars.Series.head"]], "hist() (polars.series method)": [[913, "polars.Series.hist"]], "implode() (polars.series method)": [[914, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[915, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[916, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[917, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[918, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[919, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[920, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[921, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[922, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[923, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[924, "polars.Series.is_float"]], "is_in() (polars.series method)": [[925, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[926, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[927, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[928, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[929, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[930, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[931, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[932, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[933, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[934, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[935, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[936, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[937, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[938, "polars.Series.is_utf8"]], "item() (polars.series method)": [[939, "polars.Series.item"]], "kurtosis() (polars.series method)": [[940, "polars.Series.kurtosis"]], "len() (polars.series method)": [[941, "polars.Series.len"]], "limit() (polars.series method)": [[942, "polars.Series.limit"]], "list (polars.series attribute)": [[943, "polars.Series.list"]], "all() (polars.series.list method)": [[944, "polars.Series.list.all"]], "any() (polars.series.list method)": [[945, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[946, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[947, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[948, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[949, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[950, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[951, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[952, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[953, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[954, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[955, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[956, "polars.Series.list.first"]], "get() (polars.series.list method)": [[957, "polars.Series.list.get"]], "head() (polars.series.list method)": [[958, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[959, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[960, "polars.Series.list.join"]], "last() (polars.series.list method)": [[961, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[962, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[963, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[964, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[965, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[966, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[967, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[968, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[969, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[970, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[971, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[972, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[973, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[974, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[975, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[976, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[977, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[978, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[979, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[980, "polars.Series.list.unique"]], "log() (polars.series method)": [[981, "polars.Series.log"]], "log10() (polars.series method)": [[982, "polars.Series.log10"]], "log1p() (polars.series method)": [[983, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[984, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[985, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[986, "polars.Series.map_elements"]], "max() (polars.series method)": [[987, "polars.Series.max"]], "mean() (polars.series method)": [[988, "polars.Series.mean"]], "median() (polars.series method)": [[989, "polars.Series.median"]], "min() (polars.series method)": [[990, "polars.Series.min"]], "mode() (polars.series method)": [[991, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[992, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[993, "polars.Series.n_unique"]], "name (polars.series attribute)": [[994, "polars.Series.name"]], "nan_max() (polars.series method)": [[995, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[996, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[997, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[998, "polars.Series.not_"]], "null_count() (polars.series method)": [[999, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1000, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1001, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1002, "polars.Series.peak_min"]], "product() (polars.series method)": [[1003, "polars.Series.product"]], "qcut() (polars.series method)": [[1004, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1005, "polars.Series.quantile"]], "rank() (polars.series method)": [[1006, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1007, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1008, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1009, "polars.Series.rename"]], "reshape() (polars.series method)": [[1010, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1011, "polars.Series.reverse"]], "rle() (polars.series method)": [[1012, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1013, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1014, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1015, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1016, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1017, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1018, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1019, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1020, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1021, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1022, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1023, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1024, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1025, "polars.Series.round"]], "sample() (polars.series method)": [[1026, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1027, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1028, "polars.Series.series_equal"]], "set() (polars.series method)": [[1029, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1030, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1031, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1032, "polars.Series.shape"]], "shift() (polars.series method)": [[1033, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1034, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1035, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1036, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1037, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1038, "polars.Series.sign"]], "sin() (polars.series method)": [[1039, "polars.Series.sin"]], "sinh() (polars.series method)": [[1040, "polars.Series.sinh"]], "skew() (polars.series method)": [[1041, "polars.Series.skew"]], "slice() (polars.series method)": [[1042, "polars.Series.slice"]], "sort() (polars.series method)": [[1043, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1044, "polars.Series.sqrt"]], "std() (polars.series method)": [[1045, "polars.Series.std"]], "str (polars.series attribute)": [[1046, "polars.Series.str"]], "concat() (polars.series.str method)": [[1047, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1048, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1049, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1050, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1051, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1052, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1053, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1054, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1055, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1056, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1057, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1058, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1059, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[1060, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1061, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1062, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1063, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1064, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1065, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1066, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1067, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1068, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1069, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1070, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1071, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1072, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1073, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1074, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1075, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1076, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1077, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1078, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1079, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1080, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1081, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1082, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1083, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1084, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1085, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1086, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1087, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1088, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1089, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1090, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1091, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1092, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1093, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1094, "polars.Series.sum"]], "tail() (polars.series method)": [[1095, "polars.Series.tail"]], "take() (polars.series method)": [[1096, "polars.Series.take"]], "take_every() (polars.series method)": [[1097, "polars.Series.take_every"]], "tan() (polars.series method)": [[1098, "polars.Series.tan"]], "tanh() (polars.series method)": [[1099, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1100, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1101, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1102, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1103, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1104, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1105, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1106, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1107, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1108, "polars.Series.top_k"]], "unique() (polars.series method)": [[1109, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1110, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1111, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1112, "polars.Series.value_counts"]], "var() (polars.series method)": [[1113, "polars.Series.var"]], "view() (polars.series method)": [[1114, "polars.Series.view"]], "zip_with() (polars.series method)": [[1115, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1131, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1131, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1131, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1131, "polars.SQLContext.__init__"]]}})